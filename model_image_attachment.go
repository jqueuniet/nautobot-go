/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ImageAttachment Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type ImageAttachment struct {
	Id string `json:"id"`
	Url string `json:"url"`
	ContentType string `json:"content_type"`
	ObjectId string `json:"object_id"`
	Parent map[string]interface{} `json:"parent"`
	Name *string `json:"name,omitempty"`
	Image string `json:"image"`
	ImageHeight int32 `json:"image_height"`
	ImageWidth int32 `json:"image_width"`
	Created time.Time `json:"created"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewImageAttachment instantiates a new ImageAttachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageAttachment(id string, url string, contentType string, objectId string, parent map[string]interface{}, image string, imageHeight int32, imageWidth int32, created time.Time, display string) *ImageAttachment {
	this := ImageAttachment{}
	this.Id = id
	this.Url = url
	this.ContentType = contentType
	this.ObjectId = objectId
	this.Parent = parent
	this.Image = image
	this.ImageHeight = imageHeight
	this.ImageWidth = imageWidth
	this.Created = created
	this.Display = display
	return &this
}

// NewImageAttachmentWithDefaults instantiates a new ImageAttachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageAttachmentWithDefaults() *ImageAttachment {
	this := ImageAttachment{}
	return &this
}

// GetId returns the Id field value
func (o *ImageAttachment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ImageAttachment) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *ImageAttachment) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ImageAttachment) SetUrl(v string) {
	o.Url = v
}

// GetContentType returns the ContentType field value
func (o *ImageAttachment) GetContentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentType, true
}

// SetContentType sets field value
func (o *ImageAttachment) SetContentType(v string) {
	o.ContentType = v
}

// GetObjectId returns the ObjectId field value
func (o *ImageAttachment) GetObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *ImageAttachment) SetObjectId(v string) {
	o.ObjectId = v
}

// GetParent returns the Parent field value
func (o *ImageAttachment) GetParent() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetParentOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent, true
}

// SetParent sets field value
func (o *ImageAttachment) SetParent(v map[string]interface{}) {
	o.Parent = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImageAttachment) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImageAttachment) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImageAttachment) SetName(v string) {
	o.Name = &v
}

// GetImage returns the Image field value
func (o *ImageAttachment) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ImageAttachment) SetImage(v string) {
	o.Image = v
}

// GetImageHeight returns the ImageHeight field value
func (o *ImageAttachment) GetImageHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ImageHeight
}

// GetImageHeightOk returns a tuple with the ImageHeight field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetImageHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageHeight, true
}

// SetImageHeight sets field value
func (o *ImageAttachment) SetImageHeight(v int32) {
	o.ImageHeight = v
}

// GetImageWidth returns the ImageWidth field value
func (o *ImageAttachment) GetImageWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ImageWidth
}

// GetImageWidthOk returns a tuple with the ImageWidth field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetImageWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageWidth, true
}

// SetImageWidth sets field value
func (o *ImageAttachment) SetImageWidth(v int32) {
	o.ImageWidth = v
}

// GetCreated returns the Created field value
func (o *ImageAttachment) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ImageAttachment) SetCreated(v time.Time) {
	o.Created = v
}

// GetDisplay returns the Display field value
func (o *ImageAttachment) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *ImageAttachment) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *ImageAttachment) SetDisplay(v string) {
	o.Display = v
}

func (o ImageAttachment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["content_type"] = o.ContentType
	}
	if true {
		toSerialize["object_id"] = o.ObjectId
	}
	if true {
		toSerialize["parent"] = o.Parent
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if true {
		toSerialize["image_height"] = o.ImageHeight
	}
	if true {
		toSerialize["image_width"] = o.ImageWidth
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableImageAttachment struct {
	value *ImageAttachment
	isSet bool
}

func (v NullableImageAttachment) Get() *ImageAttachment {
	return v.value
}

func (v *NullableImageAttachment) Set(val *ImageAttachment) {
	v.value = val
	v.isSet = true
}

func (v NullableImageAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableImageAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageAttachment(val *ImageAttachment) *NullableImageAttachment {
	return &NullableImageAttachment{value: val, isSet: true}
}

func (v NullableImageAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


