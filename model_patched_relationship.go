/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PatchedRelationship struct for PatchedRelationship
type PatchedRelationship struct {
	Id *string `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	// Internal relationship name
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
	Description *string `json:"description,omitempty"`
	// Cardinality of this relationship
	Type NullableRelationshipTypeChoices `json:"type,omitempty"`
	SourceType *string `json:"source_type,omitempty"`
	// Label for related destination objects, as displayed on the source object.
	SourceLabel *string `json:"source_label,omitempty"`
	// Hide this relationship on the source object.
	SourceHidden *bool `json:"source_hidden,omitempty"`
	// Queryset filter matching the applicable source objects of the selected type
	SourceFilter map[string]interface{} `json:"source_filter,omitempty"`
	DestinationType *string `json:"destination_type,omitempty"`
	// Label for related source objects, as displayed on the destination object.
	DestinationLabel *string `json:"destination_label,omitempty"`
	// Hide this relationship on the destination object.
	DestinationHidden *bool `json:"destination_hidden,omitempty"`
	// Queryset filter matching the applicable destination objects of the selected type
	DestinationFilter map[string]interface{} `json:"destination_filter,omitempty"`
}

// NewPatchedRelationship instantiates a new PatchedRelationship object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedRelationship() *PatchedRelationship {
	this := PatchedRelationship{}
	return &this
}

// NewPatchedRelationshipWithDefaults instantiates a new PatchedRelationship object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedRelationshipWithDefaults() *PatchedRelationship {
	this := PatchedRelationship{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedRelationship) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedRelationship) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedRelationship) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedRelationship) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedRelationship) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedRelationship) SetUrl(v string) {
	o.Url = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedRelationship) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedRelationship) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedRelationship) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *PatchedRelationship) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *PatchedRelationship) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *PatchedRelationship) SetSlug(v string) {
	o.Slug = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedRelationship) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedRelationship) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedRelationship) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedRelationship) GetType() RelationshipTypeChoices {
	if o == nil || o.Type.Get() == nil {
		var ret RelationshipTypeChoices
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedRelationship) GetTypeOk() (*RelationshipTypeChoices, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *PatchedRelationship) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableRelationshipTypeChoices and assigns it to the Type field.
func (o *PatchedRelationship) SetType(v RelationshipTypeChoices) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *PatchedRelationship) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *PatchedRelationship) UnsetType() {
	o.Type.Unset()
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *PatchedRelationship) GetSourceType() string {
	if o == nil || o.SourceType == nil {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetSourceTypeOk() (*string, bool) {
	if o == nil || o.SourceType == nil {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *PatchedRelationship) HasSourceType() bool {
	if o != nil && o.SourceType != nil {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *PatchedRelationship) SetSourceType(v string) {
	o.SourceType = &v
}

// GetSourceLabel returns the SourceLabel field value if set, zero value otherwise.
func (o *PatchedRelationship) GetSourceLabel() string {
	if o == nil || o.SourceLabel == nil {
		var ret string
		return ret
	}
	return *o.SourceLabel
}

// GetSourceLabelOk returns a tuple with the SourceLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetSourceLabelOk() (*string, bool) {
	if o == nil || o.SourceLabel == nil {
		return nil, false
	}
	return o.SourceLabel, true
}

// HasSourceLabel returns a boolean if a field has been set.
func (o *PatchedRelationship) HasSourceLabel() bool {
	if o != nil && o.SourceLabel != nil {
		return true
	}

	return false
}

// SetSourceLabel gets a reference to the given string and assigns it to the SourceLabel field.
func (o *PatchedRelationship) SetSourceLabel(v string) {
	o.SourceLabel = &v
}

// GetSourceHidden returns the SourceHidden field value if set, zero value otherwise.
func (o *PatchedRelationship) GetSourceHidden() bool {
	if o == nil || o.SourceHidden == nil {
		var ret bool
		return ret
	}
	return *o.SourceHidden
}

// GetSourceHiddenOk returns a tuple with the SourceHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetSourceHiddenOk() (*bool, bool) {
	if o == nil || o.SourceHidden == nil {
		return nil, false
	}
	return o.SourceHidden, true
}

// HasSourceHidden returns a boolean if a field has been set.
func (o *PatchedRelationship) HasSourceHidden() bool {
	if o != nil && o.SourceHidden != nil {
		return true
	}

	return false
}

// SetSourceHidden gets a reference to the given bool and assigns it to the SourceHidden field.
func (o *PatchedRelationship) SetSourceHidden(v bool) {
	o.SourceHidden = &v
}

// GetSourceFilter returns the SourceFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedRelationship) GetSourceFilter() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SourceFilter
}

// GetSourceFilterOk returns a tuple with the SourceFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedRelationship) GetSourceFilterOk() (map[string]interface{}, bool) {
	if o == nil || o.SourceFilter == nil {
		return nil, false
	}
	return o.SourceFilter, true
}

// HasSourceFilter returns a boolean if a field has been set.
func (o *PatchedRelationship) HasSourceFilter() bool {
	if o != nil && o.SourceFilter != nil {
		return true
	}

	return false
}

// SetSourceFilter gets a reference to the given map[string]interface{} and assigns it to the SourceFilter field.
func (o *PatchedRelationship) SetSourceFilter(v map[string]interface{}) {
	o.SourceFilter = v
}

// GetDestinationType returns the DestinationType field value if set, zero value otherwise.
func (o *PatchedRelationship) GetDestinationType() string {
	if o == nil || o.DestinationType == nil {
		var ret string
		return ret
	}
	return *o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetDestinationTypeOk() (*string, bool) {
	if o == nil || o.DestinationType == nil {
		return nil, false
	}
	return o.DestinationType, true
}

// HasDestinationType returns a boolean if a field has been set.
func (o *PatchedRelationship) HasDestinationType() bool {
	if o != nil && o.DestinationType != nil {
		return true
	}

	return false
}

// SetDestinationType gets a reference to the given string and assigns it to the DestinationType field.
func (o *PatchedRelationship) SetDestinationType(v string) {
	o.DestinationType = &v
}

// GetDestinationLabel returns the DestinationLabel field value if set, zero value otherwise.
func (o *PatchedRelationship) GetDestinationLabel() string {
	if o == nil || o.DestinationLabel == nil {
		var ret string
		return ret
	}
	return *o.DestinationLabel
}

// GetDestinationLabelOk returns a tuple with the DestinationLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetDestinationLabelOk() (*string, bool) {
	if o == nil || o.DestinationLabel == nil {
		return nil, false
	}
	return o.DestinationLabel, true
}

// HasDestinationLabel returns a boolean if a field has been set.
func (o *PatchedRelationship) HasDestinationLabel() bool {
	if o != nil && o.DestinationLabel != nil {
		return true
	}

	return false
}

// SetDestinationLabel gets a reference to the given string and assigns it to the DestinationLabel field.
func (o *PatchedRelationship) SetDestinationLabel(v string) {
	o.DestinationLabel = &v
}

// GetDestinationHidden returns the DestinationHidden field value if set, zero value otherwise.
func (o *PatchedRelationship) GetDestinationHidden() bool {
	if o == nil || o.DestinationHidden == nil {
		var ret bool
		return ret
	}
	return *o.DestinationHidden
}

// GetDestinationHiddenOk returns a tuple with the DestinationHidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRelationship) GetDestinationHiddenOk() (*bool, bool) {
	if o == nil || o.DestinationHidden == nil {
		return nil, false
	}
	return o.DestinationHidden, true
}

// HasDestinationHidden returns a boolean if a field has been set.
func (o *PatchedRelationship) HasDestinationHidden() bool {
	if o != nil && o.DestinationHidden != nil {
		return true
	}

	return false
}

// SetDestinationHidden gets a reference to the given bool and assigns it to the DestinationHidden field.
func (o *PatchedRelationship) SetDestinationHidden(v bool) {
	o.DestinationHidden = &v
}

// GetDestinationFilter returns the DestinationFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedRelationship) GetDestinationFilter() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.DestinationFilter
}

// GetDestinationFilterOk returns a tuple with the DestinationFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedRelationship) GetDestinationFilterOk() (map[string]interface{}, bool) {
	if o == nil || o.DestinationFilter == nil {
		return nil, false
	}
	return o.DestinationFilter, true
}

// HasDestinationFilter returns a boolean if a field has been set.
func (o *PatchedRelationship) HasDestinationFilter() bool {
	if o != nil && o.DestinationFilter != nil {
		return true
	}

	return false
}

// SetDestinationFilter gets a reference to the given map[string]interface{} and assigns it to the DestinationFilter field.
func (o *PatchedRelationship) SetDestinationFilter(v map[string]interface{}) {
	o.DestinationFilter = v
}

func (o PatchedRelationship) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.SourceType != nil {
		toSerialize["source_type"] = o.SourceType
	}
	if o.SourceLabel != nil {
		toSerialize["source_label"] = o.SourceLabel
	}
	if o.SourceHidden != nil {
		toSerialize["source_hidden"] = o.SourceHidden
	}
	if o.SourceFilter != nil {
		toSerialize["source_filter"] = o.SourceFilter
	}
	if o.DestinationType != nil {
		toSerialize["destination_type"] = o.DestinationType
	}
	if o.DestinationLabel != nil {
		toSerialize["destination_label"] = o.DestinationLabel
	}
	if o.DestinationHidden != nil {
		toSerialize["destination_hidden"] = o.DestinationHidden
	}
	if o.DestinationFilter != nil {
		toSerialize["destination_filter"] = o.DestinationFilter
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedRelationship struct {
	value *PatchedRelationship
	isSet bool
}

func (v NullablePatchedRelationship) Get() *PatchedRelationship {
	return v.value
}

func (v *NullablePatchedRelationship) Set(val *PatchedRelationship) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedRelationship) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedRelationship) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedRelationship(val *PatchedRelationship) *NullablePatchedRelationship {
	return &NullablePatchedRelationship{value: val, isSet: true}
}

func (v NullablePatchedRelationship) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedRelationship) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


