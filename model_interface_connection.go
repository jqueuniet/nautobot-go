/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InterfaceConnection Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type InterfaceConnection struct {
	InterfaceA InterfaceConnectionInterfaceA `json:"interface_a"`
	InterfaceB NestedInterface `json:"interface_b"`
	ConnectedEndpointReachable NullableBool `json:"connected_endpoint_reachable"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewInterfaceConnection instantiates a new InterfaceConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceConnection(interfaceA InterfaceConnectionInterfaceA, interfaceB NestedInterface, connectedEndpointReachable NullableBool, display string) *InterfaceConnection {
	this := InterfaceConnection{}
	this.InterfaceA = interfaceA
	this.InterfaceB = interfaceB
	this.ConnectedEndpointReachable = connectedEndpointReachable
	this.Display = display
	return &this
}

// NewInterfaceConnectionWithDefaults instantiates a new InterfaceConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceConnectionWithDefaults() *InterfaceConnection {
	this := InterfaceConnection{}
	return &this
}

// GetInterfaceA returns the InterfaceA field value
func (o *InterfaceConnection) GetInterfaceA() InterfaceConnectionInterfaceA {
	if o == nil {
		var ret InterfaceConnectionInterfaceA
		return ret
	}

	return o.InterfaceA
}

// GetInterfaceAOk returns a tuple with the InterfaceA field value
// and a boolean to check if the value has been set.
func (o *InterfaceConnection) GetInterfaceAOk() (*InterfaceConnectionInterfaceA, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceA, true
}

// SetInterfaceA sets field value
func (o *InterfaceConnection) SetInterfaceA(v InterfaceConnectionInterfaceA) {
	o.InterfaceA = v
}

// GetInterfaceB returns the InterfaceB field value
func (o *InterfaceConnection) GetInterfaceB() NestedInterface {
	if o == nil {
		var ret NestedInterface
		return ret
	}

	return o.InterfaceB
}

// GetInterfaceBOk returns a tuple with the InterfaceB field value
// and a boolean to check if the value has been set.
func (o *InterfaceConnection) GetInterfaceBOk() (*NestedInterface, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterfaceB, true
}

// SetInterfaceB sets field value
func (o *InterfaceConnection) SetInterfaceB(v NestedInterface) {
	o.InterfaceB = v
}

// GetConnectedEndpointReachable returns the ConnectedEndpointReachable field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *InterfaceConnection) GetConnectedEndpointReachable() bool {
	if o == nil || o.ConnectedEndpointReachable.Get() == nil {
		var ret bool
		return ret
	}

	return *o.ConnectedEndpointReachable.Get()
}

// GetConnectedEndpointReachableOk returns a tuple with the ConnectedEndpointReachable field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceConnection) GetConnectedEndpointReachableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectedEndpointReachable.Get(), o.ConnectedEndpointReachable.IsSet()
}

// SetConnectedEndpointReachable sets field value
func (o *InterfaceConnection) SetConnectedEndpointReachable(v bool) {
	o.ConnectedEndpointReachable.Set(&v)
}

// GetDisplay returns the Display field value
func (o *InterfaceConnection) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *InterfaceConnection) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *InterfaceConnection) SetDisplay(v string) {
	o.Display = v
}

func (o InterfaceConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["interface_a"] = o.InterfaceA
	}
	if true {
		toSerialize["interface_b"] = o.InterfaceB
	}
	if true {
		toSerialize["connected_endpoint_reachable"] = o.ConnectedEndpointReachable.Get()
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableInterfaceConnection struct {
	value *InterfaceConnection
	isSet bool
}

func (v NullableInterfaceConnection) Get() *InterfaceConnection {
	return v.value
}

func (v *NullableInterfaceConnection) Set(val *InterfaceConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceConnection(val *InterfaceConnection) *NullableInterfaceConnection {
	return &NullableInterfaceConnection{value: val, isSet: true}
}

func (v NullableInterfaceConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


