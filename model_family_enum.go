/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FamilyEnum the model 'FamilyEnum'
type FamilyEnum int32

// List of FamilyEnum
const (
	_4 FamilyEnum = 4
	_6 FamilyEnum = 6
)

// All allowed values of FamilyEnum enum
var AllowedFamilyEnumEnumValues = []FamilyEnum{
	4,
	6,
}

func (v *FamilyEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FamilyEnum(value)
	for _, existing := range AllowedFamilyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FamilyEnum", value)
}

// NewFamilyEnumFromValue returns a pointer to a valid FamilyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFamilyEnumFromValue(v int32) (*FamilyEnum, error) {
	ev := FamilyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FamilyEnum: valid values are %v", v, AllowedFamilyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FamilyEnum) IsValid() bool {
	for _, existing := range AllowedFamilyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FamilyEnum value
func (v FamilyEnum) Ptr() *FamilyEnum {
	return &v
}

type NullableFamilyEnum struct {
	value *FamilyEnum
	isSet bool
}

func (v NullableFamilyEnum) Get() *FamilyEnum {
	return v.value
}

func (v *NullableFamilyEnum) Set(val *FamilyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFamilyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFamilyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFamilyEnum(val *FamilyEnum) *NullableFamilyEnum {
	return &NullableFamilyEnum{value: val, isSet: true}
}

func (v NullableFamilyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFamilyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

