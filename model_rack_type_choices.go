/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RackTypeChoices the model 'RackTypeChoices'
type RackTypeChoices string

// List of RackTypeChoices
const (
	_2_POST_FRAME RackTypeChoices = "2-post-frame"
	_4_POST_FRAME RackTypeChoices = "4-post-frame"
	_4_POST_CABINET RackTypeChoices = "4-post-cabinet"
	WALL_FRAME RackTypeChoices = "wall-frame"
	WALL_CABINET RackTypeChoices = "wall-cabinet"
)

// All allowed values of RackTypeChoices enum
var AllowedRackTypeChoicesEnumValues = []RackTypeChoices{
	"2-post-frame",
	"4-post-frame",
	"4-post-cabinet",
	"wall-frame",
	"wall-cabinet",
}

func (v *RackTypeChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RackTypeChoices(value)
	for _, existing := range AllowedRackTypeChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RackTypeChoices", value)
}

// NewRackTypeChoicesFromValue returns a pointer to a valid RackTypeChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRackTypeChoicesFromValue(v string) (*RackTypeChoices, error) {
	ev := RackTypeChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RackTypeChoices: valid values are %v", v, AllowedRackTypeChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RackTypeChoices) IsValid() bool {
	for _, existing := range AllowedRackTypeChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RackTypeChoices value
func (v RackTypeChoices) Ptr() *RackTypeChoices {
	return &v
}

type NullableRackTypeChoices struct {
	value *RackTypeChoices
	isSet bool
}

func (v NullableRackTypeChoices) Get() *RackTypeChoices {
	return v.value
}

func (v *NullableRackTypeChoices) Set(val *RackTypeChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableRackTypeChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableRackTypeChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRackTypeChoices(val *RackTypeChoices) *NullableRackTypeChoices {
	return &NullableRackTypeChoices{value: val, isSet: true}
}

func (v NullableRackTypeChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRackTypeChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

