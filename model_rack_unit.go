/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RackUnit A rack unit is an abstraction formed by the set (rack, position, face); it does not exist as a row in the database.
type RackUnit struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Face RackUnitFace `json:"face"`
	Device DeviceParentDevice `json:"device"`
	Occupied bool `json:"occupied"`
}

// NewRackUnit instantiates a new RackUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRackUnit(id int32, name string, face RackUnitFace, device DeviceParentDevice, occupied bool) *RackUnit {
	this := RackUnit{}
	this.Id = id
	this.Name = name
	this.Face = face
	this.Device = device
	this.Occupied = occupied
	return &this
}

// NewRackUnitWithDefaults instantiates a new RackUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRackUnitWithDefaults() *RackUnit {
	this := RackUnit{}
	return &this
}

// GetId returns the Id field value
func (o *RackUnit) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RackUnit) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RackUnit) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RackUnit) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RackUnit) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RackUnit) SetName(v string) {
	o.Name = v
}

// GetFace returns the Face field value
func (o *RackUnit) GetFace() RackUnitFace {
	if o == nil {
		var ret RackUnitFace
		return ret
	}

	return o.Face
}

// GetFaceOk returns a tuple with the Face field value
// and a boolean to check if the value has been set.
func (o *RackUnit) GetFaceOk() (*RackUnitFace, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Face, true
}

// SetFace sets field value
func (o *RackUnit) SetFace(v RackUnitFace) {
	o.Face = v
}

// GetDevice returns the Device field value
func (o *RackUnit) GetDevice() DeviceParentDevice {
	if o == nil {
		var ret DeviceParentDevice
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *RackUnit) GetDeviceOk() (*DeviceParentDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *RackUnit) SetDevice(v DeviceParentDevice) {
	o.Device = v
}

// GetOccupied returns the Occupied field value
func (o *RackUnit) GetOccupied() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Occupied
}

// GetOccupiedOk returns a tuple with the Occupied field value
// and a boolean to check if the value has been set.
func (o *RackUnit) GetOccupiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Occupied, true
}

// SetOccupied sets field value
func (o *RackUnit) SetOccupied(v bool) {
	o.Occupied = v
}

func (o RackUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["face"] = o.Face
	}
	if true {
		toSerialize["device"] = o.Device
	}
	if true {
		toSerialize["occupied"] = o.Occupied
	}
	return json.Marshal(toSerialize)
}

type NullableRackUnit struct {
	value *RackUnit
	isSet bool
}

func (v NullableRackUnit) Get() *RackUnit {
	return v.value
}

func (v *NullableRackUnit) Set(val *RackUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableRackUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableRackUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRackUnit(val *RackUnit) *NullableRackUnit {
	return &NullableRackUnit{value: val, isSet: true}
}

func (v NullableRackUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRackUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


