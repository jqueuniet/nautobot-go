/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// WritableIPAddress Mixin to add `status` choice field to model serializers.
type WritableIPAddress struct {
	Id string `json:"id"`
	Url string `json:"url"`
	Family NullableFamilyEnum `json:"family"`
	Address string `json:"address"`
	Vrf NullableString `json:"vrf,omitempty"`
	Tenant NullableString `json:"tenant,omitempty"`
	Status WritableIPAddressStatusEnum `json:"status"`
	Role *PatchedWritableIPAddressRole `json:"role,omitempty"`
	AssignedObjectType NullableString `json:"assigned_object_type,omitempty"`
	AssignedObjectId NullableString `json:"assigned_object_id,omitempty"`
	AssignedObject map[string]interface{} `json:"assigned_object"`
	// The IP Addresses for which this address is the \"outside\" IP
	NatInside NullableString `json:"nat_inside,omitempty"`
	NatOutside []NestedIPAddress `json:"nat_outside"`
	// Hostname or FQDN (not case-sensitive)
	DnsName *string `json:"dns_name,omitempty"`
	Description *string `json:"description,omitempty"`
	Tags []TagSerializerField `json:"tags,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Created string `json:"created"`
	LastUpdated time.Time `json:"last_updated"`
	ComputedFields map[string]interface{} `json:"computed_fields"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewWritableIPAddress instantiates a new WritableIPAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritableIPAddress(id string, url string, family NullableFamilyEnum, address string, status WritableIPAddressStatusEnum, assignedObject map[string]interface{}, natOutside []NestedIPAddress, created string, lastUpdated time.Time, computedFields map[string]interface{}, display string) *WritableIPAddress {
	this := WritableIPAddress{}
	this.Id = id
	this.Url = url
	this.Family = family
	this.Address = address
	this.Status = status
	this.AssignedObject = assignedObject
	this.NatOutside = natOutside
	this.Created = created
	this.LastUpdated = lastUpdated
	this.ComputedFields = computedFields
	this.Display = display
	return &this
}

// NewWritableIPAddressWithDefaults instantiates a new WritableIPAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritableIPAddressWithDefaults() *WritableIPAddress {
	this := WritableIPAddress{}
	return &this
}

// GetId returns the Id field value
func (o *WritableIPAddress) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WritableIPAddress) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *WritableIPAddress) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *WritableIPAddress) SetUrl(v string) {
	o.Url = v
}

// GetFamily returns the Family field value
// If the value is explicit nil, the zero value for FamilyEnum will be returned
func (o *WritableIPAddress) GetFamily() FamilyEnum {
	if o == nil || o.Family.Get() == nil {
		var ret FamilyEnum
		return ret
	}

	return *o.Family.Get()
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetFamilyOk() (*FamilyEnum, bool) {
	if o == nil {
		return nil, false
	}
	return o.Family.Get(), o.Family.IsSet()
}

// SetFamily sets field value
func (o *WritableIPAddress) SetFamily(v FamilyEnum) {
	o.Family.Set(&v)
}

// GetAddress returns the Address field value
func (o *WritableIPAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *WritableIPAddress) SetAddress(v string) {
	o.Address = v
}

// GetVrf returns the Vrf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableIPAddress) GetVrf() string {
	if o == nil || o.Vrf.Get() == nil {
		var ret string
		return ret
	}
	return *o.Vrf.Get()
}

// GetVrfOk returns a tuple with the Vrf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetVrfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vrf.Get(), o.Vrf.IsSet()
}

// HasVrf returns a boolean if a field has been set.
func (o *WritableIPAddress) HasVrf() bool {
	if o != nil && o.Vrf.IsSet() {
		return true
	}

	return false
}

// SetVrf gets a reference to the given NullableString and assigns it to the Vrf field.
func (o *WritableIPAddress) SetVrf(v string) {
	o.Vrf.Set(&v)
}
// SetVrfNil sets the value for Vrf to be an explicit nil
func (o *WritableIPAddress) SetVrfNil() {
	o.Vrf.Set(nil)
}

// UnsetVrf ensures that no value is present for Vrf, not even an explicit nil
func (o *WritableIPAddress) UnsetVrf() {
	o.Vrf.Unset()
}

// GetTenant returns the Tenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableIPAddress) GetTenant() string {
	if o == nil || o.Tenant.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetTenantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// HasTenant returns a boolean if a field has been set.
func (o *WritableIPAddress) HasTenant() bool {
	if o != nil && o.Tenant.IsSet() {
		return true
	}

	return false
}

// SetTenant gets a reference to the given NullableString and assigns it to the Tenant field.
func (o *WritableIPAddress) SetTenant(v string) {
	o.Tenant.Set(&v)
}
// SetTenantNil sets the value for Tenant to be an explicit nil
func (o *WritableIPAddress) SetTenantNil() {
	o.Tenant.Set(nil)
}

// UnsetTenant ensures that no value is present for Tenant, not even an explicit nil
func (o *WritableIPAddress) UnsetTenant() {
	o.Tenant.Unset()
}

// GetStatus returns the Status field value
func (o *WritableIPAddress) GetStatus() WritableIPAddressStatusEnum {
	if o == nil {
		var ret WritableIPAddressStatusEnum
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetStatusOk() (*WritableIPAddressStatusEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *WritableIPAddress) SetStatus(v WritableIPAddressStatusEnum) {
	o.Status = v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *WritableIPAddress) GetRole() PatchedWritableIPAddressRole {
	if o == nil || o.Role == nil {
		var ret PatchedWritableIPAddressRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetRoleOk() (*PatchedWritableIPAddressRole, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *WritableIPAddress) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given PatchedWritableIPAddressRole and assigns it to the Role field.
func (o *WritableIPAddress) SetRole(v PatchedWritableIPAddressRole) {
	o.Role = &v
}

// GetAssignedObjectType returns the AssignedObjectType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableIPAddress) GetAssignedObjectType() string {
	if o == nil || o.AssignedObjectType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssignedObjectType.Get()
}

// GetAssignedObjectTypeOk returns a tuple with the AssignedObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetAssignedObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedObjectType.Get(), o.AssignedObjectType.IsSet()
}

// HasAssignedObjectType returns a boolean if a field has been set.
func (o *WritableIPAddress) HasAssignedObjectType() bool {
	if o != nil && o.AssignedObjectType.IsSet() {
		return true
	}

	return false
}

// SetAssignedObjectType gets a reference to the given NullableString and assigns it to the AssignedObjectType field.
func (o *WritableIPAddress) SetAssignedObjectType(v string) {
	o.AssignedObjectType.Set(&v)
}
// SetAssignedObjectTypeNil sets the value for AssignedObjectType to be an explicit nil
func (o *WritableIPAddress) SetAssignedObjectTypeNil() {
	o.AssignedObjectType.Set(nil)
}

// UnsetAssignedObjectType ensures that no value is present for AssignedObjectType, not even an explicit nil
func (o *WritableIPAddress) UnsetAssignedObjectType() {
	o.AssignedObjectType.Unset()
}

// GetAssignedObjectId returns the AssignedObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableIPAddress) GetAssignedObjectId() string {
	if o == nil || o.AssignedObjectId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssignedObjectId.Get()
}

// GetAssignedObjectIdOk returns a tuple with the AssignedObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetAssignedObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssignedObjectId.Get(), o.AssignedObjectId.IsSet()
}

// HasAssignedObjectId returns a boolean if a field has been set.
func (o *WritableIPAddress) HasAssignedObjectId() bool {
	if o != nil && o.AssignedObjectId.IsSet() {
		return true
	}

	return false
}

// SetAssignedObjectId gets a reference to the given NullableString and assigns it to the AssignedObjectId field.
func (o *WritableIPAddress) SetAssignedObjectId(v string) {
	o.AssignedObjectId.Set(&v)
}
// SetAssignedObjectIdNil sets the value for AssignedObjectId to be an explicit nil
func (o *WritableIPAddress) SetAssignedObjectIdNil() {
	o.AssignedObjectId.Set(nil)
}

// UnsetAssignedObjectId ensures that no value is present for AssignedObjectId, not even an explicit nil
func (o *WritableIPAddress) UnsetAssignedObjectId() {
	o.AssignedObjectId.Unset()
}

// GetAssignedObject returns the AssignedObject field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *WritableIPAddress) GetAssignedObject() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.AssignedObject
}

// GetAssignedObjectOk returns a tuple with the AssignedObject field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetAssignedObjectOk() (map[string]interface{}, bool) {
	if o == nil || o.AssignedObject == nil {
		return nil, false
	}
	return o.AssignedObject, true
}

// SetAssignedObject sets field value
func (o *WritableIPAddress) SetAssignedObject(v map[string]interface{}) {
	o.AssignedObject = v
}

// GetNatInside returns the NatInside field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WritableIPAddress) GetNatInside() string {
	if o == nil || o.NatInside.Get() == nil {
		var ret string
		return ret
	}
	return *o.NatInside.Get()
}

// GetNatInsideOk returns a tuple with the NatInside field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WritableIPAddress) GetNatInsideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NatInside.Get(), o.NatInside.IsSet()
}

// HasNatInside returns a boolean if a field has been set.
func (o *WritableIPAddress) HasNatInside() bool {
	if o != nil && o.NatInside.IsSet() {
		return true
	}

	return false
}

// SetNatInside gets a reference to the given NullableString and assigns it to the NatInside field.
func (o *WritableIPAddress) SetNatInside(v string) {
	o.NatInside.Set(&v)
}
// SetNatInsideNil sets the value for NatInside to be an explicit nil
func (o *WritableIPAddress) SetNatInsideNil() {
	o.NatInside.Set(nil)
}

// UnsetNatInside ensures that no value is present for NatInside, not even an explicit nil
func (o *WritableIPAddress) UnsetNatInside() {
	o.NatInside.Unset()
}

// GetNatOutside returns the NatOutside field value
func (o *WritableIPAddress) GetNatOutside() []NestedIPAddress {
	if o == nil {
		var ret []NestedIPAddress
		return ret
	}

	return o.NatOutside
}

// GetNatOutsideOk returns a tuple with the NatOutside field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetNatOutsideOk() ([]NestedIPAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.NatOutside, true
}

// SetNatOutside sets field value
func (o *WritableIPAddress) SetNatOutside(v []NestedIPAddress) {
	o.NatOutside = v
}

// GetDnsName returns the DnsName field value if set, zero value otherwise.
func (o *WritableIPAddress) GetDnsName() string {
	if o == nil || o.DnsName == nil {
		var ret string
		return ret
	}
	return *o.DnsName
}

// GetDnsNameOk returns a tuple with the DnsName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetDnsNameOk() (*string, bool) {
	if o == nil || o.DnsName == nil {
		return nil, false
	}
	return o.DnsName, true
}

// HasDnsName returns a boolean if a field has been set.
func (o *WritableIPAddress) HasDnsName() bool {
	if o != nil && o.DnsName != nil {
		return true
	}

	return false
}

// SetDnsName gets a reference to the given string and assigns it to the DnsName field.
func (o *WritableIPAddress) SetDnsName(v string) {
	o.DnsName = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *WritableIPAddress) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *WritableIPAddress) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *WritableIPAddress) SetDescription(v string) {
	o.Description = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *WritableIPAddress) GetTags() []TagSerializerField {
	if o == nil || o.Tags == nil {
		var ret []TagSerializerField
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetTagsOk() ([]TagSerializerField, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *WritableIPAddress) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagSerializerField and assigns it to the Tags field.
func (o *WritableIPAddress) SetTags(v []TagSerializerField) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *WritableIPAddress) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *WritableIPAddress) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *WritableIPAddress) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetCreated returns the Created field value
func (o *WritableIPAddress) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *WritableIPAddress) SetCreated(v string) {
	o.Created = v
}

// GetLastUpdated returns the LastUpdated field value
func (o *WritableIPAddress) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *WritableIPAddress) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

// GetComputedFields returns the ComputedFields field value
func (o *WritableIPAddress) GetComputedFields() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ComputedFields
}

// GetComputedFieldsOk returns a tuple with the ComputedFields field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetComputedFieldsOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComputedFields, true
}

// SetComputedFields sets field value
func (o *WritableIPAddress) SetComputedFields(v map[string]interface{}) {
	o.ComputedFields = v
}

// GetDisplay returns the Display field value
func (o *WritableIPAddress) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *WritableIPAddress) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *WritableIPAddress) SetDisplay(v string) {
	o.Display = v
}

func (o WritableIPAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["family"] = o.Family.Get()
	}
	if true {
		toSerialize["address"] = o.Address
	}
	if o.Vrf.IsSet() {
		toSerialize["vrf"] = o.Vrf.Get()
	}
	if o.Tenant.IsSet() {
		toSerialize["tenant"] = o.Tenant.Get()
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.AssignedObjectType.IsSet() {
		toSerialize["assigned_object_type"] = o.AssignedObjectType.Get()
	}
	if o.AssignedObjectId.IsSet() {
		toSerialize["assigned_object_id"] = o.AssignedObjectId.Get()
	}
	if o.AssignedObject != nil {
		toSerialize["assigned_object"] = o.AssignedObject
	}
	if o.NatInside.IsSet() {
		toSerialize["nat_inside"] = o.NatInside.Get()
	}
	if true {
		toSerialize["nat_outside"] = o.NatOutside
	}
	if o.DnsName != nil {
		toSerialize["dns_name"] = o.DnsName
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if true {
		toSerialize["computed_fields"] = o.ComputedFields
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableWritableIPAddress struct {
	value *WritableIPAddress
	isSet bool
}

func (v NullableWritableIPAddress) Get() *WritableIPAddress {
	return v.value
}

func (v *NullableWritableIPAddress) Set(val *WritableIPAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableIPAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableIPAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableIPAddress(val *WritableIPAddress) *NullableWritableIPAddress {
	return &NullableWritableIPAddress{value: val, isSet: true}
}

func (v NullableWritableIPAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableIPAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


