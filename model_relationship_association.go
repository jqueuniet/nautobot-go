/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RelationshipAssociation Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type RelationshipAssociation struct {
	Id string `json:"id"`
	Relationship NestedRelationship `json:"relationship"`
	SourceType string `json:"source_type"`
	SourceId string `json:"source_id"`
	DestinationType string `json:"destination_type"`
	DestinationId string `json:"destination_id"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewRelationshipAssociation instantiates a new RelationshipAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelationshipAssociation(id string, relationship NestedRelationship, sourceType string, sourceId string, destinationType string, destinationId string, display string) *RelationshipAssociation {
	this := RelationshipAssociation{}
	this.Id = id
	this.Relationship = relationship
	this.SourceType = sourceType
	this.SourceId = sourceId
	this.DestinationType = destinationType
	this.DestinationId = destinationId
	this.Display = display
	return &this
}

// NewRelationshipAssociationWithDefaults instantiates a new RelationshipAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelationshipAssociationWithDefaults() *RelationshipAssociation {
	this := RelationshipAssociation{}
	return &this
}

// GetId returns the Id field value
func (o *RelationshipAssociation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelationshipAssociation) SetId(v string) {
	o.Id = v
}

// GetRelationship returns the Relationship field value
func (o *RelationshipAssociation) GetRelationship() NestedRelationship {
	if o == nil {
		var ret NestedRelationship
		return ret
	}

	return o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetRelationshipOk() (*NestedRelationship, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Relationship, true
}

// SetRelationship sets field value
func (o *RelationshipAssociation) SetRelationship(v NestedRelationship) {
	o.Relationship = v
}

// GetSourceType returns the SourceType field value
func (o *RelationshipAssociation) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *RelationshipAssociation) SetSourceType(v string) {
	o.SourceType = v
}

// GetSourceId returns the SourceId field value
func (o *RelationshipAssociation) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *RelationshipAssociation) SetSourceId(v string) {
	o.SourceId = v
}

// GetDestinationType returns the DestinationType field value
func (o *RelationshipAssociation) GetDestinationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetDestinationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationType, true
}

// SetDestinationType sets field value
func (o *RelationshipAssociation) SetDestinationType(v string) {
	o.DestinationType = v
}

// GetDestinationId returns the DestinationId field value
func (o *RelationshipAssociation) GetDestinationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetDestinationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DestinationId, true
}

// SetDestinationId sets field value
func (o *RelationshipAssociation) SetDestinationId(v string) {
	o.DestinationId = v
}

// GetDisplay returns the Display field value
func (o *RelationshipAssociation) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *RelationshipAssociation) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *RelationshipAssociation) SetDisplay(v string) {
	o.Display = v
}

func (o RelationshipAssociation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["relationship"] = o.Relationship
	}
	if true {
		toSerialize["source_type"] = o.SourceType
	}
	if true {
		toSerialize["source_id"] = o.SourceId
	}
	if true {
		toSerialize["destination_type"] = o.DestinationType
	}
	if true {
		toSerialize["destination_id"] = o.DestinationId
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableRelationshipAssociation struct {
	value *RelationshipAssociation
	isSet bool
}

func (v NullableRelationshipAssociation) Get() *RelationshipAssociation {
	return v.value
}

func (v *NullableRelationshipAssociation) Set(val *RelationshipAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationshipAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationshipAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationshipAssociation(val *RelationshipAssociation) *NullableRelationshipAssociation {
	return &NullableRelationshipAssociation{value: val, isSet: true}
}

func (v NullableRelationshipAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationshipAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


