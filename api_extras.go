/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// ExtrasApiService ExtrasApi service
type ExtrasApiService service

type ApiExtrasComputedFieldsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasComputedFieldsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsBulkDestroyExecute(r)
}

/*
ExtrasComputedFieldsBulkDestroy Method for ExtrasComputedFieldsBulkDestroy

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsBulkDestroy(ctx context.Context) ApiExtrasComputedFieldsBulkDestroyRequest {
	return ApiExtrasComputedFieldsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasComputedFieldsBulkDestroyExecute(r ApiExtrasComputedFieldsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedComputedField *PatchedComputedField
}

func (r ApiExtrasComputedFieldsBulkPartialUpdateRequest) PatchedComputedField(patchedComputedField PatchedComputedField) ApiExtrasComputedFieldsBulkPartialUpdateRequest {
	r.patchedComputedField = &patchedComputedField
	return r
}

func (r ApiExtrasComputedFieldsBulkPartialUpdateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsBulkPartialUpdateExecute(r)
}

/*
ExtrasComputedFieldsBulkPartialUpdate Method for ExtrasComputedFieldsBulkPartialUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsBulkPartialUpdate(ctx context.Context) ApiExtrasComputedFieldsBulkPartialUpdateRequest {
	return ApiExtrasComputedFieldsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasApiService) ExtrasComputedFieldsBulkPartialUpdateExecute(r ApiExtrasComputedFieldsBulkPartialUpdateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedComputedField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	computedField *ComputedField
}

func (r ApiExtrasComputedFieldsBulkUpdateRequest) ComputedField(computedField ComputedField) ApiExtrasComputedFieldsBulkUpdateRequest {
	r.computedField = &computedField
	return r
}

func (r ApiExtrasComputedFieldsBulkUpdateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsBulkUpdateExecute(r)
}

/*
ExtrasComputedFieldsBulkUpdate Method for ExtrasComputedFieldsBulkUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsBulkUpdate(ctx context.Context) ApiExtrasComputedFieldsBulkUpdateRequest {
	return ApiExtrasComputedFieldsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasApiService) ExtrasComputedFieldsBulkUpdateExecute(r ApiExtrasComputedFieldsBulkUpdateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computedField == nil {
		return localVarReturnValue, nil, reportError("computedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computedField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	computedField *ComputedField
}

func (r ApiExtrasComputedFieldsCreateRequest) ComputedField(computedField ComputedField) ApiExtrasComputedFieldsCreateRequest {
	r.computedField = &computedField
	return r
}

func (r ApiExtrasComputedFieldsCreateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsCreateExecute(r)
}

/*
ExtrasComputedFieldsCreate Method for ExtrasComputedFieldsCreate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsCreateRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsCreate(ctx context.Context) ApiExtrasComputedFieldsCreateRequest {
	return ApiExtrasComputedFieldsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasApiService) ExtrasComputedFieldsCreateExecute(r ApiExtrasComputedFieldsCreateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computedField == nil {
		return localVarReturnValue, nil, reportError("computedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computedField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasComputedFieldsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsDestroyExecute(r)
}

/*
ExtrasComputedFieldsDestroy Method for ExtrasComputedFieldsDestroy

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsDestroy(ctx context.Context, id string) ApiExtrasComputedFieldsDestroyRequest {
	return ApiExtrasComputedFieldsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasComputedFieldsDestroyExecute(r ApiExtrasComputedFieldsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	contentType *string
	contentTypeN *string
	fallbackValue *[]string
	fallbackValueIc *[]string
	fallbackValueIe *[]string
	fallbackValueIew *[]string
	fallbackValueIre *[]string
	fallbackValueIsw *[]string
	fallbackValueN *[]string
	fallbackValueNic *[]string
	fallbackValueNie *[]string
	fallbackValueNiew *[]string
	fallbackValueNire *[]string
	fallbackValueNisw *[]string
	fallbackValueNre *[]string
	fallbackValueRe *[]string
	limit *int32
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	template *[]string
	templateIc *[]string
	templateIe *[]string
	templateIew *[]string
	templateIre *[]string
	templateIsw *[]string
	templateN *[]string
	templateNic *[]string
	templateNie *[]string
	templateNiew *[]string
	templateNire *[]string
	templateNisw *[]string
	templateNre *[]string
	templateRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
}

func (r ApiExtrasComputedFieldsListRequest) ContentType(contentType string) ApiExtrasComputedFieldsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasComputedFieldsListRequest) ContentTypeN(contentTypeN string) ApiExtrasComputedFieldsListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValue(fallbackValue []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValue = &fallbackValue
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIc(fallbackValueIc []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIc = &fallbackValueIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIe(fallbackValueIe []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIe = &fallbackValueIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIew(fallbackValueIew []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIew = &fallbackValueIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIre(fallbackValueIre []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIre = &fallbackValueIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueIsw(fallbackValueIsw []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueIsw = &fallbackValueIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueN(fallbackValueN []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueN = &fallbackValueN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNic(fallbackValueNic []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNic = &fallbackValueNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNie(fallbackValueNie []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNie = &fallbackValueNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNiew(fallbackValueNiew []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNiew = &fallbackValueNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNire(fallbackValueNire []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNire = &fallbackValueNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNisw(fallbackValueNisw []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNisw = &fallbackValueNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueNre(fallbackValueNre []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueNre = &fallbackValueNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) FallbackValueRe(fallbackValueRe []string) ApiExtrasComputedFieldsListRequest {
	r.fallbackValueRe = &fallbackValueRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasComputedFieldsListRequest) Limit(limit int32) ApiExtrasComputedFieldsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasComputedFieldsListRequest) Offset(offset int32) ApiExtrasComputedFieldsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasComputedFieldsListRequest) Q(q string) ApiExtrasComputedFieldsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Slug(slug []string) ApiExtrasComputedFieldsListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugIc(slugIc []string) ApiExtrasComputedFieldsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugIe(slugIe []string) ApiExtrasComputedFieldsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugIew(slugIew []string) ApiExtrasComputedFieldsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugIre(slugIre []string) ApiExtrasComputedFieldsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugIsw(slugIsw []string) ApiExtrasComputedFieldsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugN(slugN []string) ApiExtrasComputedFieldsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugNic(slugNic []string) ApiExtrasComputedFieldsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugNie(slugNie []string) ApiExtrasComputedFieldsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugNiew(slugNiew []string) ApiExtrasComputedFieldsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugNire(slugNire []string) ApiExtrasComputedFieldsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugNisw(slugNisw []string) ApiExtrasComputedFieldsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugNre(slugNre []string) ApiExtrasComputedFieldsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) SlugRe(slugRe []string) ApiExtrasComputedFieldsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Template(template []string) ApiExtrasComputedFieldsListRequest {
	r.template = &template
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIc(templateIc []string) ApiExtrasComputedFieldsListRequest {
	r.templateIc = &templateIc
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIe(templateIe []string) ApiExtrasComputedFieldsListRequest {
	r.templateIe = &templateIe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIew(templateIew []string) ApiExtrasComputedFieldsListRequest {
	r.templateIew = &templateIew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIre(templateIre []string) ApiExtrasComputedFieldsListRequest {
	r.templateIre = &templateIre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateIsw(templateIsw []string) ApiExtrasComputedFieldsListRequest {
	r.templateIsw = &templateIsw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateN(templateN []string) ApiExtrasComputedFieldsListRequest {
	r.templateN = &templateN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNic(templateNic []string) ApiExtrasComputedFieldsListRequest {
	r.templateNic = &templateNic
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNie(templateNie []string) ApiExtrasComputedFieldsListRequest {
	r.templateNie = &templateNie
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNiew(templateNiew []string) ApiExtrasComputedFieldsListRequest {
	r.templateNiew = &templateNiew
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNire(templateNire []string) ApiExtrasComputedFieldsListRequest {
	r.templateNire = &templateNire
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNisw(templateNisw []string) ApiExtrasComputedFieldsListRequest {
	r.templateNisw = &templateNisw
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateNre(templateNre []string) ApiExtrasComputedFieldsListRequest {
	r.templateNre = &templateNre
	return r
}

func (r ApiExtrasComputedFieldsListRequest) TemplateRe(templateRe []string) ApiExtrasComputedFieldsListRequest {
	r.templateRe = &templateRe
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Weight(weight []int32) ApiExtrasComputedFieldsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightGt(weightGt []int32) ApiExtrasComputedFieldsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightGte(weightGte []int32) ApiExtrasComputedFieldsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightLt(weightLt []int32) ApiExtrasComputedFieldsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightLte(weightLte []int32) ApiExtrasComputedFieldsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasComputedFieldsListRequest) WeightN(weightN []int32) ApiExtrasComputedFieldsListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasComputedFieldsListRequest) Execute() (*PaginatedComputedFieldList, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsListExecute(r)
}

/*
ExtrasComputedFieldsList Method for ExtrasComputedFieldsList

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasComputedFieldsListRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsList(ctx context.Context) ApiExtrasComputedFieldsListRequest {
	return ApiExtrasComputedFieldsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedComputedFieldList
func (a *ExtrasApiService) ExtrasComputedFieldsListExecute(r ApiExtrasComputedFieldsListRequest) (*PaginatedComputedFieldList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedComputedFieldList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentType != nil {
		localVarQueryParams.Add("content_type", parameterToString(*r.contentType, ""))
	}
	if r.contentTypeN != nil {
		localVarQueryParams.Add("content_type__n", parameterToString(*r.contentTypeN, ""))
	}
	if r.fallbackValue != nil {
		t := *r.fallbackValue
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueIc != nil {
		t := *r.fallbackValueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__ic", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueIe != nil {
		t := *r.fallbackValueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__ie", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueIew != nil {
		t := *r.fallbackValueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__iew", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueIre != nil {
		t := *r.fallbackValueIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__ire", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueIsw != nil {
		t := *r.fallbackValueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__isw", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueN != nil {
		t := *r.fallbackValueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__n", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueNic != nil {
		t := *r.fallbackValueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__nic", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueNie != nil {
		t := *r.fallbackValueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__nie", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueNiew != nil {
		t := *r.fallbackValueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__niew", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueNire != nil {
		t := *r.fallbackValueNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__nire", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueNisw != nil {
		t := *r.fallbackValueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__nisw", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueNre != nil {
		t := *r.fallbackValueNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__nre", parameterToString(t, "multi"))
		}
	}
	if r.fallbackValueRe != nil {
		t := *r.fallbackValueRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("fallback_value__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("fallback_value__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	if r.template != nil {
		t := *r.template
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template", parameterToString(t, "multi"))
		}
	}
	if r.templateIc != nil {
		t := *r.templateIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__ic", parameterToString(t, "multi"))
		}
	}
	if r.templateIe != nil {
		t := *r.templateIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__ie", parameterToString(t, "multi"))
		}
	}
	if r.templateIew != nil {
		t := *r.templateIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__iew", parameterToString(t, "multi"))
		}
	}
	if r.templateIre != nil {
		t := *r.templateIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__ire", parameterToString(t, "multi"))
		}
	}
	if r.templateIsw != nil {
		t := *r.templateIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__isw", parameterToString(t, "multi"))
		}
	}
	if r.templateN != nil {
		t := *r.templateN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__n", parameterToString(t, "multi"))
		}
	}
	if r.templateNic != nil {
		t := *r.templateNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__nic", parameterToString(t, "multi"))
		}
	}
	if r.templateNie != nil {
		t := *r.templateNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__nie", parameterToString(t, "multi"))
		}
	}
	if r.templateNiew != nil {
		t := *r.templateNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__niew", parameterToString(t, "multi"))
		}
	}
	if r.templateNire != nil {
		t := *r.templateNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__nire", parameterToString(t, "multi"))
		}
	}
	if r.templateNisw != nil {
		t := *r.templateNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__nisw", parameterToString(t, "multi"))
		}
	}
	if r.templateNre != nil {
		t := *r.templateNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__nre", parameterToString(t, "multi"))
		}
	}
	if r.templateRe != nil {
		t := *r.templateRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("template__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("template__re", parameterToString(t, "multi"))
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight", parameterToString(t, "multi"))
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gt", parameterToString(t, "multi"))
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gte", parameterToString(t, "multi"))
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lt", parameterToString(t, "multi"))
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lte", parameterToString(t, "multi"))
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedComputedField *PatchedComputedField
}

func (r ApiExtrasComputedFieldsPartialUpdateRequest) PatchedComputedField(patchedComputedField PatchedComputedField) ApiExtrasComputedFieldsPartialUpdateRequest {
	r.patchedComputedField = &patchedComputedField
	return r
}

func (r ApiExtrasComputedFieldsPartialUpdateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsPartialUpdateExecute(r)
}

/*
ExtrasComputedFieldsPartialUpdate Method for ExtrasComputedFieldsPartialUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsPartialUpdate(ctx context.Context, id string) ApiExtrasComputedFieldsPartialUpdateRequest {
	return ApiExtrasComputedFieldsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasApiService) ExtrasComputedFieldsPartialUpdateExecute(r ApiExtrasComputedFieldsPartialUpdateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedComputedField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasComputedFieldsRetrieveRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsRetrieveExecute(r)
}

/*
ExtrasComputedFieldsRetrieve Method for ExtrasComputedFieldsRetrieve

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsRetrieve(ctx context.Context, id string) ApiExtrasComputedFieldsRetrieveRequest {
	return ApiExtrasComputedFieldsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasApiService) ExtrasComputedFieldsRetrieveExecute(r ApiExtrasComputedFieldsRetrieveRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasComputedFieldsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	computedField *ComputedField
}

func (r ApiExtrasComputedFieldsUpdateRequest) ComputedField(computedField ComputedField) ApiExtrasComputedFieldsUpdateRequest {
	r.computedField = &computedField
	return r
}

func (r ApiExtrasComputedFieldsUpdateRequest) Execute() (*ComputedField, *http.Response, error) {
	return r.ApiService.ExtrasComputedFieldsUpdateExecute(r)
}

/*
ExtrasComputedFieldsUpdate Method for ExtrasComputedFieldsUpdate

Manage Computed Fields through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this computed field.
 @return ApiExtrasComputedFieldsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasComputedFieldsUpdate(ctx context.Context, id string) ApiExtrasComputedFieldsUpdateRequest {
	return ApiExtrasComputedFieldsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ComputedField
func (a *ExtrasApiService) ExtrasComputedFieldsUpdateExecute(r ApiExtrasComputedFieldsUpdateRequest) (*ComputedField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ComputedField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasComputedFieldsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/computed-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.computedField == nil {
		return localVarReturnValue, nil, reportError("computedField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.computedField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasConfigContextSchemasBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasBulkDestroyExecute(r)
}

/*
ExtrasConfigContextSchemasBulkDestroy Method for ExtrasConfigContextSchemasBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasBulkDestroy(ctx context.Context) ApiExtrasConfigContextSchemasBulkDestroyRequest {
	return ApiExtrasConfigContextSchemasBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasConfigContextSchemasBulkDestroyExecute(r ApiExtrasConfigContextSchemasBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedConfigContextSchema *PatchedConfigContextSchema
}

func (r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) PatchedConfigContextSchema(patchedConfigContextSchema PatchedConfigContextSchema) ApiExtrasConfigContextSchemasBulkPartialUpdateRequest {
	r.patchedConfigContextSchema = &patchedConfigContextSchema
	return r
}

func (r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasBulkPartialUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasBulkPartialUpdate Method for ExtrasConfigContextSchemasBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasBulkPartialUpdate(ctx context.Context) ApiExtrasConfigContextSchemasBulkPartialUpdateRequest {
	return ApiExtrasConfigContextSchemasBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasApiService) ExtrasConfigContextSchemasBulkPartialUpdateExecute(r ApiExtrasConfigContextSchemasBulkPartialUpdateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedConfigContextSchema
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	configContextSchema *ConfigContextSchema
}

func (r ApiExtrasConfigContextSchemasBulkUpdateRequest) ConfigContextSchema(configContextSchema ConfigContextSchema) ApiExtrasConfigContextSchemasBulkUpdateRequest {
	r.configContextSchema = &configContextSchema
	return r
}

func (r ApiExtrasConfigContextSchemasBulkUpdateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasBulkUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasBulkUpdate Method for ExtrasConfigContextSchemasBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasBulkUpdate(ctx context.Context) ApiExtrasConfigContextSchemasBulkUpdateRequest {
	return ApiExtrasConfigContextSchemasBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasApiService) ExtrasConfigContextSchemasBulkUpdateExecute(r ApiExtrasConfigContextSchemasBulkUpdateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextSchema == nil {
		return localVarReturnValue, nil, reportError("configContextSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextSchema
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	configContextSchema *ConfigContextSchema
}

func (r ApiExtrasConfigContextSchemasCreateRequest) ConfigContextSchema(configContextSchema ConfigContextSchema) ApiExtrasConfigContextSchemasCreateRequest {
	r.configContextSchema = &configContextSchema
	return r
}

func (r ApiExtrasConfigContextSchemasCreateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasCreateExecute(r)
}

/*
ExtrasConfigContextSchemasCreate Method for ExtrasConfigContextSchemasCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasCreateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasCreate(ctx context.Context) ApiExtrasConfigContextSchemasCreateRequest {
	return ApiExtrasConfigContextSchemasCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasApiService) ExtrasConfigContextSchemasCreateExecute(r ApiExtrasConfigContextSchemasCreateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextSchema == nil {
		return localVarReturnValue, nil, reportError("configContextSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextSchema
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasConfigContextSchemasDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasDestroyExecute(r)
}

/*
ExtrasConfigContextSchemasDestroy Method for ExtrasConfigContextSchemasDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasDestroyRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasDestroy(ctx context.Context, id string) ApiExtrasConfigContextSchemasDestroyRequest {
	return ApiExtrasConfigContextSchemasDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasConfigContextSchemasDestroyExecute(r ApiExtrasConfigContextSchemasDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	ownerContentType *string
	ownerContentTypeN *string
	q *string
}

func (r ApiExtrasConfigContextSchemasListRequest) Description(description []string) ApiExtrasConfigContextSchemasListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIc(descriptionIc []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIe(descriptionIe []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIew(descriptionIew []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIre(descriptionIre []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionN(descriptionN []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNic(descriptionNic []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNie(descriptionNie []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNire(descriptionNire []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionNre(descriptionNre []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) DescriptionRe(descriptionRe []string) ApiExtrasConfigContextSchemasListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Id(id []string) ApiExtrasConfigContextSchemasListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIc(idIc []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIe(idIe []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIew(idIew []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIre(idIre []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdIsw(idIsw []string) ApiExtrasConfigContextSchemasListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdN(idN []string) ApiExtrasConfigContextSchemasListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNic(idNic []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNie(idNie []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNiew(idNiew []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNire(idNire []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNisw(idNisw []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdNre(idNre []string) ApiExtrasConfigContextSchemasListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) IdRe(idRe []string) ApiExtrasConfigContextSchemasListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextSchemasListRequest) Limit(limit int32) ApiExtrasConfigContextSchemasListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Name(name []string) ApiExtrasConfigContextSchemasListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIc(nameIc []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIe(nameIe []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIew(nameIew []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIre(nameIre []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameIsw(nameIsw []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameN(nameN []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNic(nameNic []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNie(nameNie []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNiew(nameNiew []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNire(nameNire []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNisw(nameNisw []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameNre(nameNre []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) NameRe(nameRe []string) ApiExtrasConfigContextSchemasListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextSchemasListRequest) Offset(offset int32) ApiExtrasConfigContextSchemasListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) OwnerContentType(ownerContentType string) ApiExtrasConfigContextSchemasListRequest {
	r.ownerContentType = &ownerContentType
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) OwnerContentTypeN(ownerContentTypeN string) ApiExtrasConfigContextSchemasListRequest {
	r.ownerContentTypeN = &ownerContentTypeN
	return r
}

// Search
func (r ApiExtrasConfigContextSchemasListRequest) Q(q string) ApiExtrasConfigContextSchemasListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasConfigContextSchemasListRequest) Execute() (*PaginatedConfigContextSchemaList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasListExecute(r)
}

/*
ExtrasConfigContextSchemasList Method for ExtrasConfigContextSchemasList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextSchemasListRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasList(ctx context.Context) ApiExtrasConfigContextSchemasListRequest {
	return ApiExtrasConfigContextSchemasListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConfigContextSchemaList
func (a *ExtrasApiService) ExtrasConfigContextSchemasListExecute(r ApiExtrasConfigContextSchemasListRequest) (*PaginatedConfigContextSchemaList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConfigContextSchemaList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ownerContentType != nil {
		localVarQueryParams.Add("owner_content_type", parameterToString(*r.ownerContentType, ""))
	}
	if r.ownerContentTypeN != nil {
		localVarQueryParams.Add("owner_content_type__n", parameterToString(*r.ownerContentTypeN, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedConfigContextSchema *PatchedConfigContextSchema
}

func (r ApiExtrasConfigContextSchemasPartialUpdateRequest) PatchedConfigContextSchema(patchedConfigContextSchema PatchedConfigContextSchema) ApiExtrasConfigContextSchemasPartialUpdateRequest {
	r.patchedConfigContextSchema = &patchedConfigContextSchema
	return r
}

func (r ApiExtrasConfigContextSchemasPartialUpdateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasPartialUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasPartialUpdate Method for ExtrasConfigContextSchemasPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasPartialUpdate(ctx context.Context, id string) ApiExtrasConfigContextSchemasPartialUpdateRequest {
	return ApiExtrasConfigContextSchemasPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasApiService) ExtrasConfigContextSchemasPartialUpdateExecute(r ApiExtrasConfigContextSchemasPartialUpdateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedConfigContextSchema
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasConfigContextSchemasRetrieveRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasRetrieveExecute(r)
}

/*
ExtrasConfigContextSchemasRetrieve Method for ExtrasConfigContextSchemasRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasRetrieve(ctx context.Context, id string) ApiExtrasConfigContextSchemasRetrieveRequest {
	return ApiExtrasConfigContextSchemasRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasApiService) ExtrasConfigContextSchemasRetrieveExecute(r ApiExtrasConfigContextSchemasRetrieveRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextSchemasUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	configContextSchema *ConfigContextSchema
}

func (r ApiExtrasConfigContextSchemasUpdateRequest) ConfigContextSchema(configContextSchema ConfigContextSchema) ApiExtrasConfigContextSchemasUpdateRequest {
	r.configContextSchema = &configContextSchema
	return r
}

func (r ApiExtrasConfigContextSchemasUpdateRequest) Execute() (*ConfigContextSchema, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextSchemasUpdateExecute(r)
}

/*
ExtrasConfigContextSchemasUpdate Method for ExtrasConfigContextSchemasUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context schema.
 @return ApiExtrasConfigContextSchemasUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextSchemasUpdate(ctx context.Context, id string) ApiExtrasConfigContextSchemasUpdateRequest {
	return ApiExtrasConfigContextSchemasUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContextSchema
func (a *ExtrasApiService) ExtrasConfigContextSchemasUpdateExecute(r ApiExtrasConfigContextSchemasUpdateRequest) (*ConfigContextSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContextSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextSchemasUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-context-schemas/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.configContextSchema == nil {
		return localVarReturnValue, nil, reportError("configContextSchema is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.configContextSchema
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasConfigContextsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkDestroyExecute(r)
}

/*
ExtrasConfigContextsBulkDestroy Method for ExtrasConfigContextsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsBulkDestroy(ctx context.Context) ApiExtrasConfigContextsBulkDestroyRequest {
	return ApiExtrasConfigContextsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasConfigContextsBulkDestroyExecute(r ApiExtrasConfigContextsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWritableConfigContext *PatchedWritableConfigContext
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) PatchedWritableConfigContext(patchedWritableConfigContext PatchedWritableConfigContext) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	r.patchedWritableConfigContext = &patchedWritableConfigContext
	return r
}

func (r ApiExtrasConfigContextsBulkPartialUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkPartialUpdateExecute(r)
}

/*
ExtrasConfigContextsBulkPartialUpdate Method for ExtrasConfigContextsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsBulkPartialUpdate(ctx context.Context) ApiExtrasConfigContextsBulkPartialUpdateRequest {
	return ApiExtrasConfigContextsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasApiService) ExtrasConfigContextsBulkPartialUpdateExecute(r ApiExtrasConfigContextsBulkPartialUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableConfigContext *WritableConfigContext
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) WritableConfigContext(writableConfigContext WritableConfigContext) ApiExtrasConfigContextsBulkUpdateRequest {
	r.writableConfigContext = &writableConfigContext
	return r
}

func (r ApiExtrasConfigContextsBulkUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsBulkUpdateExecute(r)
}

/*
ExtrasConfigContextsBulkUpdate Method for ExtrasConfigContextsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsBulkUpdate(ctx context.Context) ApiExtrasConfigContextsBulkUpdateRequest {
	return ApiExtrasConfigContextsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasApiService) ExtrasConfigContextsBulkUpdateExecute(r ApiExtrasConfigContextsBulkUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableConfigContext *WritableConfigContext
}

func (r ApiExtrasConfigContextsCreateRequest) WritableConfigContext(writableConfigContext WritableConfigContext) ApiExtrasConfigContextsCreateRequest {
	r.writableConfigContext = &writableConfigContext
	return r
}

func (r ApiExtrasConfigContextsCreateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsCreateExecute(r)
}

/*
ExtrasConfigContextsCreate Method for ExtrasConfigContextsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsCreateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsCreate(ctx context.Context) ApiExtrasConfigContextsCreateRequest {
	return ApiExtrasConfigContextsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasApiService) ExtrasConfigContextsCreateExecute(r ApiExtrasConfigContextsCreateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasConfigContextsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasConfigContextsDestroyExecute(r)
}

/*
ExtrasConfigContextsDestroy Method for ExtrasConfigContextsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsDestroy(ctx context.Context, id string) ApiExtrasConfigContextsDestroyRequest {
	return ApiExtrasConfigContextsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasConfigContextsDestroyExecute(r ApiExtrasConfigContextsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	clusterGroup *[]string
	clusterGroupN *[]string
	clusterGroupId *[]string
	clusterGroupIdN *[]string
	clusterId *[]string
	clusterIdN *[]string
	deviceType *[]string
	deviceTypeN *[]string
	deviceTypeId *[]string
	deviceTypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	isActive *bool
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	ownerContentType *string
	ownerContentTypeN *string
	ownerObjectId *[]string
	ownerObjectIdIc *[]string
	ownerObjectIdIe *[]string
	ownerObjectIdIew *[]string
	ownerObjectIdIre *[]string
	ownerObjectIdIsw *[]string
	ownerObjectIdN *[]string
	ownerObjectIdNic *[]string
	ownerObjectIdNie *[]string
	ownerObjectIdNiew *[]string
	ownerObjectIdNire *[]string
	ownerObjectIdNisw *[]string
	ownerObjectIdNre *[]string
	ownerObjectIdRe *[]string
	platform *[]string
	platformN *[]string
	platformId *[]string
	platformIdN *[]string
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	role *[]string
	roleN *[]string
	roleId *[]string
	roleIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]string
	tenantIdN *[]string
}

// Cluster group (slug)
func (r ApiExtrasConfigContextsListRequest) ClusterGroup(clusterGroup []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

// Cluster group (slug)
func (r ApiExtrasConfigContextsListRequest) ClusterGroupN(clusterGroupN []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Cluster group
func (r ApiExtrasConfigContextsListRequest) ClusterGroupId(clusterGroupId []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

// Cluster group
func (r ApiExtrasConfigContextsListRequest) ClusterGroupIdN(clusterGroupIdN []string) ApiExtrasConfigContextsListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

// Cluster
func (r ApiExtrasConfigContextsListRequest) ClusterId(clusterId []string) ApiExtrasConfigContextsListRequest {
	r.clusterId = &clusterId
	return r
}

// Cluster
func (r ApiExtrasConfigContextsListRequest) ClusterIdN(clusterIdN []string) ApiExtrasConfigContextsListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

// Device Type (slug)
func (r ApiExtrasConfigContextsListRequest) DeviceType(deviceType []string) ApiExtrasConfigContextsListRequest {
	r.deviceType = &deviceType
	return r
}

// Device Type (slug)
func (r ApiExtrasConfigContextsListRequest) DeviceTypeN(deviceTypeN []string) ApiExtrasConfigContextsListRequest {
	r.deviceTypeN = &deviceTypeN
	return r
}

// Device Type
func (r ApiExtrasConfigContextsListRequest) DeviceTypeId(deviceTypeId []string) ApiExtrasConfigContextsListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device Type
func (r ApiExtrasConfigContextsListRequest) DeviceTypeIdN(deviceTypeIdN []string) ApiExtrasConfigContextsListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Id(id []string) ApiExtrasConfigContextsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIc(idIc []string) ApiExtrasConfigContextsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIe(idIe []string) ApiExtrasConfigContextsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIew(idIew []string) ApiExtrasConfigContextsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIre(idIre []string) ApiExtrasConfigContextsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdIsw(idIsw []string) ApiExtrasConfigContextsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdN(idN []string) ApiExtrasConfigContextsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNic(idNic []string) ApiExtrasConfigContextsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNie(idNie []string) ApiExtrasConfigContextsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNiew(idNiew []string) ApiExtrasConfigContextsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNire(idNire []string) ApiExtrasConfigContextsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNisw(idNisw []string) ApiExtrasConfigContextsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdNre(idNre []string) ApiExtrasConfigContextsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasConfigContextsListRequest) IdRe(idRe []string) ApiExtrasConfigContextsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasConfigContextsListRequest) IsActive(isActive bool) ApiExtrasConfigContextsListRequest {
	r.isActive = &isActive
	return r
}

// Number of results to return per page.
func (r ApiExtrasConfigContextsListRequest) Limit(limit int32) ApiExtrasConfigContextsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasConfigContextsListRequest) Name(name []string) ApiExtrasConfigContextsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIc(nameIc []string) ApiExtrasConfigContextsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIe(nameIe []string) ApiExtrasConfigContextsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIew(nameIew []string) ApiExtrasConfigContextsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIre(nameIre []string) ApiExtrasConfigContextsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameIsw(nameIsw []string) ApiExtrasConfigContextsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameN(nameN []string) ApiExtrasConfigContextsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNic(nameNic []string) ApiExtrasConfigContextsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNie(nameNie []string) ApiExtrasConfigContextsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNiew(nameNiew []string) ApiExtrasConfigContextsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNire(nameNire []string) ApiExtrasConfigContextsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNisw(nameNisw []string) ApiExtrasConfigContextsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameNre(nameNre []string) ApiExtrasConfigContextsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasConfigContextsListRequest) NameRe(nameRe []string) ApiExtrasConfigContextsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasConfigContextsListRequest) Offset(offset int32) ApiExtrasConfigContextsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerContentType(ownerContentType string) ApiExtrasConfigContextsListRequest {
	r.ownerContentType = &ownerContentType
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerContentTypeN(ownerContentTypeN string) ApiExtrasConfigContextsListRequest {
	r.ownerContentTypeN = &ownerContentTypeN
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectId(ownerObjectId []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectId = &ownerObjectId
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIc(ownerObjectIdIc []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIc = &ownerObjectIdIc
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIe(ownerObjectIdIe []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIe = &ownerObjectIdIe
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIew(ownerObjectIdIew []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIew = &ownerObjectIdIew
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIre(ownerObjectIdIre []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIre = &ownerObjectIdIre
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdIsw(ownerObjectIdIsw []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdIsw = &ownerObjectIdIsw
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdN(ownerObjectIdN []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdN = &ownerObjectIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNic(ownerObjectIdNic []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNic = &ownerObjectIdNic
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNie(ownerObjectIdNie []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNie = &ownerObjectIdNie
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNiew(ownerObjectIdNiew []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNiew = &ownerObjectIdNiew
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNire(ownerObjectIdNire []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNire = &ownerObjectIdNire
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNisw(ownerObjectIdNisw []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNisw = &ownerObjectIdNisw
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdNre(ownerObjectIdNre []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdNre = &ownerObjectIdNre
	return r
}

func (r ApiExtrasConfigContextsListRequest) OwnerObjectIdRe(ownerObjectIdRe []string) ApiExtrasConfigContextsListRequest {
	r.ownerObjectIdRe = &ownerObjectIdRe
	return r
}

// Platform (slug)
func (r ApiExtrasConfigContextsListRequest) Platform(platform []string) ApiExtrasConfigContextsListRequest {
	r.platform = &platform
	return r
}

// Platform (slug)
func (r ApiExtrasConfigContextsListRequest) PlatformN(platformN []string) ApiExtrasConfigContextsListRequest {
	r.platformN = &platformN
	return r
}

// Platform
func (r ApiExtrasConfigContextsListRequest) PlatformId(platformId []string) ApiExtrasConfigContextsListRequest {
	r.platformId = &platformId
	return r
}

// Platform
func (r ApiExtrasConfigContextsListRequest) PlatformIdN(platformIdN []string) ApiExtrasConfigContextsListRequest {
	r.platformIdN = &platformIdN
	return r
}

// Search
func (r ApiExtrasConfigContextsListRequest) Q(q string) ApiExtrasConfigContextsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiExtrasConfigContextsListRequest) Region(region []string) ApiExtrasConfigContextsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiExtrasConfigContextsListRequest) RegionN(regionN []string) ApiExtrasConfigContextsListRequest {
	r.regionN = &regionN
	return r
}

// Region
func (r ApiExtrasConfigContextsListRequest) RegionId(regionId []string) ApiExtrasConfigContextsListRequest {
	r.regionId = &regionId
	return r
}

// Region
func (r ApiExtrasConfigContextsListRequest) RegionIdN(regionIdN []string) ApiExtrasConfigContextsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiExtrasConfigContextsListRequest) Role(role []string) ApiExtrasConfigContextsListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiExtrasConfigContextsListRequest) RoleN(roleN []string) ApiExtrasConfigContextsListRequest {
	r.roleN = &roleN
	return r
}

// Role
func (r ApiExtrasConfigContextsListRequest) RoleId(roleId []string) ApiExtrasConfigContextsListRequest {
	r.roleId = &roleId
	return r
}

// Role
func (r ApiExtrasConfigContextsListRequest) RoleIdN(roleIdN []string) ApiExtrasConfigContextsListRequest {
	r.roleIdN = &roleIdN
	return r
}

// Site (slug)
func (r ApiExtrasConfigContextsListRequest) Site(site []string) ApiExtrasConfigContextsListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiExtrasConfigContextsListRequest) SiteN(siteN []string) ApiExtrasConfigContextsListRequest {
	r.siteN = &siteN
	return r
}

// Site
func (r ApiExtrasConfigContextsListRequest) SiteId(siteId []string) ApiExtrasConfigContextsListRequest {
	r.siteId = &siteId
	return r
}

// Site
func (r ApiExtrasConfigContextsListRequest) SiteIdN(siteIdN []string) ApiExtrasConfigContextsListRequest {
	r.siteIdN = &siteIdN
	return r
}

// Tag (slug)
func (r ApiExtrasConfigContextsListRequest) Tag(tag []string) ApiExtrasConfigContextsListRequest {
	r.tag = &tag
	return r
}

// Tag (slug)
func (r ApiExtrasConfigContextsListRequest) TagN(tagN []string) ApiExtrasConfigContextsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiExtrasConfigContextsListRequest) Tenant(tenant []string) ApiExtrasConfigContextsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiExtrasConfigContextsListRequest) TenantN(tenantN []string) ApiExtrasConfigContextsListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant group (slug)
func (r ApiExtrasConfigContextsListRequest) TenantGroup(tenantGroup []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant group (slug)
func (r ApiExtrasConfigContextsListRequest) TenantGroupN(tenantGroupN []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant group
func (r ApiExtrasConfigContextsListRequest) TenantGroupId(tenantGroupId []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant group
func (r ApiExtrasConfigContextsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiExtrasConfigContextsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant
func (r ApiExtrasConfigContextsListRequest) TenantId(tenantId []string) ApiExtrasConfigContextsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant
func (r ApiExtrasConfigContextsListRequest) TenantIdN(tenantIdN []string) ApiExtrasConfigContextsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiExtrasConfigContextsListRequest) Execute() (*PaginatedConfigContextList, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsListExecute(r)
}

/*
ExtrasConfigContextsList Method for ExtrasConfigContextsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasConfigContextsListRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsList(ctx context.Context) ApiExtrasConfigContextsListRequest {
	return ApiExtrasConfigContextsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConfigContextList
func (a *ExtrasApiService) ExtrasConfigContextsListExecute(r ApiExtrasConfigContextsListRequest) (*PaginatedConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group", parameterToString(t, "multi"))
		}
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceType != nil {
		t := *r.deviceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_type", parameterToString(t, "multi"))
		}
	}
	if r.deviceTypeN != nil {
		t := *r.deviceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_type__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_type_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_type_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_type_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_type_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.isActive != nil {
		localVarQueryParams.Add("is_active", parameterToString(*r.isActive, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ownerContentType != nil {
		localVarQueryParams.Add("owner_content_type", parameterToString(*r.ownerContentType, ""))
	}
	if r.ownerContentTypeN != nil {
		localVarQueryParams.Add("owner_content_type__n", parameterToString(*r.ownerContentTypeN, ""))
	}
	if r.ownerObjectId != nil {
		t := *r.ownerObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIc != nil {
		t := *r.ownerObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIe != nil {
		t := *r.ownerObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIew != nil {
		t := *r.ownerObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIre != nil {
		t := *r.ownerObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIsw != nil {
		t := *r.ownerObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdN != nil {
		t := *r.ownerObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__n", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNic != nil {
		t := *r.ownerObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNie != nil {
		t := *r.ownerObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNiew != nil {
		t := *r.ownerObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNire != nil {
		t := *r.ownerObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNisw != nil {
		t := *r.ownerObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNre != nil {
		t := *r.ownerObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdRe != nil {
		t := *r.ownerObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__re", parameterToString(t, "multi"))
		}
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform", parameterToString(t, "multi"))
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform__n", parameterToString(t, "multi"))
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform_id", parameterToString(t, "multi"))
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform_id__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role", parameterToString(t, "multi"))
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role__n", parameterToString(t, "multi"))
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id", parameterToString(t, "multi"))
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWritableConfigContext *PatchedWritableConfigContext
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) PatchedWritableConfigContext(patchedWritableConfigContext PatchedWritableConfigContext) ApiExtrasConfigContextsPartialUpdateRequest {
	r.patchedWritableConfigContext = &patchedWritableConfigContext
	return r
}

func (r ApiExtrasConfigContextsPartialUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsPartialUpdateExecute(r)
}

/*
ExtrasConfigContextsPartialUpdate Method for ExtrasConfigContextsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsPartialUpdate(ctx context.Context, id string) ApiExtrasConfigContextsPartialUpdateRequest {
	return ApiExtrasConfigContextsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasApiService) ExtrasConfigContextsPartialUpdateExecute(r ApiExtrasConfigContextsPartialUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasConfigContextsRetrieveRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsRetrieveExecute(r)
}

/*
ExtrasConfigContextsRetrieve Method for ExtrasConfigContextsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsRetrieve(ctx context.Context, id string) ApiExtrasConfigContextsRetrieveRequest {
	return ApiExtrasConfigContextsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasApiService) ExtrasConfigContextsRetrieveExecute(r ApiExtrasConfigContextsRetrieveRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasConfigContextsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	writableConfigContext *WritableConfigContext
}

func (r ApiExtrasConfigContextsUpdateRequest) WritableConfigContext(writableConfigContext WritableConfigContext) ApiExtrasConfigContextsUpdateRequest {
	r.writableConfigContext = &writableConfigContext
	return r
}

func (r ApiExtrasConfigContextsUpdateRequest) Execute() (*ConfigContext, *http.Response, error) {
	return r.ApiService.ExtrasConfigContextsUpdateExecute(r)
}

/*
ExtrasConfigContextsUpdate Method for ExtrasConfigContextsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this config context.
 @return ApiExtrasConfigContextsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasConfigContextsUpdate(ctx context.Context, id string) ApiExtrasConfigContextsUpdateRequest {
	return ApiExtrasConfigContextsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConfigContext
func (a *ExtrasApiService) ExtrasConfigContextsUpdateExecute(r ApiExtrasConfigContextsUpdateRequest) (*ConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasConfigContextsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/config-contexts/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContentTypesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	appLabel *string
	id *int32
	limit *int32
	model *string
	offset *int32
}

func (r ApiExtrasContentTypesListRequest) AppLabel(appLabel string) ApiExtrasContentTypesListRequest {
	r.appLabel = &appLabel
	return r
}

func (r ApiExtrasContentTypesListRequest) Id(id int32) ApiExtrasContentTypesListRequest {
	r.id = &id
	return r
}

// Number of results to return per page.
func (r ApiExtrasContentTypesListRequest) Limit(limit int32) ApiExtrasContentTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasContentTypesListRequest) Model(model string) ApiExtrasContentTypesListRequest {
	r.model = &model
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasContentTypesListRequest) Offset(offset int32) ApiExtrasContentTypesListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasContentTypesListRequest) Execute() (*PaginatedContentTypeList, *http.Response, error) {
	return r.ApiService.ExtrasContentTypesListExecute(r)
}

/*
ExtrasContentTypesList Method for ExtrasContentTypesList

Read-only list of ContentTypes. Limit results to ContentTypes pertinent to Nautobot objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasContentTypesListRequest
*/
func (a *ExtrasApiService) ExtrasContentTypesList(ctx context.Context) ApiExtrasContentTypesListRequest {
	return ApiExtrasContentTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedContentTypeList
func (a *ExtrasApiService) ExtrasContentTypesListExecute(r ApiExtrasContentTypesListRequest) (*PaginatedContentTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedContentTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasContentTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/content-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.appLabel != nil {
		localVarQueryParams.Add("app_label", parameterToString(*r.appLabel, ""))
	}
	if r.id != nil {
		localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.model != nil {
		localVarQueryParams.Add("model", parameterToString(*r.model, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasContentTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id int32
}

func (r ApiExtrasContentTypesRetrieveRequest) Execute() (*ContentType, *http.Response, error) {
	return r.ApiService.ExtrasContentTypesRetrieveExecute(r)
}

/*
ExtrasContentTypesRetrieve Method for ExtrasContentTypesRetrieve

Read-only list of ContentTypes. Limit results to ContentTypes pertinent to Nautobot objects.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this content type.
 @return ApiExtrasContentTypesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasContentTypesRetrieve(ctx context.Context, id int32) ApiExtrasContentTypesRetrieveRequest {
	return ApiExtrasContentTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ContentType
func (a *ExtrasApiService) ExtrasContentTypesRetrieveExecute(r ApiExtrasContentTypesRetrieveRequest) (*ContentType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasContentTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/content-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasCustomFieldChoicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesBulkDestroyExecute(r)
}

/*
ExtrasCustomFieldChoicesBulkDestroy Method for ExtrasCustomFieldChoicesBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesBulkDestroy(ctx context.Context) ApiExtrasCustomFieldChoicesBulkDestroyRequest {
	return ApiExtrasCustomFieldChoicesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasCustomFieldChoicesBulkDestroyExecute(r ApiExtrasCustomFieldChoicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWritableCustomFieldChoice *PatchedWritableCustomFieldChoice
}

func (r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) PatchedWritableCustomFieldChoice(patchedWritableCustomFieldChoice PatchedWritableCustomFieldChoice) ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest {
	r.patchedWritableCustomFieldChoice = &patchedWritableCustomFieldChoice
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesBulkPartialUpdate Method for ExtrasCustomFieldChoicesBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesBulkPartialUpdate(ctx context.Context) ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest {
	return ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasApiService) ExtrasCustomFieldChoicesBulkPartialUpdateExecute(r ApiExtrasCustomFieldChoicesBulkPartialUpdateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomFieldChoice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableCustomFieldChoice *WritableCustomFieldChoice
}

func (r ApiExtrasCustomFieldChoicesBulkUpdateRequest) WritableCustomFieldChoice(writableCustomFieldChoice WritableCustomFieldChoice) ApiExtrasCustomFieldChoicesBulkUpdateRequest {
	r.writableCustomFieldChoice = &writableCustomFieldChoice
	return r
}

func (r ApiExtrasCustomFieldChoicesBulkUpdateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesBulkUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesBulkUpdate Method for ExtrasCustomFieldChoicesBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesBulkUpdate(ctx context.Context) ApiExtrasCustomFieldChoicesBulkUpdateRequest {
	return ApiExtrasCustomFieldChoicesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasApiService) ExtrasCustomFieldChoicesBulkUpdateExecute(r ApiExtrasCustomFieldChoicesBulkUpdateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldChoice == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldChoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldChoice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableCustomFieldChoice *WritableCustomFieldChoice
}

func (r ApiExtrasCustomFieldChoicesCreateRequest) WritableCustomFieldChoice(writableCustomFieldChoice WritableCustomFieldChoice) ApiExtrasCustomFieldChoicesCreateRequest {
	r.writableCustomFieldChoice = &writableCustomFieldChoice
	return r
}

func (r ApiExtrasCustomFieldChoicesCreateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesCreateExecute(r)
}

/*
ExtrasCustomFieldChoicesCreate Method for ExtrasCustomFieldChoicesCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesCreateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesCreate(ctx context.Context) ApiExtrasCustomFieldChoicesCreateRequest {
	return ApiExtrasCustomFieldChoicesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasApiService) ExtrasCustomFieldChoicesCreateExecute(r ApiExtrasCustomFieldChoicesCreateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldChoice == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldChoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldChoice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasCustomFieldChoicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesDestroyExecute(r)
}

/*
ExtrasCustomFieldChoicesDestroy Method for ExtrasCustomFieldChoicesDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesDestroyRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesDestroy(ctx context.Context, id string) ApiExtrasCustomFieldChoicesDestroyRequest {
	return ApiExtrasCustomFieldChoicesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasCustomFieldChoicesDestroyExecute(r ApiExtrasCustomFieldChoicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	field *[]string
	fieldN *[]string
	fieldId *[]string
	fieldIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	q *string
	value *[]string
	valueIc *[]string
	valueIe *[]string
	valueIew *[]string
	valueIre *[]string
	valueIsw *[]string
	valueN *[]string
	valueNic *[]string
	valueNie *[]string
	valueNiew *[]string
	valueNire *[]string
	valueNisw *[]string
	valueNre *[]string
	valueRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
}

// Field (name)
func (r ApiExtrasCustomFieldChoicesListRequest) Field(field []string) ApiExtrasCustomFieldChoicesListRequest {
	r.field = &field
	return r
}

// Field (name)
func (r ApiExtrasCustomFieldChoicesListRequest) FieldN(fieldN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.fieldN = &fieldN
	return r
}

// Field
func (r ApiExtrasCustomFieldChoicesListRequest) FieldId(fieldId []string) ApiExtrasCustomFieldChoicesListRequest {
	r.fieldId = &fieldId
	return r
}

// Field
func (r ApiExtrasCustomFieldChoicesListRequest) FieldIdN(fieldIdN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.fieldIdN = &fieldIdN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Id(id []string) ApiExtrasCustomFieldChoicesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIc(idIc []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIe(idIe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIew(idIew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIre(idIre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdIsw(idIsw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdN(idN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNic(idNic []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNie(idNie []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNiew(idNiew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNire(idNire []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNisw(idNisw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdNre(idNre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) IdRe(idRe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldChoicesListRequest) Limit(limit int32) ApiExtrasCustomFieldChoicesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldChoicesListRequest) Offset(offset int32) ApiExtrasCustomFieldChoicesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasCustomFieldChoicesListRequest) Q(q string) ApiExtrasCustomFieldChoicesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Value(value []string) ApiExtrasCustomFieldChoicesListRequest {
	r.value = &value
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIc(valueIc []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIc = &valueIc
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIe(valueIe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIe = &valueIe
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIew(valueIew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIew = &valueIew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIre(valueIre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIre = &valueIre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueIsw(valueIsw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueIsw = &valueIsw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueN(valueN []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueN = &valueN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNic(valueNic []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNic = &valueNic
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNie(valueNie []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNie = &valueNie
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNiew(valueNiew []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNiew = &valueNiew
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNire(valueNire []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNire = &valueNire
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNisw(valueNisw []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNisw = &valueNisw
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueNre(valueNre []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueNre = &valueNre
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) ValueRe(valueRe []string) ApiExtrasCustomFieldChoicesListRequest {
	r.valueRe = &valueRe
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Weight(weight []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightGt(weightGt []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightGte(weightGte []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightLt(weightLt []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightLte(weightLte []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) WeightN(weightN []int32) ApiExtrasCustomFieldChoicesListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasCustomFieldChoicesListRequest) Execute() (*PaginatedCustomFieldChoiceList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesListExecute(r)
}

/*
ExtrasCustomFieldChoicesList Method for ExtrasCustomFieldChoicesList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldChoicesListRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesList(ctx context.Context) ApiExtrasCustomFieldChoicesListRequest {
	return ApiExtrasCustomFieldChoicesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCustomFieldChoiceList
func (a *ExtrasApiService) ExtrasCustomFieldChoicesListExecute(r ApiExtrasCustomFieldChoicesListRequest) (*PaginatedCustomFieldChoiceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCustomFieldChoiceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.field != nil {
		t := *r.field
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("field", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("field", parameterToString(t, "multi"))
		}
	}
	if r.fieldN != nil {
		t := *r.fieldN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("field__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("field__n", parameterToString(t, "multi"))
		}
	}
	if r.fieldId != nil {
		t := *r.fieldId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("field_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("field_id", parameterToString(t, "multi"))
		}
	}
	if r.fieldIdN != nil {
		t := *r.fieldIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("field_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("field_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.value != nil {
		t := *r.value
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value", parameterToString(t, "multi"))
		}
	}
	if r.valueIc != nil {
		t := *r.valueIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__ic", parameterToString(t, "multi"))
		}
	}
	if r.valueIe != nil {
		t := *r.valueIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__ie", parameterToString(t, "multi"))
		}
	}
	if r.valueIew != nil {
		t := *r.valueIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__iew", parameterToString(t, "multi"))
		}
	}
	if r.valueIre != nil {
		t := *r.valueIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__ire", parameterToString(t, "multi"))
		}
	}
	if r.valueIsw != nil {
		t := *r.valueIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__isw", parameterToString(t, "multi"))
		}
	}
	if r.valueN != nil {
		t := *r.valueN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__n", parameterToString(t, "multi"))
		}
	}
	if r.valueNic != nil {
		t := *r.valueNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__nic", parameterToString(t, "multi"))
		}
	}
	if r.valueNie != nil {
		t := *r.valueNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__nie", parameterToString(t, "multi"))
		}
	}
	if r.valueNiew != nil {
		t := *r.valueNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__niew", parameterToString(t, "multi"))
		}
	}
	if r.valueNire != nil {
		t := *r.valueNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__nire", parameterToString(t, "multi"))
		}
	}
	if r.valueNisw != nil {
		t := *r.valueNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__nisw", parameterToString(t, "multi"))
		}
	}
	if r.valueNre != nil {
		t := *r.valueNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__nre", parameterToString(t, "multi"))
		}
	}
	if r.valueRe != nil {
		t := *r.valueRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("value__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("value__re", parameterToString(t, "multi"))
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight", parameterToString(t, "multi"))
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gt", parameterToString(t, "multi"))
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gte", parameterToString(t, "multi"))
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lt", parameterToString(t, "multi"))
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lte", parameterToString(t, "multi"))
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWritableCustomFieldChoice *PatchedWritableCustomFieldChoice
}

func (r ApiExtrasCustomFieldChoicesPartialUpdateRequest) PatchedWritableCustomFieldChoice(patchedWritableCustomFieldChoice PatchedWritableCustomFieldChoice) ApiExtrasCustomFieldChoicesPartialUpdateRequest {
	r.patchedWritableCustomFieldChoice = &patchedWritableCustomFieldChoice
	return r
}

func (r ApiExtrasCustomFieldChoicesPartialUpdateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesPartialUpdate Method for ExtrasCustomFieldChoicesPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesPartialUpdate(ctx context.Context, id string) ApiExtrasCustomFieldChoicesPartialUpdateRequest {
	return ApiExtrasCustomFieldChoicesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasApiService) ExtrasCustomFieldChoicesPartialUpdateExecute(r ApiExtrasCustomFieldChoicesPartialUpdateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomFieldChoice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasCustomFieldChoicesRetrieveRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesRetrieveExecute(r)
}

/*
ExtrasCustomFieldChoicesRetrieve Method for ExtrasCustomFieldChoicesRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesRetrieve(ctx context.Context, id string) ApiExtrasCustomFieldChoicesRetrieveRequest {
	return ApiExtrasCustomFieldChoicesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasApiService) ExtrasCustomFieldChoicesRetrieveExecute(r ApiExtrasCustomFieldChoicesRetrieveRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldChoicesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	writableCustomFieldChoice *WritableCustomFieldChoice
}

func (r ApiExtrasCustomFieldChoicesUpdateRequest) WritableCustomFieldChoice(writableCustomFieldChoice WritableCustomFieldChoice) ApiExtrasCustomFieldChoicesUpdateRequest {
	r.writableCustomFieldChoice = &writableCustomFieldChoice
	return r
}

func (r ApiExtrasCustomFieldChoicesUpdateRequest) Execute() (*CustomFieldChoice, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldChoicesUpdateExecute(r)
}

/*
ExtrasCustomFieldChoicesUpdate Method for ExtrasCustomFieldChoicesUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field choice.
 @return ApiExtrasCustomFieldChoicesUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldChoicesUpdate(ctx context.Context, id string) ApiExtrasCustomFieldChoicesUpdateRequest {
	return ApiExtrasCustomFieldChoicesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomFieldChoice
func (a *ExtrasApiService) ExtrasCustomFieldChoicesUpdateExecute(r ApiExtrasCustomFieldChoicesUpdateRequest) (*CustomFieldChoice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomFieldChoice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldChoicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-field-choices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomFieldChoice == nil {
		return localVarReturnValue, nil, reportError("writableCustomFieldChoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomFieldChoice
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasCustomFieldsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkDestroyExecute(r)
}

/*
ExtrasCustomFieldsBulkDestroy Method for ExtrasCustomFieldsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsBulkDestroy(ctx context.Context) ApiExtrasCustomFieldsBulkDestroyRequest {
	return ApiExtrasCustomFieldsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasCustomFieldsBulkDestroyExecute(r ApiExtrasCustomFieldsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWritableCustomField *PatchedWritableCustomField
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) PatchedWritableCustomField(patchedWritableCustomField PatchedWritableCustomField) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	r.patchedWritableCustomField = &patchedWritableCustomField
	return r
}

func (r ApiExtrasCustomFieldsBulkPartialUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldsBulkPartialUpdate Method for ExtrasCustomFieldsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsBulkPartialUpdate(ctx context.Context) ApiExtrasCustomFieldsBulkPartialUpdateRequest {
	return ApiExtrasCustomFieldsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasApiService) ExtrasCustomFieldsBulkPartialUpdateExecute(r ApiExtrasCustomFieldsBulkPartialUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableCustomField *WritableCustomField
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) WritableCustomField(writableCustomField WritableCustomField) ApiExtrasCustomFieldsBulkUpdateRequest {
	r.writableCustomField = &writableCustomField
	return r
}

func (r ApiExtrasCustomFieldsBulkUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsBulkUpdateExecute(r)
}

/*
ExtrasCustomFieldsBulkUpdate Method for ExtrasCustomFieldsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsBulkUpdate(ctx context.Context) ApiExtrasCustomFieldsBulkUpdateRequest {
	return ApiExtrasCustomFieldsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasApiService) ExtrasCustomFieldsBulkUpdateExecute(r ApiExtrasCustomFieldsBulkUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomField == nil {
		return localVarReturnValue, nil, reportError("writableCustomField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableCustomField *WritableCustomField
}

func (r ApiExtrasCustomFieldsCreateRequest) WritableCustomField(writableCustomField WritableCustomField) ApiExtrasCustomFieldsCreateRequest {
	r.writableCustomField = &writableCustomField
	return r
}

func (r ApiExtrasCustomFieldsCreateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsCreateExecute(r)
}

/*
ExtrasCustomFieldsCreate Method for ExtrasCustomFieldsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsCreateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsCreate(ctx context.Context) ApiExtrasCustomFieldsCreateRequest {
	return ApiExtrasCustomFieldsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasApiService) ExtrasCustomFieldsCreateExecute(r ApiExtrasCustomFieldsCreateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomField == nil {
		return localVarReturnValue, nil, reportError("writableCustomField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasCustomFieldsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsDestroyExecute(r)
}

/*
ExtrasCustomFieldsDestroy Method for ExtrasCustomFieldsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsDestroy(ctx context.Context, id string) ApiExtrasCustomFieldsDestroyRequest {
	return ApiExtrasCustomFieldsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasCustomFieldsDestroyExecute(r ApiExtrasCustomFieldsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	contentTypes *[]int32
	contentTypesN *[]int32
	filterLogic *string
	filterLogicN *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	required *bool
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypes(contentTypes []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasCustomFieldsListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasCustomFieldsListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

// Loose matches any instance of a given string; Exact matches the entire field.
func (r ApiExtrasCustomFieldsListRequest) FilterLogic(filterLogic string) ApiExtrasCustomFieldsListRequest {
	r.filterLogic = &filterLogic
	return r
}

// Loose matches any instance of a given string; Exact matches the entire field.
func (r ApiExtrasCustomFieldsListRequest) FilterLogicN(filterLogicN string) ApiExtrasCustomFieldsListRequest {
	r.filterLogicN = &filterLogicN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Id(id []string) ApiExtrasCustomFieldsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIc(idIc []string) ApiExtrasCustomFieldsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIe(idIe []string) ApiExtrasCustomFieldsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIew(idIew []string) ApiExtrasCustomFieldsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIre(idIre []string) ApiExtrasCustomFieldsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdIsw(idIsw []string) ApiExtrasCustomFieldsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdN(idN []string) ApiExtrasCustomFieldsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNic(idNic []string) ApiExtrasCustomFieldsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNie(idNie []string) ApiExtrasCustomFieldsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNiew(idNiew []string) ApiExtrasCustomFieldsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNire(idNire []string) ApiExtrasCustomFieldsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNisw(idNisw []string) ApiExtrasCustomFieldsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdNre(idNre []string) ApiExtrasCustomFieldsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) IdRe(idRe []string) ApiExtrasCustomFieldsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomFieldsListRequest) Limit(limit int32) ApiExtrasCustomFieldsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Name(name []string) ApiExtrasCustomFieldsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIc(nameIc []string) ApiExtrasCustomFieldsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIe(nameIe []string) ApiExtrasCustomFieldsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIew(nameIew []string) ApiExtrasCustomFieldsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIre(nameIre []string) ApiExtrasCustomFieldsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameIsw(nameIsw []string) ApiExtrasCustomFieldsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameN(nameN []string) ApiExtrasCustomFieldsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNic(nameNic []string) ApiExtrasCustomFieldsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNie(nameNie []string) ApiExtrasCustomFieldsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNiew(nameNiew []string) ApiExtrasCustomFieldsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNire(nameNire []string) ApiExtrasCustomFieldsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNisw(nameNisw []string) ApiExtrasCustomFieldsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameNre(nameNre []string) ApiExtrasCustomFieldsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasCustomFieldsListRequest) NameRe(nameRe []string) ApiExtrasCustomFieldsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomFieldsListRequest) Offset(offset int32) ApiExtrasCustomFieldsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasCustomFieldsListRequest) Q(q string) ApiExtrasCustomFieldsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Required(required bool) ApiExtrasCustomFieldsListRequest {
	r.required = &required
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Weight(weight []int32) ApiExtrasCustomFieldsListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightGt(weightGt []int32) ApiExtrasCustomFieldsListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightGte(weightGte []int32) ApiExtrasCustomFieldsListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightLt(weightLt []int32) ApiExtrasCustomFieldsListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightLte(weightLte []int32) ApiExtrasCustomFieldsListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomFieldsListRequest) WeightN(weightN []int32) ApiExtrasCustomFieldsListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasCustomFieldsListRequest) Execute() (*PaginatedCustomFieldList, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsListExecute(r)
}

/*
ExtrasCustomFieldsList Method for ExtrasCustomFieldsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomFieldsListRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsList(ctx context.Context) ApiExtrasCustomFieldsListRequest {
	return ApiExtrasCustomFieldsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCustomFieldList
func (a *ExtrasApiService) ExtrasCustomFieldsListExecute(r ApiExtrasCustomFieldsListRequest) (*PaginatedCustomFieldList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCustomFieldList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types", parameterToString(t, "multi"))
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types__n", parameterToString(t, "multi"))
		}
	}
	if r.filterLogic != nil {
		localVarQueryParams.Add("filter_logic", parameterToString(*r.filterLogic, ""))
	}
	if r.filterLogicN != nil {
		localVarQueryParams.Add("filter_logic__n", parameterToString(*r.filterLogicN, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.required != nil {
		localVarQueryParams.Add("required", parameterToString(*r.required, ""))
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight", parameterToString(t, "multi"))
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gt", parameterToString(t, "multi"))
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gte", parameterToString(t, "multi"))
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lt", parameterToString(t, "multi"))
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lte", parameterToString(t, "multi"))
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWritableCustomField *PatchedWritableCustomField
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) PatchedWritableCustomField(patchedWritableCustomField PatchedWritableCustomField) ApiExtrasCustomFieldsPartialUpdateRequest {
	r.patchedWritableCustomField = &patchedWritableCustomField
	return r
}

func (r ApiExtrasCustomFieldsPartialUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsPartialUpdateExecute(r)
}

/*
ExtrasCustomFieldsPartialUpdate Method for ExtrasCustomFieldsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsPartialUpdate(ctx context.Context, id string) ApiExtrasCustomFieldsPartialUpdateRequest {
	return ApiExtrasCustomFieldsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasApiService) ExtrasCustomFieldsPartialUpdateExecute(r ApiExtrasCustomFieldsPartialUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCustomField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasCustomFieldsRetrieveRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsRetrieveExecute(r)
}

/*
ExtrasCustomFieldsRetrieve Method for ExtrasCustomFieldsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsRetrieve(ctx context.Context, id string) ApiExtrasCustomFieldsRetrieveRequest {
	return ApiExtrasCustomFieldsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasApiService) ExtrasCustomFieldsRetrieveExecute(r ApiExtrasCustomFieldsRetrieveRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomFieldsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	writableCustomField *WritableCustomField
}

func (r ApiExtrasCustomFieldsUpdateRequest) WritableCustomField(writableCustomField WritableCustomField) ApiExtrasCustomFieldsUpdateRequest {
	r.writableCustomField = &writableCustomField
	return r
}

func (r ApiExtrasCustomFieldsUpdateRequest) Execute() (*CustomField, *http.Response, error) {
	return r.ApiService.ExtrasCustomFieldsUpdateExecute(r)
}

/*
ExtrasCustomFieldsUpdate Method for ExtrasCustomFieldsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom field.
 @return ApiExtrasCustomFieldsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomFieldsUpdate(ctx context.Context, id string) ApiExtrasCustomFieldsUpdateRequest {
	return ApiExtrasCustomFieldsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomField
func (a *ExtrasApiService) ExtrasCustomFieldsUpdateExecute(r ApiExtrasCustomFieldsUpdateRequest) (*CustomField, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomField
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomFieldsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-fields/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCustomField == nil {
		return localVarReturnValue, nil, reportError("writableCustomField is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCustomField
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasCustomLinksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkDestroyExecute(r)
}

/*
ExtrasCustomLinksBulkDestroy Method for ExtrasCustomLinksBulkDestroy

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksBulkDestroy(ctx context.Context) ApiExtrasCustomLinksBulkDestroyRequest {
	return ApiExtrasCustomLinksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasCustomLinksBulkDestroyExecute(r ApiExtrasCustomLinksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedCustomLink *PatchedCustomLink
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) PatchedCustomLink(patchedCustomLink PatchedCustomLink) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	r.patchedCustomLink = &patchedCustomLink
	return r
}

func (r ApiExtrasCustomLinksBulkPartialUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkPartialUpdateExecute(r)
}

/*
ExtrasCustomLinksBulkPartialUpdate Method for ExtrasCustomLinksBulkPartialUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksBulkPartialUpdate(ctx context.Context) ApiExtrasCustomLinksBulkPartialUpdateRequest {
	return ApiExtrasCustomLinksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasApiService) ExtrasCustomLinksBulkPartialUpdateExecute(r ApiExtrasCustomLinksBulkPartialUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCustomLink
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	customLink *CustomLink
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) CustomLink(customLink CustomLink) ApiExtrasCustomLinksBulkUpdateRequest {
	r.customLink = &customLink
	return r
}

func (r ApiExtrasCustomLinksBulkUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksBulkUpdateExecute(r)
}

/*
ExtrasCustomLinksBulkUpdate Method for ExtrasCustomLinksBulkUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksBulkUpdate(ctx context.Context) ApiExtrasCustomLinksBulkUpdateRequest {
	return ApiExtrasCustomLinksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasApiService) ExtrasCustomLinksBulkUpdateExecute(r ApiExtrasCustomLinksBulkUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLink == nil {
		return localVarReturnValue, nil, reportError("customLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLink
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	customLink *CustomLink
}

func (r ApiExtrasCustomLinksCreateRequest) CustomLink(customLink CustomLink) ApiExtrasCustomLinksCreateRequest {
	r.customLink = &customLink
	return r
}

func (r ApiExtrasCustomLinksCreateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksCreateExecute(r)
}

/*
ExtrasCustomLinksCreate Method for ExtrasCustomLinksCreate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksCreateRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksCreate(ctx context.Context) ApiExtrasCustomLinksCreateRequest {
	return ApiExtrasCustomLinksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasApiService) ExtrasCustomLinksCreateExecute(r ApiExtrasCustomLinksCreateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLink == nil {
		return localVarReturnValue, nil, reportError("customLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLink
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasCustomLinksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasCustomLinksDestroyExecute(r)
}

/*
ExtrasCustomLinksDestroy Method for ExtrasCustomLinksDestroy

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksDestroyRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksDestroy(ctx context.Context, id string) ApiExtrasCustomLinksDestroyRequest {
	return ApiExtrasCustomLinksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasCustomLinksDestroyExecute(r ApiExtrasCustomLinksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	buttonClass *string
	buttonClassN *string
	contentType *string
	contentTypeN *string
	groupName *[]string
	groupNameIc *[]string
	groupNameIe *[]string
	groupNameIew *[]string
	groupNameIre *[]string
	groupNameIsw *[]string
	groupNameN *[]string
	groupNameNic *[]string
	groupNameNie *[]string
	groupNameNiew *[]string
	groupNameNire *[]string
	groupNameNisw *[]string
	groupNameNre *[]string
	groupNameRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	newWindow *bool
	offset *int32
	q *string
	targetUrl *[]string
	targetUrlIc *[]string
	targetUrlIe *[]string
	targetUrlIew *[]string
	targetUrlIre *[]string
	targetUrlIsw *[]string
	targetUrlN *[]string
	targetUrlNic *[]string
	targetUrlNie *[]string
	targetUrlNiew *[]string
	targetUrlNire *[]string
	targetUrlNisw *[]string
	targetUrlNre *[]string
	targetUrlRe *[]string
	text *[]string
	textIc *[]string
	textIe *[]string
	textIew *[]string
	textIre *[]string
	textIsw *[]string
	textN *[]string
	textNic *[]string
	textNie *[]string
	textNiew *[]string
	textNire *[]string
	textNisw *[]string
	textNre *[]string
	textRe *[]string
	weight *[]int32
	weightGt *[]int32
	weightGte *[]int32
	weightLt *[]int32
	weightLte *[]int32
	weightN *[]int32
}

// The class of the first link in a group will be used for the dropdown button
func (r ApiExtrasCustomLinksListRequest) ButtonClass(buttonClass string) ApiExtrasCustomLinksListRequest {
	r.buttonClass = &buttonClass
	return r
}

// The class of the first link in a group will be used for the dropdown button
func (r ApiExtrasCustomLinksListRequest) ButtonClassN(buttonClassN string) ApiExtrasCustomLinksListRequest {
	r.buttonClassN = &buttonClassN
	return r
}

func (r ApiExtrasCustomLinksListRequest) ContentType(contentType string) ApiExtrasCustomLinksListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasCustomLinksListRequest) ContentTypeN(contentTypeN string) ApiExtrasCustomLinksListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupName(groupName []string) ApiExtrasCustomLinksListRequest {
	r.groupName = &groupName
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIc(groupNameIc []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIc = &groupNameIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIe(groupNameIe []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIe = &groupNameIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIew(groupNameIew []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIew = &groupNameIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIre(groupNameIre []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIre = &groupNameIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameIsw(groupNameIsw []string) ApiExtrasCustomLinksListRequest {
	r.groupNameIsw = &groupNameIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameN(groupNameN []string) ApiExtrasCustomLinksListRequest {
	r.groupNameN = &groupNameN
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNic(groupNameNic []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNic = &groupNameNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNie(groupNameNie []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNie = &groupNameNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNiew(groupNameNiew []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNiew = &groupNameNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNire(groupNameNire []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNire = &groupNameNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNisw(groupNameNisw []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNisw = &groupNameNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameNre(groupNameNre []string) ApiExtrasCustomLinksListRequest {
	r.groupNameNre = &groupNameNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) GroupNameRe(groupNameRe []string) ApiExtrasCustomLinksListRequest {
	r.groupNameRe = &groupNameRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasCustomLinksListRequest) Limit(limit int32) ApiExtrasCustomLinksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasCustomLinksListRequest) Name(name []string) ApiExtrasCustomLinksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIc(nameIc []string) ApiExtrasCustomLinksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIe(nameIe []string) ApiExtrasCustomLinksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIew(nameIew []string) ApiExtrasCustomLinksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIre(nameIre []string) ApiExtrasCustomLinksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameIsw(nameIsw []string) ApiExtrasCustomLinksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameN(nameN []string) ApiExtrasCustomLinksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNic(nameNic []string) ApiExtrasCustomLinksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNie(nameNie []string) ApiExtrasCustomLinksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNiew(nameNiew []string) ApiExtrasCustomLinksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNire(nameNire []string) ApiExtrasCustomLinksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNisw(nameNisw []string) ApiExtrasCustomLinksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameNre(nameNre []string) ApiExtrasCustomLinksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) NameRe(nameRe []string) ApiExtrasCustomLinksListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) NewWindow(newWindow bool) ApiExtrasCustomLinksListRequest {
	r.newWindow = &newWindow
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasCustomLinksListRequest) Offset(offset int32) ApiExtrasCustomLinksListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasCustomLinksListRequest) Q(q string) ApiExtrasCustomLinksListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrl(targetUrl []string) ApiExtrasCustomLinksListRequest {
	r.targetUrl = &targetUrl
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIc(targetUrlIc []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIc = &targetUrlIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIe(targetUrlIe []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIe = &targetUrlIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIew(targetUrlIew []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIew = &targetUrlIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIre(targetUrlIre []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIre = &targetUrlIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlIsw(targetUrlIsw []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlIsw = &targetUrlIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlN(targetUrlN []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlN = &targetUrlN
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNic(targetUrlNic []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNic = &targetUrlNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNie(targetUrlNie []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNie = &targetUrlNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNiew(targetUrlNiew []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNiew = &targetUrlNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNire(targetUrlNire []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNire = &targetUrlNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNisw(targetUrlNisw []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNisw = &targetUrlNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlNre(targetUrlNre []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlNre = &targetUrlNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TargetUrlRe(targetUrlRe []string) ApiExtrasCustomLinksListRequest {
	r.targetUrlRe = &targetUrlRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) Text(text []string) ApiExtrasCustomLinksListRequest {
	r.text = &text
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIc(textIc []string) ApiExtrasCustomLinksListRequest {
	r.textIc = &textIc
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIe(textIe []string) ApiExtrasCustomLinksListRequest {
	r.textIe = &textIe
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIew(textIew []string) ApiExtrasCustomLinksListRequest {
	r.textIew = &textIew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIre(textIre []string) ApiExtrasCustomLinksListRequest {
	r.textIre = &textIre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextIsw(textIsw []string) ApiExtrasCustomLinksListRequest {
	r.textIsw = &textIsw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextN(textN []string) ApiExtrasCustomLinksListRequest {
	r.textN = &textN
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNic(textNic []string) ApiExtrasCustomLinksListRequest {
	r.textNic = &textNic
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNie(textNie []string) ApiExtrasCustomLinksListRequest {
	r.textNie = &textNie
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNiew(textNiew []string) ApiExtrasCustomLinksListRequest {
	r.textNiew = &textNiew
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNire(textNire []string) ApiExtrasCustomLinksListRequest {
	r.textNire = &textNire
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNisw(textNisw []string) ApiExtrasCustomLinksListRequest {
	r.textNisw = &textNisw
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextNre(textNre []string) ApiExtrasCustomLinksListRequest {
	r.textNre = &textNre
	return r
}

func (r ApiExtrasCustomLinksListRequest) TextRe(textRe []string) ApiExtrasCustomLinksListRequest {
	r.textRe = &textRe
	return r
}

func (r ApiExtrasCustomLinksListRequest) Weight(weight []int32) ApiExtrasCustomLinksListRequest {
	r.weight = &weight
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightGt(weightGt []int32) ApiExtrasCustomLinksListRequest {
	r.weightGt = &weightGt
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightGte(weightGte []int32) ApiExtrasCustomLinksListRequest {
	r.weightGte = &weightGte
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightLt(weightLt []int32) ApiExtrasCustomLinksListRequest {
	r.weightLt = &weightLt
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightLte(weightLte []int32) ApiExtrasCustomLinksListRequest {
	r.weightLte = &weightLte
	return r
}

func (r ApiExtrasCustomLinksListRequest) WeightN(weightN []int32) ApiExtrasCustomLinksListRequest {
	r.weightN = &weightN
	return r
}

func (r ApiExtrasCustomLinksListRequest) Execute() (*PaginatedCustomLinkList, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksListExecute(r)
}

/*
ExtrasCustomLinksList Method for ExtrasCustomLinksList

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasCustomLinksListRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksList(ctx context.Context) ApiExtrasCustomLinksListRequest {
	return ApiExtrasCustomLinksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCustomLinkList
func (a *ExtrasApiService) ExtrasCustomLinksListExecute(r ApiExtrasCustomLinksListRequest) (*PaginatedCustomLinkList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCustomLinkList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.buttonClass != nil {
		localVarQueryParams.Add("button_class", parameterToString(*r.buttonClass, ""))
	}
	if r.buttonClassN != nil {
		localVarQueryParams.Add("button_class__n", parameterToString(*r.buttonClassN, ""))
	}
	if r.contentType != nil {
		localVarQueryParams.Add("content_type", parameterToString(*r.contentType, ""))
	}
	if r.contentTypeN != nil {
		localVarQueryParams.Add("content_type__n", parameterToString(*r.contentTypeN, ""))
	}
	if r.groupName != nil {
		t := *r.groupName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name", parameterToString(t, "multi"))
		}
	}
	if r.groupNameIc != nil {
		t := *r.groupNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__ic", parameterToString(t, "multi"))
		}
	}
	if r.groupNameIe != nil {
		t := *r.groupNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__ie", parameterToString(t, "multi"))
		}
	}
	if r.groupNameIew != nil {
		t := *r.groupNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__iew", parameterToString(t, "multi"))
		}
	}
	if r.groupNameIre != nil {
		t := *r.groupNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__ire", parameterToString(t, "multi"))
		}
	}
	if r.groupNameIsw != nil {
		t := *r.groupNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__isw", parameterToString(t, "multi"))
		}
	}
	if r.groupNameN != nil {
		t := *r.groupNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__n", parameterToString(t, "multi"))
		}
	}
	if r.groupNameNic != nil {
		t := *r.groupNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__nic", parameterToString(t, "multi"))
		}
	}
	if r.groupNameNie != nil {
		t := *r.groupNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__nie", parameterToString(t, "multi"))
		}
	}
	if r.groupNameNiew != nil {
		t := *r.groupNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__niew", parameterToString(t, "multi"))
		}
	}
	if r.groupNameNire != nil {
		t := *r.groupNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__nire", parameterToString(t, "multi"))
		}
	}
	if r.groupNameNisw != nil {
		t := *r.groupNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.groupNameNre != nil {
		t := *r.groupNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__nre", parameterToString(t, "multi"))
		}
	}
	if r.groupNameRe != nil {
		t := *r.groupNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_name__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.newWindow != nil {
		localVarQueryParams.Add("new_window", parameterToString(*r.newWindow, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.targetUrl != nil {
		t := *r.targetUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlIc != nil {
		t := *r.targetUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__ic", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlIe != nil {
		t := *r.targetUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__ie", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlIew != nil {
		t := *r.targetUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__iew", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlIre != nil {
		t := *r.targetUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__ire", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlIsw != nil {
		t := *r.targetUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__isw", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlN != nil {
		t := *r.targetUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__n", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlNic != nil {
		t := *r.targetUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__nic", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlNie != nil {
		t := *r.targetUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__nie", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlNiew != nil {
		t := *r.targetUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__niew", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlNire != nil {
		t := *r.targetUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__nire", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlNisw != nil {
		t := *r.targetUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__nisw", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlNre != nil {
		t := *r.targetUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__nre", parameterToString(t, "multi"))
		}
	}
	if r.targetUrlRe != nil {
		t := *r.targetUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("target_url__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("target_url__re", parameterToString(t, "multi"))
		}
	}
	if r.text != nil {
		t := *r.text
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text", parameterToString(t, "multi"))
		}
	}
	if r.textIc != nil {
		t := *r.textIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__ic", parameterToString(t, "multi"))
		}
	}
	if r.textIe != nil {
		t := *r.textIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__ie", parameterToString(t, "multi"))
		}
	}
	if r.textIew != nil {
		t := *r.textIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__iew", parameterToString(t, "multi"))
		}
	}
	if r.textIre != nil {
		t := *r.textIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__ire", parameterToString(t, "multi"))
		}
	}
	if r.textIsw != nil {
		t := *r.textIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__isw", parameterToString(t, "multi"))
		}
	}
	if r.textN != nil {
		t := *r.textN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__n", parameterToString(t, "multi"))
		}
	}
	if r.textNic != nil {
		t := *r.textNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__nic", parameterToString(t, "multi"))
		}
	}
	if r.textNie != nil {
		t := *r.textNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__nie", parameterToString(t, "multi"))
		}
	}
	if r.textNiew != nil {
		t := *r.textNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__niew", parameterToString(t, "multi"))
		}
	}
	if r.textNire != nil {
		t := *r.textNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__nire", parameterToString(t, "multi"))
		}
	}
	if r.textNisw != nil {
		t := *r.textNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__nisw", parameterToString(t, "multi"))
		}
	}
	if r.textNre != nil {
		t := *r.textNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__nre", parameterToString(t, "multi"))
		}
	}
	if r.textRe != nil {
		t := *r.textRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("text__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("text__re", parameterToString(t, "multi"))
		}
	}
	if r.weight != nil {
		t := *r.weight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight", parameterToString(t, "multi"))
		}
	}
	if r.weightGt != nil {
		t := *r.weightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gt", parameterToString(t, "multi"))
		}
	}
	if r.weightGte != nil {
		t := *r.weightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__gte", parameterToString(t, "multi"))
		}
	}
	if r.weightLt != nil {
		t := *r.weightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lt", parameterToString(t, "multi"))
		}
	}
	if r.weightLte != nil {
		t := *r.weightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__lte", parameterToString(t, "multi"))
		}
	}
	if r.weightN != nil {
		t := *r.weightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("weight__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("weight__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedCustomLink *PatchedCustomLink
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) PatchedCustomLink(patchedCustomLink PatchedCustomLink) ApiExtrasCustomLinksPartialUpdateRequest {
	r.patchedCustomLink = &patchedCustomLink
	return r
}

func (r ApiExtrasCustomLinksPartialUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksPartialUpdateExecute(r)
}

/*
ExtrasCustomLinksPartialUpdate Method for ExtrasCustomLinksPartialUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksPartialUpdate(ctx context.Context, id string) ApiExtrasCustomLinksPartialUpdateRequest {
	return ApiExtrasCustomLinksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasApiService) ExtrasCustomLinksPartialUpdateExecute(r ApiExtrasCustomLinksPartialUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedCustomLink
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasCustomLinksRetrieveRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksRetrieveExecute(r)
}

/*
ExtrasCustomLinksRetrieve Method for ExtrasCustomLinksRetrieve

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksRetrieve(ctx context.Context, id string) ApiExtrasCustomLinksRetrieveRequest {
	return ApiExtrasCustomLinksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasApiService) ExtrasCustomLinksRetrieveExecute(r ApiExtrasCustomLinksRetrieveRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasCustomLinksUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	customLink *CustomLink
}

func (r ApiExtrasCustomLinksUpdateRequest) CustomLink(customLink CustomLink) ApiExtrasCustomLinksUpdateRequest {
	r.customLink = &customLink
	return r
}

func (r ApiExtrasCustomLinksUpdateRequest) Execute() (*CustomLink, *http.Response, error) {
	return r.ApiService.ExtrasCustomLinksUpdateExecute(r)
}

/*
ExtrasCustomLinksUpdate Method for ExtrasCustomLinksUpdate

Manage Custom Links through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this custom link.
 @return ApiExtrasCustomLinksUpdateRequest
*/
func (a *ExtrasApiService) ExtrasCustomLinksUpdate(ctx context.Context, id string) ApiExtrasCustomLinksUpdateRequest {
	return ApiExtrasCustomLinksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return CustomLink
func (a *ExtrasApiService) ExtrasCustomLinksUpdateExecute(r ApiExtrasCustomLinksUpdateRequest) (*CustomLink, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CustomLink
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasCustomLinksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/custom-links/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.customLink == nil {
		return localVarReturnValue, nil, reportError("customLink is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.customLink
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasDynamicGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsBulkDestroyExecute(r)
}

/*
ExtrasDynamicGroupsBulkDestroy Method for ExtrasDynamicGroupsBulkDestroy

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsBulkDestroy(ctx context.Context) ApiExtrasDynamicGroupsBulkDestroyRequest {
	return ApiExtrasDynamicGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasDynamicGroupsBulkDestroyExecute(r ApiExtrasDynamicGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedDynamicGroup *PatchedDynamicGroup
}

func (r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) PatchedDynamicGroup(patchedDynamicGroup PatchedDynamicGroup) ApiExtrasDynamicGroupsBulkPartialUpdateRequest {
	r.patchedDynamicGroup = &patchedDynamicGroup
	return r
}

func (r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsBulkPartialUpdateExecute(r)
}

/*
ExtrasDynamicGroupsBulkPartialUpdate Method for ExtrasDynamicGroupsBulkPartialUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsBulkPartialUpdate(ctx context.Context) ApiExtrasDynamicGroupsBulkPartialUpdateRequest {
	return ApiExtrasDynamicGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsBulkPartialUpdateExecute(r ApiExtrasDynamicGroupsBulkPartialUpdateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDynamicGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	dynamicGroup *DynamicGroup
}

func (r ApiExtrasDynamicGroupsBulkUpdateRequest) DynamicGroup(dynamicGroup DynamicGroup) ApiExtrasDynamicGroupsBulkUpdateRequest {
	r.dynamicGroup = &dynamicGroup
	return r
}

func (r ApiExtrasDynamicGroupsBulkUpdateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsBulkUpdateExecute(r)
}

/*
ExtrasDynamicGroupsBulkUpdate Method for ExtrasDynamicGroupsBulkUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsBulkUpdate(ctx context.Context) ApiExtrasDynamicGroupsBulkUpdateRequest {
	return ApiExtrasDynamicGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsBulkUpdateExecute(r ApiExtrasDynamicGroupsBulkUpdateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroup == nil {
		return localVarReturnValue, nil, reportError("dynamicGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	dynamicGroup *DynamicGroup
}

func (r ApiExtrasDynamicGroupsCreateRequest) DynamicGroup(dynamicGroup DynamicGroup) ApiExtrasDynamicGroupsCreateRequest {
	r.dynamicGroup = &dynamicGroup
	return r
}

func (r ApiExtrasDynamicGroupsCreateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsCreateExecute(r)
}

/*
ExtrasDynamicGroupsCreate Method for ExtrasDynamicGroupsCreate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsCreateRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsCreate(ctx context.Context) ApiExtrasDynamicGroupsCreateRequest {
	return ApiExtrasDynamicGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsCreateExecute(r ApiExtrasDynamicGroupsCreateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroup == nil {
		return localVarReturnValue, nil, reportError("dynamicGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasDynamicGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsDestroyExecute(r)
}

/*
ExtrasDynamicGroupsDestroy Method for ExtrasDynamicGroupsDestroy

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsDestroy(ctx context.Context, id string) ApiExtrasDynamicGroupsDestroyRequest {
	return ApiExtrasDynamicGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasDynamicGroupsDestroyExecute(r ApiExtrasDynamicGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	contentType *[]int32
	contentTypeN *[]int32
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiExtrasDynamicGroupsListRequest) ContentType(contentType []int32) ApiExtrasDynamicGroupsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) ContentTypeN(contentTypeN []int32) ApiExtrasDynamicGroupsListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Created(created string) ApiExtrasDynamicGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedGte(createdGte string) ApiExtrasDynamicGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) CreatedLte(createdLte string) ApiExtrasDynamicGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Description(description []string) ApiExtrasDynamicGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIc(descriptionIc []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIe(descriptionIe []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIew(descriptionIew []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIre(descriptionIre []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionN(descriptionN []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNic(descriptionNic []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNie(descriptionNie []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNire(descriptionNire []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionNre(descriptionNre []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) DescriptionRe(descriptionRe []string) ApiExtrasDynamicGroupsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Id(id []string) ApiExtrasDynamicGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIc(idIc []string) ApiExtrasDynamicGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIe(idIe []string) ApiExtrasDynamicGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIew(idIew []string) ApiExtrasDynamicGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIre(idIre []string) ApiExtrasDynamicGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdIsw(idIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdN(idN []string) ApiExtrasDynamicGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNic(idNic []string) ApiExtrasDynamicGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNie(idNie []string) ApiExtrasDynamicGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNiew(idNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNire(idNire []string) ApiExtrasDynamicGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNisw(idNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdNre(idNre []string) ApiExtrasDynamicGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) IdRe(idRe []string) ApiExtrasDynamicGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdated(lastUpdated time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasDynamicGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasDynamicGroupsListRequest) Limit(limit int32) ApiExtrasDynamicGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Name(name []string) ApiExtrasDynamicGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIc(nameIc []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIe(nameIe []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIew(nameIew []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIre(nameIre []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameIsw(nameIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameN(nameN []string) ApiExtrasDynamicGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNic(nameNic []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNie(nameNie []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNiew(nameNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNire(nameNire []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNisw(nameNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameNre(nameNre []string) ApiExtrasDynamicGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) NameRe(nameRe []string) ApiExtrasDynamicGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasDynamicGroupsListRequest) Offset(offset int32) ApiExtrasDynamicGroupsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasDynamicGroupsListRequest) Q(q string) ApiExtrasDynamicGroupsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Slug(slug []string) ApiExtrasDynamicGroupsListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugIc(slugIc []string) ApiExtrasDynamicGroupsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugIe(slugIe []string) ApiExtrasDynamicGroupsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugIew(slugIew []string) ApiExtrasDynamicGroupsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugIre(slugIre []string) ApiExtrasDynamicGroupsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugIsw(slugIsw []string) ApiExtrasDynamicGroupsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugN(slugN []string) ApiExtrasDynamicGroupsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugNic(slugNic []string) ApiExtrasDynamicGroupsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugNie(slugNie []string) ApiExtrasDynamicGroupsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugNiew(slugNiew []string) ApiExtrasDynamicGroupsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugNire(slugNire []string) ApiExtrasDynamicGroupsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugNisw(slugNisw []string) ApiExtrasDynamicGroupsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugNre(slugNre []string) ApiExtrasDynamicGroupsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) SlugRe(slugRe []string) ApiExtrasDynamicGroupsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasDynamicGroupsListRequest) Execute() (*PaginatedDynamicGroupList, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsListExecute(r)
}

/*
ExtrasDynamicGroupsList Method for ExtrasDynamicGroupsList

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasDynamicGroupsListRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsList(ctx context.Context) ApiExtrasDynamicGroupsListRequest {
	return ApiExtrasDynamicGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDynamicGroupList
func (a *ExtrasApiService) ExtrasDynamicGroupsListExecute(r ApiExtrasDynamicGroupsListRequest) (*PaginatedDynamicGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDynamicGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentType != nil {
		t := *r.contentType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_type", parameterToString(t, "multi"))
		}
	}
	if r.contentTypeN != nil {
		t := *r.contentTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_type__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsMembersRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasDynamicGroupsMembersRetrieveRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsMembersRetrieveExecute(r)
}

/*
ExtrasDynamicGroupsMembersRetrieve Method for ExtrasDynamicGroupsMembersRetrieve

List member objects of the same type as the `content_type` for this dynamic group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsMembersRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsMembersRetrieve(ctx context.Context, id string) ApiExtrasDynamicGroupsMembersRetrieveRequest {
	return ApiExtrasDynamicGroupsMembersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsMembersRetrieveExecute(r ApiExtrasDynamicGroupsMembersRetrieveRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsMembersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/members/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedDynamicGroup *PatchedDynamicGroup
}

func (r ApiExtrasDynamicGroupsPartialUpdateRequest) PatchedDynamicGroup(patchedDynamicGroup PatchedDynamicGroup) ApiExtrasDynamicGroupsPartialUpdateRequest {
	r.patchedDynamicGroup = &patchedDynamicGroup
	return r
}

func (r ApiExtrasDynamicGroupsPartialUpdateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsPartialUpdateExecute(r)
}

/*
ExtrasDynamicGroupsPartialUpdate Method for ExtrasDynamicGroupsPartialUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsPartialUpdate(ctx context.Context, id string) ApiExtrasDynamicGroupsPartialUpdateRequest {
	return ApiExtrasDynamicGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsPartialUpdateExecute(r ApiExtrasDynamicGroupsPartialUpdateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDynamicGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasDynamicGroupsRetrieveRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsRetrieveExecute(r)
}

/*
ExtrasDynamicGroupsRetrieve Method for ExtrasDynamicGroupsRetrieve

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsRetrieve(ctx context.Context, id string) ApiExtrasDynamicGroupsRetrieveRequest {
	return ApiExtrasDynamicGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsRetrieveExecute(r ApiExtrasDynamicGroupsRetrieveRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasDynamicGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	dynamicGroup *DynamicGroup
}

func (r ApiExtrasDynamicGroupsUpdateRequest) DynamicGroup(dynamicGroup DynamicGroup) ApiExtrasDynamicGroupsUpdateRequest {
	r.dynamicGroup = &dynamicGroup
	return r
}

func (r ApiExtrasDynamicGroupsUpdateRequest) Execute() (*DynamicGroup, *http.Response, error) {
	return r.ApiService.ExtrasDynamicGroupsUpdateExecute(r)
}

/*
ExtrasDynamicGroupsUpdate Method for ExtrasDynamicGroupsUpdate

Manage Dynamic Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this dynamic group.
 @return ApiExtrasDynamicGroupsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasDynamicGroupsUpdate(ctx context.Context, id string) ApiExtrasDynamicGroupsUpdateRequest {
	return ApiExtrasDynamicGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DynamicGroup
func (a *ExtrasApiService) ExtrasDynamicGroupsUpdateExecute(r ApiExtrasDynamicGroupsUpdateRequest) (*DynamicGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DynamicGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasDynamicGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/dynamic-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dynamicGroup == nil {
		return localVarReturnValue, nil, reportError("dynamicGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dynamicGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasExportTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkDestroyExecute(r)
}

/*
ExtrasExportTemplatesBulkDestroy Method for ExtrasExportTemplatesBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesBulkDestroy(ctx context.Context) ApiExtrasExportTemplatesBulkDestroyRequest {
	return ApiExtrasExportTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasExportTemplatesBulkDestroyExecute(r ApiExtrasExportTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedExportTemplate *PatchedExportTemplate
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) PatchedExportTemplate(patchedExportTemplate PatchedExportTemplate) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	r.patchedExportTemplate = &patchedExportTemplate
	return r
}

func (r ApiExtrasExportTemplatesBulkPartialUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkPartialUpdateExecute(r)
}

/*
ExtrasExportTemplatesBulkPartialUpdate Method for ExtrasExportTemplatesBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesBulkPartialUpdate(ctx context.Context) ApiExtrasExportTemplatesBulkPartialUpdateRequest {
	return ApiExtrasExportTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasApiService) ExtrasExportTemplatesBulkPartialUpdateExecute(r ApiExtrasExportTemplatesBulkPartialUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedExportTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	exportTemplate *ExportTemplate
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) ExportTemplate(exportTemplate ExportTemplate) ApiExtrasExportTemplatesBulkUpdateRequest {
	r.exportTemplate = &exportTemplate
	return r
}

func (r ApiExtrasExportTemplatesBulkUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesBulkUpdateExecute(r)
}

/*
ExtrasExportTemplatesBulkUpdate Method for ExtrasExportTemplatesBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesBulkUpdate(ctx context.Context) ApiExtrasExportTemplatesBulkUpdateRequest {
	return ApiExtrasExportTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasApiService) ExtrasExportTemplatesBulkUpdateExecute(r ApiExtrasExportTemplatesBulkUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplate == nil {
		return localVarReturnValue, nil, reportError("exportTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	exportTemplate *ExportTemplate
}

func (r ApiExtrasExportTemplatesCreateRequest) ExportTemplate(exportTemplate ExportTemplate) ApiExtrasExportTemplatesCreateRequest {
	r.exportTemplate = &exportTemplate
	return r
}

func (r ApiExtrasExportTemplatesCreateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesCreateExecute(r)
}

/*
ExtrasExportTemplatesCreate Method for ExtrasExportTemplatesCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesCreateRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesCreate(ctx context.Context) ApiExtrasExportTemplatesCreateRequest {
	return ApiExtrasExportTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasApiService) ExtrasExportTemplatesCreateExecute(r ApiExtrasExportTemplatesCreateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplate == nil {
		return localVarReturnValue, nil, reportError("exportTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasExportTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesDestroyExecute(r)
}

/*
ExtrasExportTemplatesDestroy Method for ExtrasExportTemplatesDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesDestroyRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesDestroy(ctx context.Context, id string) ApiExtrasExportTemplatesDestroyRequest {
	return ApiExtrasExportTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasExportTemplatesDestroyExecute(r ApiExtrasExportTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	contentType *int32
	contentTypeN *int32
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	ownerContentType *string
	ownerContentTypeN *string
	ownerObjectId *[]string
	ownerObjectIdIc *[]string
	ownerObjectIdIe *[]string
	ownerObjectIdIew *[]string
	ownerObjectIdIre *[]string
	ownerObjectIdIsw *[]string
	ownerObjectIdN *[]string
	ownerObjectIdNic *[]string
	ownerObjectIdNie *[]string
	ownerObjectIdNiew *[]string
	ownerObjectIdNire *[]string
	ownerObjectIdNisw *[]string
	ownerObjectIdNre *[]string
	ownerObjectIdRe *[]string
	q *string
}

func (r ApiExtrasExportTemplatesListRequest) ContentType(contentType int32) ApiExtrasExportTemplatesListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasExportTemplatesListRequest) ContentTypeN(contentTypeN int32) ApiExtrasExportTemplatesListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Id(id []string) ApiExtrasExportTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIc(idIc []string) ApiExtrasExportTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIe(idIe []string) ApiExtrasExportTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIew(idIew []string) ApiExtrasExportTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIre(idIre []string) ApiExtrasExportTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdIsw(idIsw []string) ApiExtrasExportTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdN(idN []string) ApiExtrasExportTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNic(idNic []string) ApiExtrasExportTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNie(idNie []string) ApiExtrasExportTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNiew(idNiew []string) ApiExtrasExportTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNire(idNire []string) ApiExtrasExportTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNisw(idNisw []string) ApiExtrasExportTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdNre(idNre []string) ApiExtrasExportTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) IdRe(idRe []string) ApiExtrasExportTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasExportTemplatesListRequest) Limit(limit int32) ApiExtrasExportTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Name(name []string) ApiExtrasExportTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIc(nameIc []string) ApiExtrasExportTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIe(nameIe []string) ApiExtrasExportTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIew(nameIew []string) ApiExtrasExportTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIre(nameIre []string) ApiExtrasExportTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameIsw(nameIsw []string) ApiExtrasExportTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameN(nameN []string) ApiExtrasExportTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNic(nameNic []string) ApiExtrasExportTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNie(nameNie []string) ApiExtrasExportTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNiew(nameNiew []string) ApiExtrasExportTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNire(nameNire []string) ApiExtrasExportTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNisw(nameNisw []string) ApiExtrasExportTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameNre(nameNre []string) ApiExtrasExportTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) NameRe(nameRe []string) ApiExtrasExportTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasExportTemplatesListRequest) Offset(offset int32) ApiExtrasExportTemplatesListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerContentType(ownerContentType string) ApiExtrasExportTemplatesListRequest {
	r.ownerContentType = &ownerContentType
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerContentTypeN(ownerContentTypeN string) ApiExtrasExportTemplatesListRequest {
	r.ownerContentTypeN = &ownerContentTypeN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectId(ownerObjectId []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectId = &ownerObjectId
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIc(ownerObjectIdIc []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIc = &ownerObjectIdIc
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIe(ownerObjectIdIe []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIe = &ownerObjectIdIe
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIew(ownerObjectIdIew []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIew = &ownerObjectIdIew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIre(ownerObjectIdIre []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIre = &ownerObjectIdIre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdIsw(ownerObjectIdIsw []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdIsw = &ownerObjectIdIsw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdN(ownerObjectIdN []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdN = &ownerObjectIdN
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNic(ownerObjectIdNic []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNic = &ownerObjectIdNic
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNie(ownerObjectIdNie []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNie = &ownerObjectIdNie
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNiew(ownerObjectIdNiew []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNiew = &ownerObjectIdNiew
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNire(ownerObjectIdNire []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNire = &ownerObjectIdNire
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNisw(ownerObjectIdNisw []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNisw = &ownerObjectIdNisw
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdNre(ownerObjectIdNre []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdNre = &ownerObjectIdNre
	return r
}

func (r ApiExtrasExportTemplatesListRequest) OwnerObjectIdRe(ownerObjectIdRe []string) ApiExtrasExportTemplatesListRequest {
	r.ownerObjectIdRe = &ownerObjectIdRe
	return r
}

// Search
func (r ApiExtrasExportTemplatesListRequest) Q(q string) ApiExtrasExportTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasExportTemplatesListRequest) Execute() (*PaginatedExportTemplateList, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesListExecute(r)
}

/*
ExtrasExportTemplatesList Method for ExtrasExportTemplatesList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasExportTemplatesListRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesList(ctx context.Context) ApiExtrasExportTemplatesListRequest {
	return ApiExtrasExportTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedExportTemplateList
func (a *ExtrasApiService) ExtrasExportTemplatesListExecute(r ApiExtrasExportTemplatesListRequest) (*PaginatedExportTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedExportTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentType != nil {
		localVarQueryParams.Add("content_type", parameterToString(*r.contentType, ""))
	}
	if r.contentTypeN != nil {
		localVarQueryParams.Add("content_type__n", parameterToString(*r.contentTypeN, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.ownerContentType != nil {
		localVarQueryParams.Add("owner_content_type", parameterToString(*r.ownerContentType, ""))
	}
	if r.ownerContentTypeN != nil {
		localVarQueryParams.Add("owner_content_type__n", parameterToString(*r.ownerContentTypeN, ""))
	}
	if r.ownerObjectId != nil {
		t := *r.ownerObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIc != nil {
		t := *r.ownerObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIe != nil {
		t := *r.ownerObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIew != nil {
		t := *r.ownerObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIre != nil {
		t := *r.ownerObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdIsw != nil {
		t := *r.ownerObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdN != nil {
		t := *r.ownerObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__n", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNic != nil {
		t := *r.ownerObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNie != nil {
		t := *r.ownerObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNiew != nil {
		t := *r.ownerObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNire != nil {
		t := *r.ownerObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNisw != nil {
		t := *r.ownerObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdNre != nil {
		t := *r.ownerObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.ownerObjectIdRe != nil {
		t := *r.ownerObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("owner_object_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("owner_object_id__re", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedExportTemplate *PatchedExportTemplate
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) PatchedExportTemplate(patchedExportTemplate PatchedExportTemplate) ApiExtrasExportTemplatesPartialUpdateRequest {
	r.patchedExportTemplate = &patchedExportTemplate
	return r
}

func (r ApiExtrasExportTemplatesPartialUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesPartialUpdateExecute(r)
}

/*
ExtrasExportTemplatesPartialUpdate Method for ExtrasExportTemplatesPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesPartialUpdate(ctx context.Context, id string) ApiExtrasExportTemplatesPartialUpdateRequest {
	return ApiExtrasExportTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasApiService) ExtrasExportTemplatesPartialUpdateExecute(r ApiExtrasExportTemplatesPartialUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedExportTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasExportTemplatesRetrieveRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesRetrieveExecute(r)
}

/*
ExtrasExportTemplatesRetrieve Method for ExtrasExportTemplatesRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesRetrieve(ctx context.Context, id string) ApiExtrasExportTemplatesRetrieveRequest {
	return ApiExtrasExportTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasApiService) ExtrasExportTemplatesRetrieveExecute(r ApiExtrasExportTemplatesRetrieveRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasExportTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	exportTemplate *ExportTemplate
}

func (r ApiExtrasExportTemplatesUpdateRequest) ExportTemplate(exportTemplate ExportTemplate) ApiExtrasExportTemplatesUpdateRequest {
	r.exportTemplate = &exportTemplate
	return r
}

func (r ApiExtrasExportTemplatesUpdateRequest) Execute() (*ExportTemplate, *http.Response, error) {
	return r.ApiService.ExtrasExportTemplatesUpdateExecute(r)
}

/*
ExtrasExportTemplatesUpdate Method for ExtrasExportTemplatesUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this export template.
 @return ApiExtrasExportTemplatesUpdateRequest
*/
func (a *ExtrasApiService) ExtrasExportTemplatesUpdate(ctx context.Context, id string) ApiExtrasExportTemplatesUpdateRequest {
	return ApiExtrasExportTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ExportTemplate
func (a *ExtrasApiService) ExtrasExportTemplatesUpdateExecute(r ApiExtrasExportTemplatesUpdateRequest) (*ExportTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ExportTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasExportTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/export-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.exportTemplate == nil {
		return localVarReturnValue, nil, reportError("exportTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.exportTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasGitRepositoriesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesBulkDestroyExecute(r)
}

/*
ExtrasGitRepositoriesBulkDestroy Method for ExtrasGitRepositoriesBulkDestroy

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesBulkDestroy(ctx context.Context) ApiExtrasGitRepositoriesBulkDestroyRequest {
	return ApiExtrasGitRepositoriesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasGitRepositoriesBulkDestroyExecute(r ApiExtrasGitRepositoriesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWritableGitRepository *PatchedWritableGitRepository
}

func (r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) PatchedWritableGitRepository(patchedWritableGitRepository PatchedWritableGitRepository) ApiExtrasGitRepositoriesBulkPartialUpdateRequest {
	r.patchedWritableGitRepository = &patchedWritableGitRepository
	return r
}

func (r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesBulkPartialUpdateExecute(r)
}

/*
ExtrasGitRepositoriesBulkPartialUpdate Method for ExtrasGitRepositoriesBulkPartialUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesBulkPartialUpdate(ctx context.Context) ApiExtrasGitRepositoriesBulkPartialUpdateRequest {
	return ApiExtrasGitRepositoriesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesBulkPartialUpdateExecute(r ApiExtrasGitRepositoriesBulkPartialUpdateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableGitRepository
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableGitRepository *WritableGitRepository
}

func (r ApiExtrasGitRepositoriesBulkUpdateRequest) WritableGitRepository(writableGitRepository WritableGitRepository) ApiExtrasGitRepositoriesBulkUpdateRequest {
	r.writableGitRepository = &writableGitRepository
	return r
}

func (r ApiExtrasGitRepositoriesBulkUpdateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesBulkUpdateExecute(r)
}

/*
ExtrasGitRepositoriesBulkUpdate Method for ExtrasGitRepositoriesBulkUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesBulkUpdate(ctx context.Context) ApiExtrasGitRepositoriesBulkUpdateRequest {
	return ApiExtrasGitRepositoriesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesBulkUpdateExecute(r ApiExtrasGitRepositoriesBulkUpdateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableGitRepository == nil {
		return localVarReturnValue, nil, reportError("writableGitRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableGitRepository
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableGitRepository *WritableGitRepository
}

func (r ApiExtrasGitRepositoriesCreateRequest) WritableGitRepository(writableGitRepository WritableGitRepository) ApiExtrasGitRepositoriesCreateRequest {
	r.writableGitRepository = &writableGitRepository
	return r
}

func (r ApiExtrasGitRepositoriesCreateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesCreateExecute(r)
}

/*
ExtrasGitRepositoriesCreate Method for ExtrasGitRepositoriesCreate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesCreateRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesCreate(ctx context.Context) ApiExtrasGitRepositoriesCreateRequest {
	return ApiExtrasGitRepositoriesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesCreateExecute(r ApiExtrasGitRepositoriesCreateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableGitRepository == nil {
		return localVarReturnValue, nil, reportError("writableGitRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableGitRepository
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasGitRepositoriesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesDestroyExecute(r)
}

/*
ExtrasGitRepositoriesDestroy Method for ExtrasGitRepositoriesDestroy

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesDestroyRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesDestroy(ctx context.Context, id string) ApiExtrasGitRepositoriesDestroyRequest {
	return ApiExtrasGitRepositoriesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasGitRepositoriesDestroyExecute(r ApiExtrasGitRepositoriesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	branch *[]string
	branchIc *[]string
	branchIe *[]string
	branchIew *[]string
	branchIre *[]string
	branchIsw *[]string
	branchN *[]string
	branchNic *[]string
	branchNie *[]string
	branchNiew *[]string
	branchNire *[]string
	branchNisw *[]string
	branchNre *[]string
	branchRe *[]string
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	providedContents *[]string
	q *string
	remoteUrl *[]string
	remoteUrlIc *[]string
	remoteUrlIe *[]string
	remoteUrlIew *[]string
	remoteUrlIre *[]string
	remoteUrlIsw *[]string
	remoteUrlN *[]string
	remoteUrlNic *[]string
	remoteUrlNie *[]string
	remoteUrlNiew *[]string
	remoteUrlNire *[]string
	remoteUrlNisw *[]string
	remoteUrlNre *[]string
	remoteUrlRe *[]string
	secretsGroup *[]string
	secretsGroupN *[]string
	secretsGroupId *[]string
	secretsGroupIdN *[]string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	tag *[]string
	tagN *[]string
}

func (r ApiExtrasGitRepositoriesListRequest) Branch(branch []string) ApiExtrasGitRepositoriesListRequest {
	r.branch = &branch
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIc(branchIc []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIc = &branchIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIe(branchIe []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIe = &branchIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIew(branchIew []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIew = &branchIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIre(branchIre []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIre = &branchIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchIsw(branchIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.branchIsw = &branchIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchN(branchN []string) ApiExtrasGitRepositoriesListRequest {
	r.branchN = &branchN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNic(branchNic []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNic = &branchNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNie(branchNie []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNie = &branchNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNiew(branchNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNiew = &branchNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNire(branchNire []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNire = &branchNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNisw(branchNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNisw = &branchNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchNre(branchNre []string) ApiExtrasGitRepositoriesListRequest {
	r.branchNre = &branchNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) BranchRe(branchRe []string) ApiExtrasGitRepositoriesListRequest {
	r.branchRe = &branchRe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Created(created string) ApiExtrasGitRepositoriesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedGte(createdGte string) ApiExtrasGitRepositoriesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) CreatedLte(createdLte string) ApiExtrasGitRepositoriesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Id(id []string) ApiExtrasGitRepositoriesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIc(idIc []string) ApiExtrasGitRepositoriesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIe(idIe []string) ApiExtrasGitRepositoriesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIew(idIew []string) ApiExtrasGitRepositoriesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIre(idIre []string) ApiExtrasGitRepositoriesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdIsw(idIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdN(idN []string) ApiExtrasGitRepositoriesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNic(idNic []string) ApiExtrasGitRepositoriesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNie(idNie []string) ApiExtrasGitRepositoriesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNiew(idNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNire(idNire []string) ApiExtrasGitRepositoriesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNisw(idNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdNre(idNre []string) ApiExtrasGitRepositoriesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) IdRe(idRe []string) ApiExtrasGitRepositoriesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdated(lastUpdated time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasGitRepositoriesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasGitRepositoriesListRequest) Limit(limit int32) ApiExtrasGitRepositoriesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Name(name []string) ApiExtrasGitRepositoriesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIc(nameIc []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIe(nameIe []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIew(nameIew []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIre(nameIre []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameIsw(nameIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameN(nameN []string) ApiExtrasGitRepositoriesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNic(nameNic []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNie(nameNie []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNiew(nameNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNire(nameNire []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNisw(nameNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameNre(nameNre []string) ApiExtrasGitRepositoriesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) NameRe(nameRe []string) ApiExtrasGitRepositoriesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasGitRepositoriesListRequest) Offset(offset int32) ApiExtrasGitRepositoriesListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) ProvidedContents(providedContents []string) ApiExtrasGitRepositoriesListRequest {
	r.providedContents = &providedContents
	return r
}

// Search
func (r ApiExtrasGitRepositoriesListRequest) Q(q string) ApiExtrasGitRepositoriesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrl(remoteUrl []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrl = &remoteUrl
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIc(remoteUrlIc []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIc = &remoteUrlIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIe(remoteUrlIe []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIe = &remoteUrlIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIew(remoteUrlIew []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIew = &remoteUrlIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIre(remoteUrlIre []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIre = &remoteUrlIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlIsw(remoteUrlIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlIsw = &remoteUrlIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlN(remoteUrlN []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlN = &remoteUrlN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNic(remoteUrlNic []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNic = &remoteUrlNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNie(remoteUrlNie []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNie = &remoteUrlNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNiew(remoteUrlNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNiew = &remoteUrlNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNire(remoteUrlNire []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNire = &remoteUrlNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNisw(remoteUrlNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNisw = &remoteUrlNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlNre(remoteUrlNre []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlNre = &remoteUrlNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) RemoteUrlRe(remoteUrlRe []string) ApiExtrasGitRepositoriesListRequest {
	r.remoteUrlRe = &remoteUrlRe
	return r
}

// Secrets group (slug)
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroup(secretsGroup []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroup = &secretsGroup
	return r
}

// Secrets group (slug)
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupN(secretsGroupN []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupN = &secretsGroupN
	return r
}

// Secrets group (ID)
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupId(secretsGroupId []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupId = &secretsGroupId
	return r
}

// Secrets group (ID)
func (r ApiExtrasGitRepositoriesListRequest) SecretsGroupIdN(secretsGroupIdN []string) ApiExtrasGitRepositoriesListRequest {
	r.secretsGroupIdN = &secretsGroupIdN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Slug(slug []string) ApiExtrasGitRepositoriesListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIc(slugIc []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIe(slugIe []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIew(slugIew []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIre(slugIre []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugIsw(slugIsw []string) ApiExtrasGitRepositoriesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugN(slugN []string) ApiExtrasGitRepositoriesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNic(slugNic []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNie(slugNie []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNiew(slugNiew []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNire(slugNire []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNisw(slugNisw []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugNre(slugNre []string) ApiExtrasGitRepositoriesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) SlugRe(slugRe []string) ApiExtrasGitRepositoriesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Tag(tag []string) ApiExtrasGitRepositoriesListRequest {
	r.tag = &tag
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) TagN(tagN []string) ApiExtrasGitRepositoriesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiExtrasGitRepositoriesListRequest) Execute() (*PaginatedGitRepositoryList, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesListExecute(r)
}

/*
ExtrasGitRepositoriesList Method for ExtrasGitRepositoriesList

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGitRepositoriesListRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesList(ctx context.Context) ApiExtrasGitRepositoriesListRequest {
	return ApiExtrasGitRepositoriesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedGitRepositoryList
func (a *ExtrasApiService) ExtrasGitRepositoriesListExecute(r ApiExtrasGitRepositoriesListRequest) (*PaginatedGitRepositoryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedGitRepositoryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.branch != nil {
		t := *r.branch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch", parameterToString(t, "multi"))
		}
	}
	if r.branchIc != nil {
		t := *r.branchIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__ic", parameterToString(t, "multi"))
		}
	}
	if r.branchIe != nil {
		t := *r.branchIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__ie", parameterToString(t, "multi"))
		}
	}
	if r.branchIew != nil {
		t := *r.branchIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__iew", parameterToString(t, "multi"))
		}
	}
	if r.branchIre != nil {
		t := *r.branchIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__ire", parameterToString(t, "multi"))
		}
	}
	if r.branchIsw != nil {
		t := *r.branchIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__isw", parameterToString(t, "multi"))
		}
	}
	if r.branchN != nil {
		t := *r.branchN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__n", parameterToString(t, "multi"))
		}
	}
	if r.branchNic != nil {
		t := *r.branchNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__nic", parameterToString(t, "multi"))
		}
	}
	if r.branchNie != nil {
		t := *r.branchNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__nie", parameterToString(t, "multi"))
		}
	}
	if r.branchNiew != nil {
		t := *r.branchNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__niew", parameterToString(t, "multi"))
		}
	}
	if r.branchNire != nil {
		t := *r.branchNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__nire", parameterToString(t, "multi"))
		}
	}
	if r.branchNisw != nil {
		t := *r.branchNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__nisw", parameterToString(t, "multi"))
		}
	}
	if r.branchNre != nil {
		t := *r.branchNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__nre", parameterToString(t, "multi"))
		}
	}
	if r.branchRe != nil {
		t := *r.branchRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("branch__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("branch__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.providedContents != nil {
		t := *r.providedContents
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provided_contents", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provided_contents", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.remoteUrl != nil {
		t := *r.remoteUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlIc != nil {
		t := *r.remoteUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__ic", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlIe != nil {
		t := *r.remoteUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__ie", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlIew != nil {
		t := *r.remoteUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__iew", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlIre != nil {
		t := *r.remoteUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__ire", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlIsw != nil {
		t := *r.remoteUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__isw", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlN != nil {
		t := *r.remoteUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__n", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlNic != nil {
		t := *r.remoteUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__nic", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlNie != nil {
		t := *r.remoteUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__nie", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlNiew != nil {
		t := *r.remoteUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__niew", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlNire != nil {
		t := *r.remoteUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__nire", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlNisw != nil {
		t := *r.remoteUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__nisw", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlNre != nil {
		t := *r.remoteUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__nre", parameterToString(t, "multi"))
		}
	}
	if r.remoteUrlRe != nil {
		t := *r.remoteUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("remote_url__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("remote_url__re", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroup != nil {
		t := *r.secretsGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroupN != nil {
		t := *r.secretsGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group__n", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroupId != nil {
		t := *r.secretsGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group_id", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroupIdN != nil {
		t := *r.secretsGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWritableGitRepository *PatchedWritableGitRepository
}

func (r ApiExtrasGitRepositoriesPartialUpdateRequest) PatchedWritableGitRepository(patchedWritableGitRepository PatchedWritableGitRepository) ApiExtrasGitRepositoriesPartialUpdateRequest {
	r.patchedWritableGitRepository = &patchedWritableGitRepository
	return r
}

func (r ApiExtrasGitRepositoriesPartialUpdateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesPartialUpdateExecute(r)
}

/*
ExtrasGitRepositoriesPartialUpdate Method for ExtrasGitRepositoriesPartialUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesPartialUpdate(ctx context.Context, id string) ApiExtrasGitRepositoriesPartialUpdateRequest {
	return ApiExtrasGitRepositoriesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesPartialUpdateExecute(r ApiExtrasGitRepositoriesPartialUpdateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableGitRepository
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasGitRepositoriesRetrieveRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesRetrieveExecute(r)
}

/*
ExtrasGitRepositoriesRetrieve Method for ExtrasGitRepositoriesRetrieve

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesRetrieve(ctx context.Context, id string) ApiExtrasGitRepositoriesRetrieveRequest {
	return ApiExtrasGitRepositoriesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesRetrieveExecute(r ApiExtrasGitRepositoriesRetrieveRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesSyncCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	gitRepository *GitRepository
}

func (r ApiExtrasGitRepositoriesSyncCreateRequest) GitRepository(gitRepository GitRepository) ApiExtrasGitRepositoriesSyncCreateRequest {
	r.gitRepository = &gitRepository
	return r
}

func (r ApiExtrasGitRepositoriesSyncCreateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesSyncCreateExecute(r)
}

/*
ExtrasGitRepositoriesSyncCreate Method for ExtrasGitRepositoriesSyncCreate

Enqueue pull git repository and refresh data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesSyncCreateRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesSyncCreate(ctx context.Context, id string) ApiExtrasGitRepositoriesSyncCreateRequest {
	return ApiExtrasGitRepositoriesSyncCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesSyncCreateExecute(r ApiExtrasGitRepositoriesSyncCreateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesSyncCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/sync/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gitRepository == nil {
		return localVarReturnValue, nil, reportError("gitRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gitRepository
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGitRepositoriesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	writableGitRepository *WritableGitRepository
}

func (r ApiExtrasGitRepositoriesUpdateRequest) WritableGitRepository(writableGitRepository WritableGitRepository) ApiExtrasGitRepositoriesUpdateRequest {
	r.writableGitRepository = &writableGitRepository
	return r
}

func (r ApiExtrasGitRepositoriesUpdateRequest) Execute() (*GitRepository, *http.Response, error) {
	return r.ApiService.ExtrasGitRepositoriesUpdateExecute(r)
}

/*
ExtrasGitRepositoriesUpdate Method for ExtrasGitRepositoriesUpdate

Manage the use of Git repositories as external data sources.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this Git repository.
 @return ApiExtrasGitRepositoriesUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGitRepositoriesUpdate(ctx context.Context, id string) ApiExtrasGitRepositoriesUpdateRequest {
	return ApiExtrasGitRepositoriesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GitRepository
func (a *ExtrasApiService) ExtrasGitRepositoriesUpdateExecute(r ApiExtrasGitRepositoriesUpdateRequest) (*GitRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GitRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGitRepositoriesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/git-repositories/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableGitRepository == nil {
		return localVarReturnValue, nil, reportError("writableGitRepository is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableGitRepository
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasGraphqlQueriesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesBulkDestroyExecute(r)
}

/*
ExtrasGraphqlQueriesBulkDestroy Method for ExtrasGraphqlQueriesBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesBulkDestroy(ctx context.Context) ApiExtrasGraphqlQueriesBulkDestroyRequest {
	return ApiExtrasGraphqlQueriesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasGraphqlQueriesBulkDestroyExecute(r ApiExtrasGraphqlQueriesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedGraphQLQuery *PatchedGraphQLQuery
}

func (r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) PatchedGraphQLQuery(patchedGraphQLQuery PatchedGraphQLQuery) ApiExtrasGraphqlQueriesBulkPartialUpdateRequest {
	r.patchedGraphQLQuery = &patchedGraphQLQuery
	return r
}

func (r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesBulkPartialUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesBulkPartialUpdate Method for ExtrasGraphqlQueriesBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesBulkPartialUpdate(ctx context.Context) ApiExtrasGraphqlQueriesBulkPartialUpdateRequest {
	return ApiExtrasGraphqlQueriesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasApiService) ExtrasGraphqlQueriesBulkPartialUpdateExecute(r ApiExtrasGraphqlQueriesBulkPartialUpdateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedGraphQLQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	graphQLQuery *GraphQLQuery
}

func (r ApiExtrasGraphqlQueriesBulkUpdateRequest) GraphQLQuery(graphQLQuery GraphQLQuery) ApiExtrasGraphqlQueriesBulkUpdateRequest {
	r.graphQLQuery = &graphQLQuery
	return r
}

func (r ApiExtrasGraphqlQueriesBulkUpdateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesBulkUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesBulkUpdate Method for ExtrasGraphqlQueriesBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesBulkUpdate(ctx context.Context) ApiExtrasGraphqlQueriesBulkUpdateRequest {
	return ApiExtrasGraphqlQueriesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasApiService) ExtrasGraphqlQueriesBulkUpdateExecute(r ApiExtrasGraphqlQueriesBulkUpdateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.graphQLQuery == nil {
		return localVarReturnValue, nil, reportError("graphQLQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	graphQLQuery *GraphQLQuery
}

func (r ApiExtrasGraphqlQueriesCreateRequest) GraphQLQuery(graphQLQuery GraphQLQuery) ApiExtrasGraphqlQueriesCreateRequest {
	r.graphQLQuery = &graphQLQuery
	return r
}

func (r ApiExtrasGraphqlQueriesCreateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesCreateExecute(r)
}

/*
ExtrasGraphqlQueriesCreate Method for ExtrasGraphqlQueriesCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesCreateRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesCreate(ctx context.Context) ApiExtrasGraphqlQueriesCreateRequest {
	return ApiExtrasGraphqlQueriesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasApiService) ExtrasGraphqlQueriesCreateExecute(r ApiExtrasGraphqlQueriesCreateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.graphQLQuery == nil {
		return localVarReturnValue, nil, reportError("graphQLQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasGraphqlQueriesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesDestroyExecute(r)
}

/*
ExtrasGraphqlQueriesDestroy Method for ExtrasGraphqlQueriesDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesDestroyRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesDestroy(ctx context.Context, id string) ApiExtrasGraphqlQueriesDestroyRequest {
	return ApiExtrasGraphqlQueriesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasGraphqlQueriesDestroyExecute(r ApiExtrasGraphqlQueriesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

// Number of results to return per page.
func (r ApiExtrasGraphqlQueriesListRequest) Limit(limit int32) ApiExtrasGraphqlQueriesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Name(name []string) ApiExtrasGraphqlQueriesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIc(nameIc []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIe(nameIe []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIew(nameIew []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIre(nameIre []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameIsw(nameIsw []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameN(nameN []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNic(nameNic []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNie(nameNie []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNiew(nameNiew []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNire(nameNire []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNisw(nameNisw []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameNre(nameNre []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) NameRe(nameRe []string) ApiExtrasGraphqlQueriesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasGraphqlQueriesListRequest) Offset(offset int32) ApiExtrasGraphqlQueriesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasGraphqlQueriesListRequest) Q(q string) ApiExtrasGraphqlQueriesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Slug(slug []string) ApiExtrasGraphqlQueriesListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugIc(slugIc []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugIe(slugIe []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugIew(slugIew []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugIre(slugIre []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugIsw(slugIsw []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugN(slugN []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugNic(slugNic []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugNie(slugNie []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugNiew(slugNiew []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugNire(slugNire []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugNisw(slugNisw []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugNre(slugNre []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) SlugRe(slugRe []string) ApiExtrasGraphqlQueriesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasGraphqlQueriesListRequest) Execute() (*PaginatedGraphQLQueryList, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesListExecute(r)
}

/*
ExtrasGraphqlQueriesList Method for ExtrasGraphqlQueriesList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasGraphqlQueriesListRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesList(ctx context.Context) ApiExtrasGraphqlQueriesListRequest {
	return ApiExtrasGraphqlQueriesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedGraphQLQueryList
func (a *ExtrasApiService) ExtrasGraphqlQueriesListExecute(r ApiExtrasGraphqlQueriesListRequest) (*PaginatedGraphQLQueryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedGraphQLQueryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedGraphQLQuery *PatchedGraphQLQuery
}

func (r ApiExtrasGraphqlQueriesPartialUpdateRequest) PatchedGraphQLQuery(patchedGraphQLQuery PatchedGraphQLQuery) ApiExtrasGraphqlQueriesPartialUpdateRequest {
	r.patchedGraphQLQuery = &patchedGraphQLQuery
	return r
}

func (r ApiExtrasGraphqlQueriesPartialUpdateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesPartialUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesPartialUpdate Method for ExtrasGraphqlQueriesPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesPartialUpdate(ctx context.Context, id string) ApiExtrasGraphqlQueriesPartialUpdateRequest {
	return ApiExtrasGraphqlQueriesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasApiService) ExtrasGraphqlQueriesPartialUpdateExecute(r ApiExtrasGraphqlQueriesPartialUpdateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedGraphQLQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasGraphqlQueriesRetrieveRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesRetrieveExecute(r)
}

/*
ExtrasGraphqlQueriesRetrieve Method for ExtrasGraphqlQueriesRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesRetrieve(ctx context.Context, id string) ApiExtrasGraphqlQueriesRetrieveRequest {
	return ApiExtrasGraphqlQueriesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasApiService) ExtrasGraphqlQueriesRetrieveExecute(r ApiExtrasGraphqlQueriesRetrieveRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesRunCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	graphQLQueryInput *GraphQLQueryInput
}

func (r ApiExtrasGraphqlQueriesRunCreateRequest) GraphQLQueryInput(graphQLQueryInput GraphQLQueryInput) ApiExtrasGraphqlQueriesRunCreateRequest {
	r.graphQLQueryInput = &graphQLQueryInput
	return r
}

func (r ApiExtrasGraphqlQueriesRunCreateRequest) Execute() (*GraphQLQueryOutput, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesRunCreateExecute(r)
}

/*
ExtrasGraphqlQueriesRunCreate Method for ExtrasGraphqlQueriesRunCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesRunCreateRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesRunCreate(ctx context.Context, id string) ApiExtrasGraphqlQueriesRunCreateRequest {
	return ApiExtrasGraphqlQueriesRunCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQueryOutput
func (a *ExtrasApiService) ExtrasGraphqlQueriesRunCreateExecute(r ApiExtrasGraphqlQueriesRunCreateRequest) (*GraphQLQueryOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQueryOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesRunCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/run/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQueryInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasGraphqlQueriesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	graphQLQuery *GraphQLQuery
}

func (r ApiExtrasGraphqlQueriesUpdateRequest) GraphQLQuery(graphQLQuery GraphQLQuery) ApiExtrasGraphqlQueriesUpdateRequest {
	r.graphQLQuery = &graphQLQuery
	return r
}

func (r ApiExtrasGraphqlQueriesUpdateRequest) Execute() (*GraphQLQuery, *http.Response, error) {
	return r.ApiService.ExtrasGraphqlQueriesUpdateExecute(r)
}

/*
ExtrasGraphqlQueriesUpdate Method for ExtrasGraphqlQueriesUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this GraphQL query.
 @return ApiExtrasGraphqlQueriesUpdateRequest
*/
func (a *ExtrasApiService) ExtrasGraphqlQueriesUpdate(ctx context.Context, id string) ApiExtrasGraphqlQueriesUpdateRequest {
	return ApiExtrasGraphqlQueriesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GraphQLQuery
func (a *ExtrasApiService) ExtrasGraphqlQueriesUpdateExecute(r ApiExtrasGraphqlQueriesUpdateRequest) (*GraphQLQuery, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GraphQLQuery
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasGraphqlQueriesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/graphql-queries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.graphQLQuery == nil {
		return localVarReturnValue, nil, reportError("graphQLQuery is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.graphQLQuery
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasImageAttachmentsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkDestroyExecute(r)
}

/*
ExtrasImageAttachmentsBulkDestroy Method for ExtrasImageAttachmentsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsBulkDestroy(ctx context.Context) ApiExtrasImageAttachmentsBulkDestroyRequest {
	return ApiExtrasImageAttachmentsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasImageAttachmentsBulkDestroyExecute(r ApiExtrasImageAttachmentsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedImageAttachment *PatchedImageAttachment
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) PatchedImageAttachment(patchedImageAttachment PatchedImageAttachment) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	r.patchedImageAttachment = &patchedImageAttachment
	return r
}

func (r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkPartialUpdateExecute(r)
}

/*
ExtrasImageAttachmentsBulkPartialUpdate Method for ExtrasImageAttachmentsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsBulkPartialUpdate(ctx context.Context) ApiExtrasImageAttachmentsBulkPartialUpdateRequest {
	return ApiExtrasImageAttachmentsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasApiService) ExtrasImageAttachmentsBulkPartialUpdateExecute(r ApiExtrasImageAttachmentsBulkPartialUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedImageAttachment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	imageAttachment *ImageAttachment
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) ImageAttachment(imageAttachment ImageAttachment) ApiExtrasImageAttachmentsBulkUpdateRequest {
	r.imageAttachment = &imageAttachment
	return r
}

func (r ApiExtrasImageAttachmentsBulkUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsBulkUpdateExecute(r)
}

/*
ExtrasImageAttachmentsBulkUpdate Method for ExtrasImageAttachmentsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsBulkUpdate(ctx context.Context) ApiExtrasImageAttachmentsBulkUpdateRequest {
	return ApiExtrasImageAttachmentsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasApiService) ExtrasImageAttachmentsBulkUpdateExecute(r ApiExtrasImageAttachmentsBulkUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachment == nil {
		return localVarReturnValue, nil, reportError("imageAttachment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	imageAttachment *ImageAttachment
}

func (r ApiExtrasImageAttachmentsCreateRequest) ImageAttachment(imageAttachment ImageAttachment) ApiExtrasImageAttachmentsCreateRequest {
	r.imageAttachment = &imageAttachment
	return r
}

func (r ApiExtrasImageAttachmentsCreateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsCreateExecute(r)
}

/*
ExtrasImageAttachmentsCreate Method for ExtrasImageAttachmentsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsCreateRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsCreate(ctx context.Context) ApiExtrasImageAttachmentsCreateRequest {
	return ApiExtrasImageAttachmentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasApiService) ExtrasImageAttachmentsCreateExecute(r ApiExtrasImageAttachmentsCreateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachment == nil {
		return localVarReturnValue, nil, reportError("imageAttachment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasImageAttachmentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsDestroyExecute(r)
}

/*
ExtrasImageAttachmentsDestroy Method for ExtrasImageAttachmentsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsDestroy(ctx context.Context, id string) ApiExtrasImageAttachmentsDestroyRequest {
	return ApiExtrasImageAttachmentsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasImageAttachmentsDestroyExecute(r ApiExtrasImageAttachmentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	contentType *string
	contentTypeN *string
	contentTypeId *int32
	contentTypeIdN *int32
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	objectId *[]string
	objectIdIc *[]string
	objectIdIe *[]string
	objectIdIew *[]string
	objectIdIre *[]string
	objectIdIsw *[]string
	objectIdN *[]string
	objectIdNic *[]string
	objectIdNie *[]string
	objectIdNiew *[]string
	objectIdNire *[]string
	objectIdNisw *[]string
	objectIdNre *[]string
	objectIdRe *[]string
	offset *int32
}

func (r ApiExtrasImageAttachmentsListRequest) ContentType(contentType string) ApiExtrasImageAttachmentsListRequest {
	r.contentType = &contentType
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ContentTypeN(contentTypeN string) ApiExtrasImageAttachmentsListRequest {
	r.contentTypeN = &contentTypeN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ContentTypeId(contentTypeId int32) ApiExtrasImageAttachmentsListRequest {
	r.contentTypeId = &contentTypeId
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ContentTypeIdN(contentTypeIdN int32) ApiExtrasImageAttachmentsListRequest {
	r.contentTypeIdN = &contentTypeIdN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Id(id []string) ApiExtrasImageAttachmentsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIc(idIc []string) ApiExtrasImageAttachmentsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIe(idIe []string) ApiExtrasImageAttachmentsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIew(idIew []string) ApiExtrasImageAttachmentsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIre(idIre []string) ApiExtrasImageAttachmentsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdIsw(idIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdN(idN []string) ApiExtrasImageAttachmentsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNic(idNic []string) ApiExtrasImageAttachmentsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNie(idNie []string) ApiExtrasImageAttachmentsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNiew(idNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNire(idNire []string) ApiExtrasImageAttachmentsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNisw(idNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdNre(idNre []string) ApiExtrasImageAttachmentsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) IdRe(idRe []string) ApiExtrasImageAttachmentsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasImageAttachmentsListRequest) Limit(limit int32) ApiExtrasImageAttachmentsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Name(name []string) ApiExtrasImageAttachmentsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIc(nameIc []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIe(nameIe []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIew(nameIew []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIre(nameIre []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameIsw(nameIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameN(nameN []string) ApiExtrasImageAttachmentsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNic(nameNic []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNie(nameNie []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNiew(nameNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNire(nameNire []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNisw(nameNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameNre(nameNre []string) ApiExtrasImageAttachmentsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) NameRe(nameRe []string) ApiExtrasImageAttachmentsListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectId(objectId []string) ApiExtrasImageAttachmentsListRequest {
	r.objectId = &objectId
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIc(objectIdIc []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIc = &objectIdIc
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIe(objectIdIe []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIe = &objectIdIe
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIew(objectIdIew []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIew = &objectIdIew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIre(objectIdIre []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIre = &objectIdIre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdIsw(objectIdIsw []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdIsw = &objectIdIsw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdN(objectIdN []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdN = &objectIdN
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNic(objectIdNic []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNic = &objectIdNic
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNie(objectIdNie []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNie = &objectIdNie
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNiew(objectIdNiew []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNiew = &objectIdNiew
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNire(objectIdNire []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNire = &objectIdNire
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNisw(objectIdNisw []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNisw = &objectIdNisw
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdNre(objectIdNre []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdNre = &objectIdNre
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) ObjectIdRe(objectIdRe []string) ApiExtrasImageAttachmentsListRequest {
	r.objectIdRe = &objectIdRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasImageAttachmentsListRequest) Offset(offset int32) ApiExtrasImageAttachmentsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasImageAttachmentsListRequest) Execute() (*PaginatedImageAttachmentList, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsListExecute(r)
}

/*
ExtrasImageAttachmentsList Method for ExtrasImageAttachmentsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasImageAttachmentsListRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsList(ctx context.Context) ApiExtrasImageAttachmentsListRequest {
	return ApiExtrasImageAttachmentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedImageAttachmentList
func (a *ExtrasApiService) ExtrasImageAttachmentsListExecute(r ApiExtrasImageAttachmentsListRequest) (*PaginatedImageAttachmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedImageAttachmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentType != nil {
		localVarQueryParams.Add("content_type", parameterToString(*r.contentType, ""))
	}
	if r.contentTypeN != nil {
		localVarQueryParams.Add("content_type__n", parameterToString(*r.contentTypeN, ""))
	}
	if r.contentTypeId != nil {
		localVarQueryParams.Add("content_type_id", parameterToString(*r.contentTypeId, ""))
	}
	if r.contentTypeIdN != nil {
		localVarQueryParams.Add("content_type_id__n", parameterToString(*r.contentTypeIdN, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.objectId != nil {
		t := *r.objectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id", parameterToString(t, "multi"))
		}
	}
	if r.objectIdIc != nil {
		t := *r.objectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.objectIdIe != nil {
		t := *r.objectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.objectIdIew != nil {
		t := *r.objectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.objectIdIre != nil {
		t := *r.objectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.objectIdIsw != nil {
		t := *r.objectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.objectIdN != nil {
		t := *r.objectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__n", parameterToString(t, "multi"))
		}
	}
	if r.objectIdNic != nil {
		t := *r.objectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.objectIdNie != nil {
		t := *r.objectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.objectIdNiew != nil {
		t := *r.objectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.objectIdNire != nil {
		t := *r.objectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.objectIdNisw != nil {
		t := *r.objectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.objectIdNre != nil {
		t := *r.objectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.objectIdRe != nil {
		t := *r.objectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_id__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedImageAttachment *PatchedImageAttachment
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) PatchedImageAttachment(patchedImageAttachment PatchedImageAttachment) ApiExtrasImageAttachmentsPartialUpdateRequest {
	r.patchedImageAttachment = &patchedImageAttachment
	return r
}

func (r ApiExtrasImageAttachmentsPartialUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsPartialUpdateExecute(r)
}

/*
ExtrasImageAttachmentsPartialUpdate Method for ExtrasImageAttachmentsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsPartialUpdate(ctx context.Context, id string) ApiExtrasImageAttachmentsPartialUpdateRequest {
	return ApiExtrasImageAttachmentsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasApiService) ExtrasImageAttachmentsPartialUpdateExecute(r ApiExtrasImageAttachmentsPartialUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedImageAttachment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasImageAttachmentsRetrieveRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsRetrieveExecute(r)
}

/*
ExtrasImageAttachmentsRetrieve Method for ExtrasImageAttachmentsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsRetrieve(ctx context.Context, id string) ApiExtrasImageAttachmentsRetrieveRequest {
	return ApiExtrasImageAttachmentsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasApiService) ExtrasImageAttachmentsRetrieveExecute(r ApiExtrasImageAttachmentsRetrieveRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasImageAttachmentsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	imageAttachment *ImageAttachment
}

func (r ApiExtrasImageAttachmentsUpdateRequest) ImageAttachment(imageAttachment ImageAttachment) ApiExtrasImageAttachmentsUpdateRequest {
	r.imageAttachment = &imageAttachment
	return r
}

func (r ApiExtrasImageAttachmentsUpdateRequest) Execute() (*ImageAttachment, *http.Response, error) {
	return r.ApiService.ExtrasImageAttachmentsUpdateExecute(r)
}

/*
ExtrasImageAttachmentsUpdate Method for ExtrasImageAttachmentsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this image attachment.
 @return ApiExtrasImageAttachmentsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasImageAttachmentsUpdate(ctx context.Context, id string) ApiExtrasImageAttachmentsUpdateRequest {
	return ApiExtrasImageAttachmentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ImageAttachment
func (a *ExtrasApiService) ExtrasImageAttachmentsUpdateExecute(r ApiExtrasImageAttachmentsUpdateRequest) (*ImageAttachment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ImageAttachment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasImageAttachmentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/image-attachments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageAttachment == nil {
		return localVarReturnValue, nil, reportError("imageAttachment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.imageAttachment
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobLogsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	absoluteUrl *[]string
	absoluteUrlIc *[]string
	absoluteUrlIe *[]string
	absoluteUrlIew *[]string
	absoluteUrlIre *[]string
	absoluteUrlIsw *[]string
	absoluteUrlN *[]string
	absoluteUrlNic *[]string
	absoluteUrlNie *[]string
	absoluteUrlNiew *[]string
	absoluteUrlNire *[]string
	absoluteUrlNisw *[]string
	absoluteUrlNre *[]string
	absoluteUrlRe *[]string
	created *[]time.Time
	createdGt *[]time.Time
	createdGte *[]time.Time
	createdLt *[]time.Time
	createdLte *[]time.Time
	createdN *[]time.Time
	grouping *[]string
	groupingIc *[]string
	groupingIe *[]string
	groupingIew *[]string
	groupingIre *[]string
	groupingIsw *[]string
	groupingN *[]string
	groupingNic *[]string
	groupingNie *[]string
	groupingNiew *[]string
	groupingNire *[]string
	groupingNisw *[]string
	groupingNre *[]string
	groupingRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	jobResult *string
	jobResultN *string
	limit *int32
	logLevel *string
	logLevelN *string
	logObject *[]string
	logObjectIc *[]string
	logObjectIe *[]string
	logObjectIew *[]string
	logObjectIre *[]string
	logObjectIsw *[]string
	logObjectN *[]string
	logObjectNic *[]string
	logObjectNie *[]string
	logObjectNiew *[]string
	logObjectNire *[]string
	logObjectNisw *[]string
	logObjectNre *[]string
	logObjectRe *[]string
	message *[]string
	messageIc *[]string
	messageIe *[]string
	messageIew *[]string
	messageIre *[]string
	messageIsw *[]string
	messageN *[]string
	messageNic *[]string
	messageNie *[]string
	messageNiew *[]string
	messageNire *[]string
	messageNisw *[]string
	messageNre *[]string
	messageRe *[]string
	offset *int32
	q *string
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrl(absoluteUrl []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrl = &absoluteUrl
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIc(absoluteUrlIc []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIc = &absoluteUrlIc
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIe(absoluteUrlIe []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIe = &absoluteUrlIe
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIew(absoluteUrlIew []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIew = &absoluteUrlIew
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIre(absoluteUrlIre []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIre = &absoluteUrlIre
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlIsw(absoluteUrlIsw []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlIsw = &absoluteUrlIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlN(absoluteUrlN []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlN = &absoluteUrlN
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNic(absoluteUrlNic []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNic = &absoluteUrlNic
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNie(absoluteUrlNie []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNie = &absoluteUrlNie
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNiew(absoluteUrlNiew []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNiew = &absoluteUrlNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNire(absoluteUrlNire []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNire = &absoluteUrlNire
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNisw(absoluteUrlNisw []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNisw = &absoluteUrlNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlNre(absoluteUrlNre []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlNre = &absoluteUrlNre
	return r
}

func (r ApiExtrasJobLogsListRequest) AbsoluteUrlRe(absoluteUrlRe []string) ApiExtrasJobLogsListRequest {
	r.absoluteUrlRe = &absoluteUrlRe
	return r
}

func (r ApiExtrasJobLogsListRequest) Created(created []time.Time) ApiExtrasJobLogsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedGt(createdGt []time.Time) ApiExtrasJobLogsListRequest {
	r.createdGt = &createdGt
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedGte(createdGte []time.Time) ApiExtrasJobLogsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedLt(createdLt []time.Time) ApiExtrasJobLogsListRequest {
	r.createdLt = &createdLt
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedLte(createdLte []time.Time) ApiExtrasJobLogsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasJobLogsListRequest) CreatedN(createdN []time.Time) ApiExtrasJobLogsListRequest {
	r.createdN = &createdN
	return r
}

func (r ApiExtrasJobLogsListRequest) Grouping(grouping []string) ApiExtrasJobLogsListRequest {
	r.grouping = &grouping
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIc(groupingIc []string) ApiExtrasJobLogsListRequest {
	r.groupingIc = &groupingIc
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIe(groupingIe []string) ApiExtrasJobLogsListRequest {
	r.groupingIe = &groupingIe
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIew(groupingIew []string) ApiExtrasJobLogsListRequest {
	r.groupingIew = &groupingIew
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIre(groupingIre []string) ApiExtrasJobLogsListRequest {
	r.groupingIre = &groupingIre
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingIsw(groupingIsw []string) ApiExtrasJobLogsListRequest {
	r.groupingIsw = &groupingIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingN(groupingN []string) ApiExtrasJobLogsListRequest {
	r.groupingN = &groupingN
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNic(groupingNic []string) ApiExtrasJobLogsListRequest {
	r.groupingNic = &groupingNic
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNie(groupingNie []string) ApiExtrasJobLogsListRequest {
	r.groupingNie = &groupingNie
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNiew(groupingNiew []string) ApiExtrasJobLogsListRequest {
	r.groupingNiew = &groupingNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNire(groupingNire []string) ApiExtrasJobLogsListRequest {
	r.groupingNire = &groupingNire
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNisw(groupingNisw []string) ApiExtrasJobLogsListRequest {
	r.groupingNisw = &groupingNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingNre(groupingNre []string) ApiExtrasJobLogsListRequest {
	r.groupingNre = &groupingNre
	return r
}

func (r ApiExtrasJobLogsListRequest) GroupingRe(groupingRe []string) ApiExtrasJobLogsListRequest {
	r.groupingRe = &groupingRe
	return r
}

func (r ApiExtrasJobLogsListRequest) Id(id []string) ApiExtrasJobLogsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIc(idIc []string) ApiExtrasJobLogsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIe(idIe []string) ApiExtrasJobLogsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIew(idIew []string) ApiExtrasJobLogsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIre(idIre []string) ApiExtrasJobLogsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobLogsListRequest) IdIsw(idIsw []string) ApiExtrasJobLogsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) IdN(idN []string) ApiExtrasJobLogsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNic(idNic []string) ApiExtrasJobLogsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNie(idNie []string) ApiExtrasJobLogsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNiew(idNiew []string) ApiExtrasJobLogsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNire(idNire []string) ApiExtrasJobLogsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNisw(idNisw []string) ApiExtrasJobLogsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) IdNre(idNre []string) ApiExtrasJobLogsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobLogsListRequest) IdRe(idRe []string) ApiExtrasJobLogsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasJobLogsListRequest) JobResult(jobResult string) ApiExtrasJobLogsListRequest {
	r.jobResult = &jobResult
	return r
}

func (r ApiExtrasJobLogsListRequest) JobResultN(jobResultN string) ApiExtrasJobLogsListRequest {
	r.jobResultN = &jobResultN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobLogsListRequest) Limit(limit int32) ApiExtrasJobLogsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevel(logLevel string) ApiExtrasJobLogsListRequest {
	r.logLevel = &logLevel
	return r
}

func (r ApiExtrasJobLogsListRequest) LogLevelN(logLevelN string) ApiExtrasJobLogsListRequest {
	r.logLevelN = &logLevelN
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObject(logObject []string) ApiExtrasJobLogsListRequest {
	r.logObject = &logObject
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIc(logObjectIc []string) ApiExtrasJobLogsListRequest {
	r.logObjectIc = &logObjectIc
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIe(logObjectIe []string) ApiExtrasJobLogsListRequest {
	r.logObjectIe = &logObjectIe
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIew(logObjectIew []string) ApiExtrasJobLogsListRequest {
	r.logObjectIew = &logObjectIew
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIre(logObjectIre []string) ApiExtrasJobLogsListRequest {
	r.logObjectIre = &logObjectIre
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectIsw(logObjectIsw []string) ApiExtrasJobLogsListRequest {
	r.logObjectIsw = &logObjectIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectN(logObjectN []string) ApiExtrasJobLogsListRequest {
	r.logObjectN = &logObjectN
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNic(logObjectNic []string) ApiExtrasJobLogsListRequest {
	r.logObjectNic = &logObjectNic
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNie(logObjectNie []string) ApiExtrasJobLogsListRequest {
	r.logObjectNie = &logObjectNie
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNiew(logObjectNiew []string) ApiExtrasJobLogsListRequest {
	r.logObjectNiew = &logObjectNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNire(logObjectNire []string) ApiExtrasJobLogsListRequest {
	r.logObjectNire = &logObjectNire
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNisw(logObjectNisw []string) ApiExtrasJobLogsListRequest {
	r.logObjectNisw = &logObjectNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectNre(logObjectNre []string) ApiExtrasJobLogsListRequest {
	r.logObjectNre = &logObjectNre
	return r
}

func (r ApiExtrasJobLogsListRequest) LogObjectRe(logObjectRe []string) ApiExtrasJobLogsListRequest {
	r.logObjectRe = &logObjectRe
	return r
}

func (r ApiExtrasJobLogsListRequest) Message(message []string) ApiExtrasJobLogsListRequest {
	r.message = &message
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIc(messageIc []string) ApiExtrasJobLogsListRequest {
	r.messageIc = &messageIc
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIe(messageIe []string) ApiExtrasJobLogsListRequest {
	r.messageIe = &messageIe
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIew(messageIew []string) ApiExtrasJobLogsListRequest {
	r.messageIew = &messageIew
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIre(messageIre []string) ApiExtrasJobLogsListRequest {
	r.messageIre = &messageIre
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageIsw(messageIsw []string) ApiExtrasJobLogsListRequest {
	r.messageIsw = &messageIsw
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageN(messageN []string) ApiExtrasJobLogsListRequest {
	r.messageN = &messageN
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNic(messageNic []string) ApiExtrasJobLogsListRequest {
	r.messageNic = &messageNic
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNie(messageNie []string) ApiExtrasJobLogsListRequest {
	r.messageNie = &messageNie
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNiew(messageNiew []string) ApiExtrasJobLogsListRequest {
	r.messageNiew = &messageNiew
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNire(messageNire []string) ApiExtrasJobLogsListRequest {
	r.messageNire = &messageNire
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNisw(messageNisw []string) ApiExtrasJobLogsListRequest {
	r.messageNisw = &messageNisw
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageNre(messageNre []string) ApiExtrasJobLogsListRequest {
	r.messageNre = &messageNre
	return r
}

func (r ApiExtrasJobLogsListRequest) MessageRe(messageRe []string) ApiExtrasJobLogsListRequest {
	r.messageRe = &messageRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobLogsListRequest) Offset(offset int32) ApiExtrasJobLogsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobLogsListRequest) Q(q string) ApiExtrasJobLogsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasJobLogsListRequest) Execute() (*PaginatedJobLogEntryList, *http.Response, error) {
	return r.ApiService.ExtrasJobLogsListExecute(r)
}

/*
ExtrasJobLogsList Method for ExtrasJobLogsList

Retrieve a list of job log entries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobLogsListRequest
*/
func (a *ExtrasApiService) ExtrasJobLogsList(ctx context.Context) ApiExtrasJobLogsListRequest {
	return ApiExtrasJobLogsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobLogEntryList
func (a *ExtrasApiService) ExtrasJobLogsListExecute(r ApiExtrasJobLogsListRequest) (*PaginatedJobLogEntryList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobLogEntryList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobLogsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-logs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.absoluteUrl != nil {
		t := *r.absoluteUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlIc != nil {
		t := *r.absoluteUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__ic", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlIe != nil {
		t := *r.absoluteUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__ie", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlIew != nil {
		t := *r.absoluteUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__iew", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlIre != nil {
		t := *r.absoluteUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__ire", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlIsw != nil {
		t := *r.absoluteUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__isw", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlN != nil {
		t := *r.absoluteUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__n", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlNic != nil {
		t := *r.absoluteUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__nic", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlNie != nil {
		t := *r.absoluteUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__nie", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlNiew != nil {
		t := *r.absoluteUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__niew", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlNire != nil {
		t := *r.absoluteUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__nire", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlNisw != nil {
		t := *r.absoluteUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__nisw", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlNre != nil {
		t := *r.absoluteUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__nre", parameterToString(t, "multi"))
		}
	}
	if r.absoluteUrlRe != nil {
		t := *r.absoluteUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("absolute_url__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("absolute_url__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		t := *r.created
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("created", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("created", parameterToString(t, "multi"))
		}
	}
	if r.createdGt != nil {
		t := *r.createdGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("created__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("created__gt", parameterToString(t, "multi"))
		}
	}
	if r.createdGte != nil {
		t := *r.createdGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("created__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("created__gte", parameterToString(t, "multi"))
		}
	}
	if r.createdLt != nil {
		t := *r.createdLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("created__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("created__lt", parameterToString(t, "multi"))
		}
	}
	if r.createdLte != nil {
		t := *r.createdLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("created__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("created__lte", parameterToString(t, "multi"))
		}
	}
	if r.createdN != nil {
		t := *r.createdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("created__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("created__n", parameterToString(t, "multi"))
		}
	}
	if r.grouping != nil {
		t := *r.grouping
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping", parameterToString(t, "multi"))
		}
	}
	if r.groupingIc != nil {
		t := *r.groupingIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__ic", parameterToString(t, "multi"))
		}
	}
	if r.groupingIe != nil {
		t := *r.groupingIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__ie", parameterToString(t, "multi"))
		}
	}
	if r.groupingIew != nil {
		t := *r.groupingIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__iew", parameterToString(t, "multi"))
		}
	}
	if r.groupingIre != nil {
		t := *r.groupingIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__ire", parameterToString(t, "multi"))
		}
	}
	if r.groupingIsw != nil {
		t := *r.groupingIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__isw", parameterToString(t, "multi"))
		}
	}
	if r.groupingN != nil {
		t := *r.groupingN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__n", parameterToString(t, "multi"))
		}
	}
	if r.groupingNic != nil {
		t := *r.groupingNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__nic", parameterToString(t, "multi"))
		}
	}
	if r.groupingNie != nil {
		t := *r.groupingNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__nie", parameterToString(t, "multi"))
		}
	}
	if r.groupingNiew != nil {
		t := *r.groupingNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__niew", parameterToString(t, "multi"))
		}
	}
	if r.groupingNire != nil {
		t := *r.groupingNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__nire", parameterToString(t, "multi"))
		}
	}
	if r.groupingNisw != nil {
		t := *r.groupingNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__nisw", parameterToString(t, "multi"))
		}
	}
	if r.groupingNre != nil {
		t := *r.groupingNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__nre", parameterToString(t, "multi"))
		}
	}
	if r.groupingRe != nil {
		t := *r.groupingRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("grouping__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("grouping__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.jobResult != nil {
		localVarQueryParams.Add("job_result", parameterToString(*r.jobResult, ""))
	}
	if r.jobResultN != nil {
		localVarQueryParams.Add("job_result__n", parameterToString(*r.jobResultN, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.logLevel != nil {
		localVarQueryParams.Add("log_level", parameterToString(*r.logLevel, ""))
	}
	if r.logLevelN != nil {
		localVarQueryParams.Add("log_level__n", parameterToString(*r.logLevelN, ""))
	}
	if r.logObject != nil {
		t := *r.logObject
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object", parameterToString(t, "multi"))
		}
	}
	if r.logObjectIc != nil {
		t := *r.logObjectIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__ic", parameterToString(t, "multi"))
		}
	}
	if r.logObjectIe != nil {
		t := *r.logObjectIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__ie", parameterToString(t, "multi"))
		}
	}
	if r.logObjectIew != nil {
		t := *r.logObjectIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__iew", parameterToString(t, "multi"))
		}
	}
	if r.logObjectIre != nil {
		t := *r.logObjectIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__ire", parameterToString(t, "multi"))
		}
	}
	if r.logObjectIsw != nil {
		t := *r.logObjectIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__isw", parameterToString(t, "multi"))
		}
	}
	if r.logObjectN != nil {
		t := *r.logObjectN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__n", parameterToString(t, "multi"))
		}
	}
	if r.logObjectNic != nil {
		t := *r.logObjectNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__nic", parameterToString(t, "multi"))
		}
	}
	if r.logObjectNie != nil {
		t := *r.logObjectNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__nie", parameterToString(t, "multi"))
		}
	}
	if r.logObjectNiew != nil {
		t := *r.logObjectNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__niew", parameterToString(t, "multi"))
		}
	}
	if r.logObjectNire != nil {
		t := *r.logObjectNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__nire", parameterToString(t, "multi"))
		}
	}
	if r.logObjectNisw != nil {
		t := *r.logObjectNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__nisw", parameterToString(t, "multi"))
		}
	}
	if r.logObjectNre != nil {
		t := *r.logObjectNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__nre", parameterToString(t, "multi"))
		}
	}
	if r.logObjectRe != nil {
		t := *r.logObjectRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("log_object__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("log_object__re", parameterToString(t, "multi"))
		}
	}
	if r.message != nil {
		t := *r.message
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message", parameterToString(t, "multi"))
		}
	}
	if r.messageIc != nil {
		t := *r.messageIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__ic", parameterToString(t, "multi"))
		}
	}
	if r.messageIe != nil {
		t := *r.messageIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__ie", parameterToString(t, "multi"))
		}
	}
	if r.messageIew != nil {
		t := *r.messageIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__iew", parameterToString(t, "multi"))
		}
	}
	if r.messageIre != nil {
		t := *r.messageIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__ire", parameterToString(t, "multi"))
		}
	}
	if r.messageIsw != nil {
		t := *r.messageIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__isw", parameterToString(t, "multi"))
		}
	}
	if r.messageN != nil {
		t := *r.messageN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__n", parameterToString(t, "multi"))
		}
	}
	if r.messageNic != nil {
		t := *r.messageNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__nic", parameterToString(t, "multi"))
		}
	}
	if r.messageNie != nil {
		t := *r.messageNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__nie", parameterToString(t, "multi"))
		}
	}
	if r.messageNiew != nil {
		t := *r.messageNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__niew", parameterToString(t, "multi"))
		}
	}
	if r.messageNire != nil {
		t := *r.messageNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__nire", parameterToString(t, "multi"))
		}
	}
	if r.messageNisw != nil {
		t := *r.messageNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__nisw", parameterToString(t, "multi"))
		}
	}
	if r.messageNre != nil {
		t := *r.messageNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__nre", parameterToString(t, "multi"))
		}
	}
	if r.messageRe != nil {
		t := *r.messageRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("message__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("message__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobLogsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasJobLogsRetrieveRequest) Execute() (*JobLogEntry, *http.Response, error) {
	return r.ApiService.ExtrasJobLogsRetrieveExecute(r)
}

/*
ExtrasJobLogsRetrieve Method for ExtrasJobLogsRetrieve

Retrieve a list of job log entries.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job log entry.
 @return ApiExtrasJobLogsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasJobLogsRetrieve(ctx context.Context, id string) ApiExtrasJobLogsRetrieveRequest {
	return ApiExtrasJobLogsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobLogEntry
func (a *ExtrasApiService) ExtrasJobLogsRetrieveExecute(r ApiExtrasJobLogsRetrieveRequest) (*JobLogEntry, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobLogEntry
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobLogsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-logs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasJobResultsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobResultsBulkDestroyExecute(r)
}

/*
ExtrasJobResultsBulkDestroy Method for ExtrasJobResultsBulkDestroy

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsBulkDestroy(ctx context.Context) ApiExtrasJobResultsBulkDestroyRequest {
	return ApiExtrasJobResultsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasJobResultsBulkDestroyExecute(r ApiExtrasJobResultsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobResultsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedJobResult *PatchedJobResult
}

func (r ApiExtrasJobResultsBulkPartialUpdateRequest) PatchedJobResult(patchedJobResult PatchedJobResult) ApiExtrasJobResultsBulkPartialUpdateRequest {
	r.patchedJobResult = &patchedJobResult
	return r
}

func (r ApiExtrasJobResultsBulkPartialUpdateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsBulkPartialUpdateExecute(r)
}

/*
ExtrasJobResultsBulkPartialUpdate Method for ExtrasJobResultsBulkPartialUpdate

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsBulkPartialUpdate(ctx context.Context) ApiExtrasJobResultsBulkPartialUpdateRequest {
	return ApiExtrasJobResultsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsBulkPartialUpdateExecute(r ApiExtrasJobResultsBulkPartialUpdateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJobResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	jobResult *JobResult
}

func (r ApiExtrasJobResultsBulkUpdateRequest) JobResult(jobResult JobResult) ApiExtrasJobResultsBulkUpdateRequest {
	r.jobResult = &jobResult
	return r
}

func (r ApiExtrasJobResultsBulkUpdateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsBulkUpdateExecute(r)
}

/*
ExtrasJobResultsBulkUpdate Method for ExtrasJobResultsBulkUpdate

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsBulkUpdate(ctx context.Context) ApiExtrasJobResultsBulkUpdateRequest {
	return ApiExtrasJobResultsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsBulkUpdateExecute(r ApiExtrasJobResultsBulkUpdateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobResult == nil {
		return localVarReturnValue, nil, reportError("jobResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	jobResult *JobResult
}

func (r ApiExtrasJobResultsCreateRequest) JobResult(jobResult JobResult) ApiExtrasJobResultsCreateRequest {
	r.jobResult = &jobResult
	return r
}

func (r ApiExtrasJobResultsCreateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsCreateExecute(r)
}

/*
ExtrasJobResultsCreate Method for ExtrasJobResultsCreate

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsCreateRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsCreate(ctx context.Context) ApiExtrasJobResultsCreateRequest {
	return ApiExtrasJobResultsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsCreateExecute(r ApiExtrasJobResultsCreateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobResult == nil {
		return localVarReturnValue, nil, reportError("jobResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasJobResultsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobResultsDestroyExecute(r)
}

/*
ExtrasJobResultsDestroy Method for ExtrasJobResultsDestroy

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsDestroy(ctx context.Context, id string) ApiExtrasJobResultsDestroyRequest {
	return ApiExtrasJobResultsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasJobResultsDestroyExecute(r ApiExtrasJobResultsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobResultsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	completed *time.Time
	created *time.Time
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	jobModel *[]string
	jobModelN *[]string
	jobModelId *[]*string
	jobModelIdN *[]*string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	objType *string
	objTypeN *string
	offset *int32
	q *string
	status *[]string
	statusN *[]string
	user *string
	userN *string
}

func (r ApiExtrasJobResultsListRequest) Completed(completed time.Time) ApiExtrasJobResultsListRequest {
	r.completed = &completed
	return r
}

func (r ApiExtrasJobResultsListRequest) Created(created time.Time) ApiExtrasJobResultsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasJobResultsListRequest) Id(id []string) ApiExtrasJobResultsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIc(idIc []string) ApiExtrasJobResultsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIe(idIe []string) ApiExtrasJobResultsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIew(idIew []string) ApiExtrasJobResultsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIre(idIre []string) ApiExtrasJobResultsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasJobResultsListRequest) IdIsw(idIsw []string) ApiExtrasJobResultsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasJobResultsListRequest) IdN(idN []string) ApiExtrasJobResultsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNic(idNic []string) ApiExtrasJobResultsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNie(idNie []string) ApiExtrasJobResultsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNiew(idNiew []string) ApiExtrasJobResultsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNire(idNire []string) ApiExtrasJobResultsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNisw(idNisw []string) ApiExtrasJobResultsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasJobResultsListRequest) IdNre(idNre []string) ApiExtrasJobResultsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasJobResultsListRequest) IdRe(idRe []string) ApiExtrasJobResultsListRequest {
	r.idRe = &idRe
	return r
}

// Job (slug)
func (r ApiExtrasJobResultsListRequest) JobModel(jobModel []string) ApiExtrasJobResultsListRequest {
	r.jobModel = &jobModel
	return r
}

// Job (slug)
func (r ApiExtrasJobResultsListRequest) JobModelN(jobModelN []string) ApiExtrasJobResultsListRequest {
	r.jobModelN = &jobModelN
	return r
}

// Job (ID)
func (r ApiExtrasJobResultsListRequest) JobModelId(jobModelId []*string) ApiExtrasJobResultsListRequest {
	r.jobModelId = &jobModelId
	return r
}

// Job (ID)
func (r ApiExtrasJobResultsListRequest) JobModelIdN(jobModelIdN []*string) ApiExtrasJobResultsListRequest {
	r.jobModelIdN = &jobModelIdN
	return r
}

// Number of results to return per page.
func (r ApiExtrasJobResultsListRequest) Limit(limit int32) ApiExtrasJobResultsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasJobResultsListRequest) Name(name []string) ApiExtrasJobResultsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIc(nameIc []string) ApiExtrasJobResultsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIe(nameIe []string) ApiExtrasJobResultsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIew(nameIew []string) ApiExtrasJobResultsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIre(nameIre []string) ApiExtrasJobResultsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasJobResultsListRequest) NameIsw(nameIsw []string) ApiExtrasJobResultsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasJobResultsListRequest) NameN(nameN []string) ApiExtrasJobResultsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNic(nameNic []string) ApiExtrasJobResultsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNie(nameNie []string) ApiExtrasJobResultsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNiew(nameNiew []string) ApiExtrasJobResultsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNire(nameNire []string) ApiExtrasJobResultsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNisw(nameNisw []string) ApiExtrasJobResultsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasJobResultsListRequest) NameNre(nameNre []string) ApiExtrasJobResultsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasJobResultsListRequest) NameRe(nameRe []string) ApiExtrasJobResultsListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiExtrasJobResultsListRequest) ObjType(objType string) ApiExtrasJobResultsListRequest {
	r.objType = &objType
	return r
}

func (r ApiExtrasJobResultsListRequest) ObjTypeN(objTypeN string) ApiExtrasJobResultsListRequest {
	r.objTypeN = &objTypeN
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobResultsListRequest) Offset(offset int32) ApiExtrasJobResultsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasJobResultsListRequest) Q(q string) ApiExtrasJobResultsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasJobResultsListRequest) Status(status []string) ApiExtrasJobResultsListRequest {
	r.status = &status
	return r
}

func (r ApiExtrasJobResultsListRequest) StatusN(statusN []string) ApiExtrasJobResultsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiExtrasJobResultsListRequest) User(user string) ApiExtrasJobResultsListRequest {
	r.user = &user
	return r
}

func (r ApiExtrasJobResultsListRequest) UserN(userN string) ApiExtrasJobResultsListRequest {
	r.userN = &userN
	return r
}

func (r ApiExtrasJobResultsListRequest) Execute() (*PaginatedJobResultList, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsListExecute(r)
}

/*
ExtrasJobResultsList Method for ExtrasJobResultsList

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobResultsListRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsList(ctx context.Context) ApiExtrasJobResultsListRequest {
	return ApiExtrasJobResultsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobResultList
func (a *ExtrasApiService) ExtrasJobResultsListExecute(r ApiExtrasJobResultsListRequest) (*PaginatedJobResultList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobResultList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.completed != nil {
		localVarQueryParams.Add("completed", parameterToString(*r.completed, ""))
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.jobModel != nil {
		t := *r.jobModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model", parameterToString(t, "multi"))
		}
	}
	if r.jobModelN != nil {
		t := *r.jobModelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model__n", parameterToString(t, "multi"))
		}
	}
	if r.jobModelId != nil {
		t := *r.jobModelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model_id", parameterToString(t, "multi"))
		}
	}
	if r.jobModelIdN != nil {
		t := *r.jobModelIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model_id__n", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.objType != nil {
		localVarQueryParams.Add("obj_type", parameterToString(*r.objType, ""))
	}
	if r.objTypeN != nil {
		localVarQueryParams.Add("obj_type__n", parameterToString(*r.objTypeN, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.user != nil {
		localVarQueryParams.Add("user", parameterToString(*r.user, ""))
	}
	if r.userN != nil {
		localVarQueryParams.Add("user__n", parameterToString(*r.userN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsLogsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasJobResultsLogsRetrieveRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsLogsRetrieveExecute(r)
}

/*
ExtrasJobResultsLogsRetrieve Method for ExtrasJobResultsLogsRetrieve

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsLogsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsLogsRetrieve(ctx context.Context, id string) ApiExtrasJobResultsLogsRetrieveRequest {
	return ApiExtrasJobResultsLogsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsLogsRetrieveExecute(r ApiExtrasJobResultsLogsRetrieveRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsLogsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/logs/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedJobResult *PatchedJobResult
}

func (r ApiExtrasJobResultsPartialUpdateRequest) PatchedJobResult(patchedJobResult PatchedJobResult) ApiExtrasJobResultsPartialUpdateRequest {
	r.patchedJobResult = &patchedJobResult
	return r
}

func (r ApiExtrasJobResultsPartialUpdateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsPartialUpdateExecute(r)
}

/*
ExtrasJobResultsPartialUpdate Method for ExtrasJobResultsPartialUpdate

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsPartialUpdate(ctx context.Context, id string) ApiExtrasJobResultsPartialUpdateRequest {
	return ApiExtrasJobResultsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsPartialUpdateExecute(r ApiExtrasJobResultsPartialUpdateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJobResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasJobResultsRetrieveRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsRetrieveExecute(r)
}

/*
ExtrasJobResultsRetrieve Method for ExtrasJobResultsRetrieve

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsRetrieve(ctx context.Context, id string) ApiExtrasJobResultsRetrieveRequest {
	return ApiExtrasJobResultsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsRetrieveExecute(r ApiExtrasJobResultsRetrieveRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobResultsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	jobResult *JobResult
}

func (r ApiExtrasJobResultsUpdateRequest) JobResult(jobResult JobResult) ApiExtrasJobResultsUpdateRequest {
	r.jobResult = &jobResult
	return r
}

func (r ApiExtrasJobResultsUpdateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasJobResultsUpdateExecute(r)
}

/*
ExtrasJobResultsUpdate Method for ExtrasJobResultsUpdate

Retrieve a list of job results

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job result.
 @return ApiExtrasJobResultsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobResultsUpdate(ctx context.Context, id string) ApiExtrasJobResultsUpdateRequest {
	return ApiExtrasJobResultsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasJobResultsUpdateExecute(r ApiExtrasJobResultsUpdateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobResultsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/job-results/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobResult == nil {
		return localVarReturnValue, nil, reportError("jobResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobResult
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasJobsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobsBulkDestroyExecute(r)
}

/*
ExtrasJobsBulkDestroy Method for ExtrasJobsBulkDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasJobsBulkDestroy(ctx context.Context) ApiExtrasJobsBulkDestroyRequest {
	return ApiExtrasJobsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasJobsBulkDestroyExecute(r ApiExtrasJobsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedJob *PatchedJob
}

func (r ApiExtrasJobsBulkPartialUpdateRequest) PatchedJob(patchedJob PatchedJob) ApiExtrasJobsBulkPartialUpdateRequest {
	r.patchedJob = &patchedJob
	return r
}

func (r ApiExtrasJobsBulkPartialUpdateRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsBulkPartialUpdateExecute(r)
}

/*
ExtrasJobsBulkPartialUpdate Method for ExtrasJobsBulkPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobsBulkPartialUpdate(ctx context.Context) ApiExtrasJobsBulkPartialUpdateRequest {
	return ApiExtrasJobsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasApiService) ExtrasJobsBulkPartialUpdateExecute(r ApiExtrasJobsBulkPartialUpdateRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	job *Job
}

func (r ApiExtrasJobsBulkUpdateRequest) Job(job Job) ApiExtrasJobsBulkUpdateRequest {
	r.job = &job
	return r
}

func (r ApiExtrasJobsBulkUpdateRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsBulkUpdateExecute(r)
}

/*
ExtrasJobsBulkUpdate Method for ExtrasJobsBulkUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobsBulkUpdate(ctx context.Context) ApiExtrasJobsBulkUpdateRequest {
	return ApiExtrasJobsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasApiService) ExtrasJobsBulkUpdateExecute(r ApiExtrasJobsBulkUpdateRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.job == nil {
		return localVarReturnValue, nil, reportError("job is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.job
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasJobsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasJobsDestroyExecute(r)
}

/*
ExtrasJobsDestroy Method for ExtrasJobsDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job.
 @return ApiExtrasJobsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasJobsDestroy(ctx context.Context, id string) ApiExtrasJobsDestroyRequest {
	return ApiExtrasJobsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasJobsDestroyExecute(r ApiExtrasJobsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasJobsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiExtrasJobsListRequest) Limit(limit int32) ApiExtrasJobsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsListRequest) Offset(offset int32) ApiExtrasJobsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasJobsListRequest) Execute() (*PaginatedJobClassList, *http.Response, error) {
	return r.ApiService.ExtrasJobsListExecute(r)
}

/*
ExtrasJobsList Method for ExtrasJobsList

List all known Jobs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasJobsListRequest
*/
func (a *ExtrasApiService) ExtrasJobsList(ctx context.Context) ApiExtrasJobsListRequest {
	return ApiExtrasJobsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJobClassList
func (a *ExtrasApiService) ExtrasJobsListExecute(r ApiExtrasJobsListRequest) (*PaginatedJobClassList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobClassList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedJob *PatchedJob
}

func (r ApiExtrasJobsPartialUpdateRequest) PatchedJob(patchedJob PatchedJob) ApiExtrasJobsPartialUpdateRequest {
	r.patchedJob = &patchedJob
	return r
}

func (r ApiExtrasJobsPartialUpdateRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsPartialUpdateExecute(r)
}

/*
ExtrasJobsPartialUpdate Method for ExtrasJobsPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job.
 @return ApiExtrasJobsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobsPartialUpdate(ctx context.Context, id string) ApiExtrasJobsPartialUpdateRequest {
	return ApiExtrasJobsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasApiService) ExtrasJobsPartialUpdateExecute(r ApiExtrasJobsPartialUpdateRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJob
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsReadDeprecatedRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	classPath string
}

func (r ApiExtrasJobsReadDeprecatedRequest) Execute() (*JobClassDetail, *http.Response, error) {
	return r.ApiService.ExtrasJobsReadDeprecatedExecute(r)
}

/*
ExtrasJobsReadDeprecated Method for ExtrasJobsReadDeprecated

Get details of a Job as identified by its class-path.

This API endpoint is deprecated; it is recommended to use the extras_jobs_read endpoint instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param classPath
 @return ApiExtrasJobsReadDeprecatedRequest

Deprecated
*/
func (a *ExtrasApiService) ExtrasJobsReadDeprecated(ctx context.Context, classPath string) ApiExtrasJobsReadDeprecatedRequest {
	return ApiExtrasJobsReadDeprecatedRequest{
		ApiService: a,
		ctx: ctx,
		classPath: classPath,
	}
}

// Execute executes the request
//  @return JobClassDetail
// Deprecated
func (a *ExtrasApiService) ExtrasJobsReadDeprecatedExecute(r ApiExtrasJobsReadDeprecatedRequest) (*JobClassDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobClassDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsReadDeprecated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{class_path}/"
	localVarPath = strings.Replace(localVarPath, "{"+"class_path"+"}", url.PathEscape(parameterToString(r.classPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasJobsRetrieveRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsRetrieveExecute(r)
}

/*
ExtrasJobsRetrieve Method for ExtrasJobsRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job.
 @return ApiExtrasJobsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasJobsRetrieve(ctx context.Context, id string) ApiExtrasJobsRetrieveRequest {
	return ApiExtrasJobsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasApiService) ExtrasJobsRetrieveExecute(r ApiExtrasJobsRetrieveRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRunCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	jobInput *JobInput
}

func (r ApiExtrasJobsRunCreateRequest) JobInput(jobInput JobInput) ApiExtrasJobsRunCreateRequest {
	r.jobInput = &jobInput
	return r
}

func (r ApiExtrasJobsRunCreateRequest) Execute() (*JobRunResponse, *http.Response, error) {
	return r.ApiService.ExtrasJobsRunCreateExecute(r)
}

/*
ExtrasJobsRunCreate Method for ExtrasJobsRunCreate

Run the specified Job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job.
 @return ApiExtrasJobsRunCreateRequest
*/
func (a *ExtrasApiService) ExtrasJobsRunCreate(ctx context.Context, id string) ApiExtrasJobsRunCreateRequest {
	return ApiExtrasJobsRunCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobRunResponse
func (a *ExtrasApiService) ExtrasJobsRunCreateExecute(r ApiExtrasJobsRunCreateRequest) (*JobRunResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsRunCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/run/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsRunDeprecatedRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	classPath string
	jobInput *JobInput
}

func (r ApiExtrasJobsRunDeprecatedRequest) JobInput(jobInput JobInput) ApiExtrasJobsRunDeprecatedRequest {
	r.jobInput = &jobInput
	return r
}

func (r ApiExtrasJobsRunDeprecatedRequest) Execute() (*JobClassDetail, *http.Response, error) {
	return r.ApiService.ExtrasJobsRunDeprecatedExecute(r)
}

/*
ExtrasJobsRunDeprecated Method for ExtrasJobsRunDeprecated

Run a Job as identified by its class-path.

This API endpoint is deprecated; it is recommended to use the extras_jobs_run endpoint instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param classPath
 @return ApiExtrasJobsRunDeprecatedRequest

Deprecated
*/
func (a *ExtrasApiService) ExtrasJobsRunDeprecated(ctx context.Context, classPath string) ApiExtrasJobsRunDeprecatedRequest {
	return ApiExtrasJobsRunDeprecatedRequest{
		ApiService: a,
		ctx: ctx,
		classPath: classPath,
	}
}

// Execute executes the request
//  @return JobClassDetail
// Deprecated
func (a *ExtrasApiService) ExtrasJobsRunDeprecatedExecute(r ApiExtrasJobsRunDeprecatedRequest) (*JobClassDetail, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobClassDetail
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsRunDeprecated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{class_path}/run/"
	localVarPath = strings.Replace(localVarPath, "{"+"class_path"+"}", url.PathEscape(parameterToString(r.classPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobInput
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	job *Job
}

func (r ApiExtrasJobsUpdateRequest) Job(job Job) ApiExtrasJobsUpdateRequest {
	r.job = &job
	return r
}

func (r ApiExtrasJobsUpdateRequest) Execute() (*Job, *http.Response, error) {
	return r.ApiService.ExtrasJobsUpdateExecute(r)
}

/*
ExtrasJobsUpdate Method for ExtrasJobsUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job.
 @return ApiExtrasJobsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasJobsUpdate(ctx context.Context, id string) ApiExtrasJobsUpdateRequest {
	return ApiExtrasJobsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Job
func (a *ExtrasApiService) ExtrasJobsUpdateExecute(r ApiExtrasJobsUpdateRequest) (*Job, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Job
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.job == nil {
		return localVarReturnValue, nil, reportError("job is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.job
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasJobsVariablesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiExtrasJobsVariablesListRequest) Limit(limit int32) ApiExtrasJobsVariablesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasJobsVariablesListRequest) Offset(offset int32) ApiExtrasJobsVariablesListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasJobsVariablesListRequest) Execute() (*PaginatedJobVariableList, *http.Response, error) {
	return r.ApiService.ExtrasJobsVariablesListExecute(r)
}

/*
ExtrasJobsVariablesList Method for ExtrasJobsVariablesList

Get details of the input variables that may/must be specified to run a particular Job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this job.
 @return ApiExtrasJobsVariablesListRequest
*/
func (a *ExtrasApiService) ExtrasJobsVariablesList(ctx context.Context, id string) ApiExtrasJobsVariablesListRequest {
	return ApiExtrasJobsVariablesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedJobVariableList
func (a *ExtrasApiService) ExtrasJobsVariablesListExecute(r ApiExtrasJobsVariablesListRequest) (*PaginatedJobVariableList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJobVariableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasJobsVariablesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/jobs/{id}/variables/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectChangesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	action *string
	actionN *string
	changedObjectId *[]string
	changedObjectIdIc *[]string
	changedObjectIdIe *[]string
	changedObjectIdIew *[]string
	changedObjectIdIre *[]string
	changedObjectIdIsw *[]string
	changedObjectIdN *[]string
	changedObjectIdNic *[]string
	changedObjectIdNie *[]string
	changedObjectIdNiew *[]string
	changedObjectIdNire *[]string
	changedObjectIdNisw *[]string
	changedObjectIdNre *[]string
	changedObjectIdRe *[]string
	changedObjectType *string
	changedObjectTypeN *string
	changedObjectTypeId *int32
	changedObjectTypeIdN *int32
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	objectRepr *[]string
	objectReprIc *[]string
	objectReprIe *[]string
	objectReprIew *[]string
	objectReprIre *[]string
	objectReprIsw *[]string
	objectReprN *[]string
	objectReprNic *[]string
	objectReprNie *[]string
	objectReprNiew *[]string
	objectReprNire *[]string
	objectReprNisw *[]string
	objectReprNre *[]string
	objectReprRe *[]string
	offset *int32
	q *string
	requestId *[]string
	requestIdIc *[]string
	requestIdIe *[]string
	requestIdIew *[]string
	requestIdIre *[]string
	requestIdIsw *[]string
	requestIdN *[]string
	requestIdNic *[]string
	requestIdNie *[]string
	requestIdNiew *[]string
	requestIdNire *[]string
	requestIdNisw *[]string
	requestIdNre *[]string
	requestIdRe *[]string
	time *[]time.Time
	timeGt *[]time.Time
	timeGte *[]time.Time
	timeLt *[]time.Time
	timeLte *[]time.Time
	timeN *[]time.Time
	user *[]string
	userN *[]string
	userId *[]*string
	userIdN *[]*string
	userName *[]string
	userNameIc *[]string
	userNameIe *[]string
	userNameIew *[]string
	userNameIre *[]string
	userNameIsw *[]string
	userNameN *[]string
	userNameNic *[]string
	userNameNie *[]string
	userNameNiew *[]string
	userNameNire *[]string
	userNameNisw *[]string
	userNameNre *[]string
	userNameRe *[]string
}

func (r ApiExtrasObjectChangesListRequest) Action(action string) ApiExtrasObjectChangesListRequest {
	r.action = &action
	return r
}

func (r ApiExtrasObjectChangesListRequest) ActionN(actionN string) ApiExtrasObjectChangesListRequest {
	r.actionN = &actionN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectId(changedObjectId []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectId = &changedObjectId
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIc(changedObjectIdIc []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIc = &changedObjectIdIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIe(changedObjectIdIe []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIe = &changedObjectIdIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIew(changedObjectIdIew []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIew = &changedObjectIdIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIre(changedObjectIdIre []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIre = &changedObjectIdIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdIsw(changedObjectIdIsw []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdIsw = &changedObjectIdIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdN(changedObjectIdN []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdN = &changedObjectIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNic(changedObjectIdNic []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNic = &changedObjectIdNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNie(changedObjectIdNie []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNie = &changedObjectIdNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNiew(changedObjectIdNiew []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNiew = &changedObjectIdNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNire(changedObjectIdNire []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNire = &changedObjectIdNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNisw(changedObjectIdNisw []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNisw = &changedObjectIdNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdNre(changedObjectIdNre []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdNre = &changedObjectIdNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectIdRe(changedObjectIdRe []string) ApiExtrasObjectChangesListRequest {
	r.changedObjectIdRe = &changedObjectIdRe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectType(changedObjectType string) ApiExtrasObjectChangesListRequest {
	r.changedObjectType = &changedObjectType
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeN(changedObjectTypeN string) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeN = &changedObjectTypeN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeId(changedObjectTypeId int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeId = &changedObjectTypeId
	return r
}

func (r ApiExtrasObjectChangesListRequest) ChangedObjectTypeIdN(changedObjectTypeIdN int32) ApiExtrasObjectChangesListRequest {
	r.changedObjectTypeIdN = &changedObjectTypeIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) Id(id []string) ApiExtrasObjectChangesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIc(idIc []string) ApiExtrasObjectChangesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIe(idIe []string) ApiExtrasObjectChangesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIew(idIew []string) ApiExtrasObjectChangesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIre(idIre []string) ApiExtrasObjectChangesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdIsw(idIsw []string) ApiExtrasObjectChangesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdN(idN []string) ApiExtrasObjectChangesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNic(idNic []string) ApiExtrasObjectChangesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNie(idNie []string) ApiExtrasObjectChangesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNiew(idNiew []string) ApiExtrasObjectChangesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNire(idNire []string) ApiExtrasObjectChangesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNisw(idNisw []string) ApiExtrasObjectChangesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdNre(idNre []string) ApiExtrasObjectChangesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) IdRe(idRe []string) ApiExtrasObjectChangesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasObjectChangesListRequest) Limit(limit int32) ApiExtrasObjectChangesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectRepr(objectRepr []string) ApiExtrasObjectChangesListRequest {
	r.objectRepr = &objectRepr
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIc(objectReprIc []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIc = &objectReprIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIe(objectReprIe []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIe = &objectReprIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIew(objectReprIew []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIew = &objectReprIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIre(objectReprIre []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIre = &objectReprIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprIsw(objectReprIsw []string) ApiExtrasObjectChangesListRequest {
	r.objectReprIsw = &objectReprIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprN(objectReprN []string) ApiExtrasObjectChangesListRequest {
	r.objectReprN = &objectReprN
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNic(objectReprNic []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNic = &objectReprNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNie(objectReprNie []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNie = &objectReprNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNiew(objectReprNiew []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNiew = &objectReprNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNire(objectReprNire []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNire = &objectReprNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNisw(objectReprNisw []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNisw = &objectReprNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprNre(objectReprNre []string) ApiExtrasObjectChangesListRequest {
	r.objectReprNre = &objectReprNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) ObjectReprRe(objectReprRe []string) ApiExtrasObjectChangesListRequest {
	r.objectReprRe = &objectReprRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasObjectChangesListRequest) Offset(offset int32) ApiExtrasObjectChangesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasObjectChangesListRequest) Q(q string) ApiExtrasObjectChangesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestId(requestId []string) ApiExtrasObjectChangesListRequest {
	r.requestId = &requestId
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIc(requestIdIc []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIc = &requestIdIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIe(requestIdIe []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIe = &requestIdIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIew(requestIdIew []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIew = &requestIdIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIre(requestIdIre []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIre = &requestIdIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdIsw(requestIdIsw []string) ApiExtrasObjectChangesListRequest {
	r.requestIdIsw = &requestIdIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdN(requestIdN []string) ApiExtrasObjectChangesListRequest {
	r.requestIdN = &requestIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNic(requestIdNic []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNic = &requestIdNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNie(requestIdNie []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNie = &requestIdNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNiew(requestIdNiew []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNiew = &requestIdNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNire(requestIdNire []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNire = &requestIdNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNisw(requestIdNisw []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNisw = &requestIdNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdNre(requestIdNre []string) ApiExtrasObjectChangesListRequest {
	r.requestIdNre = &requestIdNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) RequestIdRe(requestIdRe []string) ApiExtrasObjectChangesListRequest {
	r.requestIdRe = &requestIdRe
	return r
}

func (r ApiExtrasObjectChangesListRequest) Time(time []time.Time) ApiExtrasObjectChangesListRequest {
	r.time = &time
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeGt(timeGt []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeGt = &timeGt
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeGte(timeGte []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeGte = &timeGte
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeLt(timeLt []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeLt = &timeLt
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeLte(timeLte []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeLte = &timeLte
	return r
}

func (r ApiExtrasObjectChangesListRequest) TimeN(timeN []time.Time) ApiExtrasObjectChangesListRequest {
	r.timeN = &timeN
	return r
}

// User name
func (r ApiExtrasObjectChangesListRequest) User(user []string) ApiExtrasObjectChangesListRequest {
	r.user = &user
	return r
}

// User name
func (r ApiExtrasObjectChangesListRequest) UserN(userN []string) ApiExtrasObjectChangesListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiExtrasObjectChangesListRequest) UserId(userId []*string) ApiExtrasObjectChangesListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiExtrasObjectChangesListRequest) UserIdN(userIdN []*string) ApiExtrasObjectChangesListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserName(userName []string) ApiExtrasObjectChangesListRequest {
	r.userName = &userName
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIc(userNameIc []string) ApiExtrasObjectChangesListRequest {
	r.userNameIc = &userNameIc
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIe(userNameIe []string) ApiExtrasObjectChangesListRequest {
	r.userNameIe = &userNameIe
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIew(userNameIew []string) ApiExtrasObjectChangesListRequest {
	r.userNameIew = &userNameIew
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIre(userNameIre []string) ApiExtrasObjectChangesListRequest {
	r.userNameIre = &userNameIre
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameIsw(userNameIsw []string) ApiExtrasObjectChangesListRequest {
	r.userNameIsw = &userNameIsw
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameN(userNameN []string) ApiExtrasObjectChangesListRequest {
	r.userNameN = &userNameN
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNic(userNameNic []string) ApiExtrasObjectChangesListRequest {
	r.userNameNic = &userNameNic
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNie(userNameNie []string) ApiExtrasObjectChangesListRequest {
	r.userNameNie = &userNameNie
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNiew(userNameNiew []string) ApiExtrasObjectChangesListRequest {
	r.userNameNiew = &userNameNiew
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNire(userNameNire []string) ApiExtrasObjectChangesListRequest {
	r.userNameNire = &userNameNire
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNisw(userNameNisw []string) ApiExtrasObjectChangesListRequest {
	r.userNameNisw = &userNameNisw
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameNre(userNameNre []string) ApiExtrasObjectChangesListRequest {
	r.userNameNre = &userNameNre
	return r
}

func (r ApiExtrasObjectChangesListRequest) UserNameRe(userNameRe []string) ApiExtrasObjectChangesListRequest {
	r.userNameRe = &userNameRe
	return r
}

func (r ApiExtrasObjectChangesListRequest) Execute() (*PaginatedObjectChangeList, *http.Response, error) {
	return r.ApiService.ExtrasObjectChangesListExecute(r)
}

/*
ExtrasObjectChangesList Method for ExtrasObjectChangesList

Retrieve a list of recent changes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasObjectChangesListRequest
*/
func (a *ExtrasApiService) ExtrasObjectChangesList(ctx context.Context) ApiExtrasObjectChangesListRequest {
	return ApiExtrasObjectChangesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedObjectChangeList
func (a *ExtrasApiService) ExtrasObjectChangesListExecute(r ApiExtrasObjectChangesListRequest) (*PaginatedObjectChangeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedObjectChangeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasObjectChangesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-changes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.action != nil {
		localVarQueryParams.Add("action", parameterToString(*r.action, ""))
	}
	if r.actionN != nil {
		localVarQueryParams.Add("action__n", parameterToString(*r.actionN, ""))
	}
	if r.changedObjectId != nil {
		t := *r.changedObjectId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdIc != nil {
		t := *r.changedObjectIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdIe != nil {
		t := *r.changedObjectIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdIew != nil {
		t := *r.changedObjectIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdIre != nil {
		t := *r.changedObjectIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdIsw != nil {
		t := *r.changedObjectIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdN != nil {
		t := *r.changedObjectIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__n", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdNic != nil {
		t := *r.changedObjectIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdNie != nil {
		t := *r.changedObjectIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdNiew != nil {
		t := *r.changedObjectIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdNire != nil {
		t := *r.changedObjectIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdNisw != nil {
		t := *r.changedObjectIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdNre != nil {
		t := *r.changedObjectIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectIdRe != nil {
		t := *r.changedObjectIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("changed_object_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("changed_object_id__re", parameterToString(t, "multi"))
		}
	}
	if r.changedObjectType != nil {
		localVarQueryParams.Add("changed_object_type", parameterToString(*r.changedObjectType, ""))
	}
	if r.changedObjectTypeN != nil {
		localVarQueryParams.Add("changed_object_type__n", parameterToString(*r.changedObjectTypeN, ""))
	}
	if r.changedObjectTypeId != nil {
		localVarQueryParams.Add("changed_object_type_id", parameterToString(*r.changedObjectTypeId, ""))
	}
	if r.changedObjectTypeIdN != nil {
		localVarQueryParams.Add("changed_object_type_id__n", parameterToString(*r.changedObjectTypeIdN, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.objectRepr != nil {
		t := *r.objectRepr
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr", parameterToString(t, "multi"))
		}
	}
	if r.objectReprIc != nil {
		t := *r.objectReprIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__ic", parameterToString(t, "multi"))
		}
	}
	if r.objectReprIe != nil {
		t := *r.objectReprIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__ie", parameterToString(t, "multi"))
		}
	}
	if r.objectReprIew != nil {
		t := *r.objectReprIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__iew", parameterToString(t, "multi"))
		}
	}
	if r.objectReprIre != nil {
		t := *r.objectReprIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__ire", parameterToString(t, "multi"))
		}
	}
	if r.objectReprIsw != nil {
		t := *r.objectReprIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__isw", parameterToString(t, "multi"))
		}
	}
	if r.objectReprN != nil {
		t := *r.objectReprN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__n", parameterToString(t, "multi"))
		}
	}
	if r.objectReprNic != nil {
		t := *r.objectReprNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__nic", parameterToString(t, "multi"))
		}
	}
	if r.objectReprNie != nil {
		t := *r.objectReprNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__nie", parameterToString(t, "multi"))
		}
	}
	if r.objectReprNiew != nil {
		t := *r.objectReprNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__niew", parameterToString(t, "multi"))
		}
	}
	if r.objectReprNire != nil {
		t := *r.objectReprNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__nire", parameterToString(t, "multi"))
		}
	}
	if r.objectReprNisw != nil {
		t := *r.objectReprNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__nisw", parameterToString(t, "multi"))
		}
	}
	if r.objectReprNre != nil {
		t := *r.objectReprNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__nre", parameterToString(t, "multi"))
		}
	}
	if r.objectReprRe != nil {
		t := *r.objectReprRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("object_repr__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("object_repr__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.requestId != nil {
		t := *r.requestId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id", parameterToString(t, "multi"))
		}
	}
	if r.requestIdIc != nil {
		t := *r.requestIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.requestIdIe != nil {
		t := *r.requestIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.requestIdIew != nil {
		t := *r.requestIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.requestIdIre != nil {
		t := *r.requestIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.requestIdIsw != nil {
		t := *r.requestIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.requestIdN != nil {
		t := *r.requestIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__n", parameterToString(t, "multi"))
		}
	}
	if r.requestIdNic != nil {
		t := *r.requestIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.requestIdNie != nil {
		t := *r.requestIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.requestIdNiew != nil {
		t := *r.requestIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.requestIdNire != nil {
		t := *r.requestIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.requestIdNisw != nil {
		t := *r.requestIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.requestIdNre != nil {
		t := *r.requestIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.requestIdRe != nil {
		t := *r.requestIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("request_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("request_id__re", parameterToString(t, "multi"))
		}
	}
	if r.time != nil {
		t := *r.time
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("time", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("time", parameterToString(t, "multi"))
		}
	}
	if r.timeGt != nil {
		t := *r.timeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("time__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("time__gt", parameterToString(t, "multi"))
		}
	}
	if r.timeGte != nil {
		t := *r.timeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("time__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("time__gte", parameterToString(t, "multi"))
		}
	}
	if r.timeLt != nil {
		t := *r.timeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("time__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("time__lt", parameterToString(t, "multi"))
		}
	}
	if r.timeLte != nil {
		t := *r.timeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("time__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("time__lte", parameterToString(t, "multi"))
		}
	}
	if r.timeN != nil {
		t := *r.timeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("time__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("time__n", parameterToString(t, "multi"))
		}
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user", parameterToString(t, "multi"))
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user__n", parameterToString(t, "multi"))
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_id", parameterToString(t, "multi"))
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_id__n", parameterToString(t, "multi"))
		}
	}
	if r.userName != nil {
		t := *r.userName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name", parameterToString(t, "multi"))
		}
	}
	if r.userNameIc != nil {
		t := *r.userNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__ic", parameterToString(t, "multi"))
		}
	}
	if r.userNameIe != nil {
		t := *r.userNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__ie", parameterToString(t, "multi"))
		}
	}
	if r.userNameIew != nil {
		t := *r.userNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__iew", parameterToString(t, "multi"))
		}
	}
	if r.userNameIre != nil {
		t := *r.userNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__ire", parameterToString(t, "multi"))
		}
	}
	if r.userNameIsw != nil {
		t := *r.userNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__isw", parameterToString(t, "multi"))
		}
	}
	if r.userNameN != nil {
		t := *r.userNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__n", parameterToString(t, "multi"))
		}
	}
	if r.userNameNic != nil {
		t := *r.userNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__nic", parameterToString(t, "multi"))
		}
	}
	if r.userNameNie != nil {
		t := *r.userNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__nie", parameterToString(t, "multi"))
		}
	}
	if r.userNameNiew != nil {
		t := *r.userNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__niew", parameterToString(t, "multi"))
		}
	}
	if r.userNameNire != nil {
		t := *r.userNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__nire", parameterToString(t, "multi"))
		}
	}
	if r.userNameNisw != nil {
		t := *r.userNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.userNameNre != nil {
		t := *r.userNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__nre", parameterToString(t, "multi"))
		}
	}
	if r.userNameRe != nil {
		t := *r.userNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_name__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasObjectChangesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasObjectChangesRetrieveRequest) Execute() (*ObjectChange, *http.Response, error) {
	return r.ApiService.ExtrasObjectChangesRetrieveExecute(r)
}

/*
ExtrasObjectChangesRetrieve Method for ExtrasObjectChangesRetrieve

Retrieve a list of recent changes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this object change.
 @return ApiExtrasObjectChangesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasObjectChangesRetrieve(ctx context.Context, id string) ApiExtrasObjectChangesRetrieveRequest {
	return ApiExtrasObjectChangesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ObjectChange
func (a *ExtrasApiService) ExtrasObjectChangesRetrieveExecute(r ApiExtrasObjectChangesRetrieveRequest) (*ObjectChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ObjectChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasObjectChangesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/object-changes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasRelationshipAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsBulkDestroyExecute(r)
}

/*
ExtrasRelationshipAssociationsBulkDestroy Method for ExtrasRelationshipAssociationsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsBulkDestroy(ctx context.Context) ApiExtrasRelationshipAssociationsBulkDestroyRequest {
	return ApiExtrasRelationshipAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasRelationshipAssociationsBulkDestroyExecute(r ApiExtrasRelationshipAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWritableRelationshipAssociation *PatchedWritableRelationshipAssociation
}

func (r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) PatchedWritableRelationshipAssociation(patchedWritableRelationshipAssociation PatchedWritableRelationshipAssociation) ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest {
	r.patchedWritableRelationshipAssociation = &patchedWritableRelationshipAssociation
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsBulkPartialUpdate Method for ExtrasRelationshipAssociationsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest {
	return ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasApiService) ExtrasRelationshipAssociationsBulkPartialUpdateExecute(r ApiExtrasRelationshipAssociationsBulkPartialUpdateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRelationshipAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableRelationshipAssociation *WritableRelationshipAssociation
}

func (r ApiExtrasRelationshipAssociationsBulkUpdateRequest) WritableRelationshipAssociation(writableRelationshipAssociation WritableRelationshipAssociation) ApiExtrasRelationshipAssociationsBulkUpdateRequest {
	r.writableRelationshipAssociation = &writableRelationshipAssociation
	return r
}

func (r ApiExtrasRelationshipAssociationsBulkUpdateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsBulkUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsBulkUpdate Method for ExtrasRelationshipAssociationsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsBulkUpdate(ctx context.Context) ApiExtrasRelationshipAssociationsBulkUpdateRequest {
	return ApiExtrasRelationshipAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasApiService) ExtrasRelationshipAssociationsBulkUpdateExecute(r ApiExtrasRelationshipAssociationsBulkUpdateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRelationshipAssociation == nil {
		return localVarReturnValue, nil, reportError("writableRelationshipAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRelationshipAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableRelationshipAssociation *WritableRelationshipAssociation
}

func (r ApiExtrasRelationshipAssociationsCreateRequest) WritableRelationshipAssociation(writableRelationshipAssociation WritableRelationshipAssociation) ApiExtrasRelationshipAssociationsCreateRequest {
	r.writableRelationshipAssociation = &writableRelationshipAssociation
	return r
}

func (r ApiExtrasRelationshipAssociationsCreateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsCreateExecute(r)
}

/*
ExtrasRelationshipAssociationsCreate Method for ExtrasRelationshipAssociationsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsCreateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsCreate(ctx context.Context) ApiExtrasRelationshipAssociationsCreateRequest {
	return ApiExtrasRelationshipAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasApiService) ExtrasRelationshipAssociationsCreateExecute(r ApiExtrasRelationshipAssociationsCreateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRelationshipAssociation == nil {
		return localVarReturnValue, nil, reportError("writableRelationshipAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRelationshipAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasRelationshipAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsDestroyExecute(r)
}

/*
ExtrasRelationshipAssociationsDestroy Method for ExtrasRelationshipAssociationsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsDestroy(ctx context.Context, id string) ApiExtrasRelationshipAssociationsDestroyRequest {
	return ApiExtrasRelationshipAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasRelationshipAssociationsDestroyExecute(r ApiExtrasRelationshipAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	destinationId *[]string
	destinationIdIc *[]string
	destinationIdIe *[]string
	destinationIdIew *[]string
	destinationIdIre *[]string
	destinationIdIsw *[]string
	destinationIdN *[]string
	destinationIdNic *[]string
	destinationIdNie *[]string
	destinationIdNiew *[]string
	destinationIdNire *[]string
	destinationIdNisw *[]string
	destinationIdNre *[]string
	destinationIdRe *[]string
	destinationType *[]int32
	destinationTypeN *[]int32
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	peerId *[]string
	relationship *[]string
	relationshipN *[]string
	sourceId *[]string
	sourceIdIc *[]string
	sourceIdIe *[]string
	sourceIdIew *[]string
	sourceIdIre *[]string
	sourceIdIsw *[]string
	sourceIdN *[]string
	sourceIdNic *[]string
	sourceIdNie *[]string
	sourceIdNiew *[]string
	sourceIdNire *[]string
	sourceIdNisw *[]string
	sourceIdNre *[]string
	sourceIdRe *[]string
	sourceType *[]int32
	sourceTypeN *[]int32
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationId(destinationId []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationId = &destinationId
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIc(destinationIdIc []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIc = &destinationIdIc
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIe(destinationIdIe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIe = &destinationIdIe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIew(destinationIdIew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIew = &destinationIdIew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIre(destinationIdIre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIre = &destinationIdIre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdIsw(destinationIdIsw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdIsw = &destinationIdIsw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdN(destinationIdN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdN = &destinationIdN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNic(destinationIdNic []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNic = &destinationIdNic
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNie(destinationIdNie []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNie = &destinationIdNie
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNiew(destinationIdNiew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNiew = &destinationIdNiew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNire(destinationIdNire []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNire = &destinationIdNire
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNisw(destinationIdNisw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNisw = &destinationIdNisw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdNre(destinationIdNre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdNre = &destinationIdNre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationIdRe(destinationIdRe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationIdRe = &destinationIdRe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationType(destinationType []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationType = &destinationType
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) DestinationTypeN(destinationTypeN []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.destinationTypeN = &destinationTypeN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) Id(id []string) ApiExtrasRelationshipAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIc(idIc []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIe(idIe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIew(idIew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIre(idIre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdN(idN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNic(idNic []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNie(idNie []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNire(idNire []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdNre(idNre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) IdRe(idRe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasRelationshipAssociationsListRequest) Limit(limit int32) ApiExtrasRelationshipAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRelationshipAssociationsListRequest) Offset(offset int32) ApiExtrasRelationshipAssociationsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) PeerId(peerId []string) ApiExtrasRelationshipAssociationsListRequest {
	r.peerId = &peerId
	return r
}

// Relationship (slug)
func (r ApiExtrasRelationshipAssociationsListRequest) Relationship(relationship []string) ApiExtrasRelationshipAssociationsListRequest {
	r.relationship = &relationship
	return r
}

// Relationship (slug)
func (r ApiExtrasRelationshipAssociationsListRequest) RelationshipN(relationshipN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.relationshipN = &relationshipN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceId(sourceId []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceId = &sourceId
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIc(sourceIdIc []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIc = &sourceIdIc
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIe(sourceIdIe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIe = &sourceIdIe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIew(sourceIdIew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIew = &sourceIdIew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIre(sourceIdIre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIre = &sourceIdIre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdIsw(sourceIdIsw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdIsw = &sourceIdIsw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdN(sourceIdN []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdN = &sourceIdN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNic(sourceIdNic []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNic = &sourceIdNic
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNie(sourceIdNie []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNie = &sourceIdNie
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNiew(sourceIdNiew []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNiew = &sourceIdNiew
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNire(sourceIdNire []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNire = &sourceIdNire
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNisw(sourceIdNisw []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNisw = &sourceIdNisw
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdNre(sourceIdNre []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdNre = &sourceIdNre
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceIdRe(sourceIdRe []string) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceIdRe = &sourceIdRe
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceType(sourceType []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceType = &sourceType
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) SourceTypeN(sourceTypeN []int32) ApiExtrasRelationshipAssociationsListRequest {
	r.sourceTypeN = &sourceTypeN
	return r
}

func (r ApiExtrasRelationshipAssociationsListRequest) Execute() (*PaginatedRelationshipAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsListExecute(r)
}

/*
ExtrasRelationshipAssociationsList Method for ExtrasRelationshipAssociationsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipAssociationsListRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsList(ctx context.Context) ApiExtrasRelationshipAssociationsListRequest {
	return ApiExtrasRelationshipAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRelationshipAssociationList
func (a *ExtrasApiService) ExtrasRelationshipAssociationsListExecute(r ApiExtrasRelationshipAssociationsListRequest) (*PaginatedRelationshipAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRelationshipAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.destinationId != nil {
		t := *r.destinationId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdIc != nil {
		t := *r.destinationIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdIe != nil {
		t := *r.destinationIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdIew != nil {
		t := *r.destinationIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdIre != nil {
		t := *r.destinationIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdIsw != nil {
		t := *r.destinationIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdN != nil {
		t := *r.destinationIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__n", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdNic != nil {
		t := *r.destinationIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdNie != nil {
		t := *r.destinationIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdNiew != nil {
		t := *r.destinationIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdNire != nil {
		t := *r.destinationIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdNisw != nil {
		t := *r.destinationIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdNre != nil {
		t := *r.destinationIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.destinationIdRe != nil {
		t := *r.destinationIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_id__re", parameterToString(t, "multi"))
		}
	}
	if r.destinationType != nil {
		t := *r.destinationType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_type", parameterToString(t, "multi"))
		}
	}
	if r.destinationTypeN != nil {
		t := *r.destinationTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_type__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.peerId != nil {
		t := *r.peerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("peer_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("peer_id", parameterToString(t, "multi"))
		}
	}
	if r.relationship != nil {
		t := *r.relationship
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("relationship", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("relationship", parameterToString(t, "multi"))
		}
	}
	if r.relationshipN != nil {
		t := *r.relationshipN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("relationship__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("relationship__n", parameterToString(t, "multi"))
		}
	}
	if r.sourceId != nil {
		t := *r.sourceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdIc != nil {
		t := *r.sourceIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdIe != nil {
		t := *r.sourceIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdIew != nil {
		t := *r.sourceIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdIre != nil {
		t := *r.sourceIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdIsw != nil {
		t := *r.sourceIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdN != nil {
		t := *r.sourceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__n", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdNic != nil {
		t := *r.sourceIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdNie != nil {
		t := *r.sourceIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdNiew != nil {
		t := *r.sourceIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdNire != nil {
		t := *r.sourceIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdNisw != nil {
		t := *r.sourceIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdNre != nil {
		t := *r.sourceIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.sourceIdRe != nil {
		t := *r.sourceIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_id__re", parameterToString(t, "multi"))
		}
	}
	if r.sourceType != nil {
		t := *r.sourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_type", parameterToString(t, "multi"))
		}
	}
	if r.sourceTypeN != nil {
		t := *r.sourceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWritableRelationshipAssociation *PatchedWritableRelationshipAssociation
}

func (r ApiExtrasRelationshipAssociationsPartialUpdateRequest) PatchedWritableRelationshipAssociation(patchedWritableRelationshipAssociation PatchedWritableRelationshipAssociation) ApiExtrasRelationshipAssociationsPartialUpdateRequest {
	r.patchedWritableRelationshipAssociation = &patchedWritableRelationshipAssociation
	return r
}

func (r ApiExtrasRelationshipAssociationsPartialUpdateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsPartialUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsPartialUpdate Method for ExtrasRelationshipAssociationsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasRelationshipAssociationsPartialUpdateRequest {
	return ApiExtrasRelationshipAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasApiService) ExtrasRelationshipAssociationsPartialUpdateExecute(r ApiExtrasRelationshipAssociationsPartialUpdateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRelationshipAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasRelationshipAssociationsRetrieveRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsRetrieveExecute(r)
}

/*
ExtrasRelationshipAssociationsRetrieve Method for ExtrasRelationshipAssociationsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsRetrieve(ctx context.Context, id string) ApiExtrasRelationshipAssociationsRetrieveRequest {
	return ApiExtrasRelationshipAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasApiService) ExtrasRelationshipAssociationsRetrieveExecute(r ApiExtrasRelationshipAssociationsRetrieveRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	writableRelationshipAssociation *WritableRelationshipAssociation
}

func (r ApiExtrasRelationshipAssociationsUpdateRequest) WritableRelationshipAssociation(writableRelationshipAssociation WritableRelationshipAssociation) ApiExtrasRelationshipAssociationsUpdateRequest {
	r.writableRelationshipAssociation = &writableRelationshipAssociation
	return r
}

func (r ApiExtrasRelationshipAssociationsUpdateRequest) Execute() (*RelationshipAssociation, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipAssociationsUpdateExecute(r)
}

/*
ExtrasRelationshipAssociationsUpdate Method for ExtrasRelationshipAssociationsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship association.
 @return ApiExtrasRelationshipAssociationsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipAssociationsUpdate(ctx context.Context, id string) ApiExtrasRelationshipAssociationsUpdateRequest {
	return ApiExtrasRelationshipAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RelationshipAssociation
func (a *ExtrasApiService) ExtrasRelationshipAssociationsUpdateExecute(r ApiExtrasRelationshipAssociationsUpdateRequest) (*RelationshipAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RelationshipAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationship-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRelationshipAssociation == nil {
		return localVarReturnValue, nil, reportError("writableRelationshipAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRelationshipAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasRelationshipsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipsBulkDestroyExecute(r)
}

/*
ExtrasRelationshipsBulkDestroy Method for ExtrasRelationshipsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsBulkDestroy(ctx context.Context) ApiExtrasRelationshipsBulkDestroyRequest {
	return ApiExtrasRelationshipsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasRelationshipsBulkDestroyExecute(r ApiExtrasRelationshipsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedRelationship *PatchedRelationship
}

func (r ApiExtrasRelationshipsBulkPartialUpdateRequest) PatchedRelationship(patchedRelationship PatchedRelationship) ApiExtrasRelationshipsBulkPartialUpdateRequest {
	r.patchedRelationship = &patchedRelationship
	return r
}

func (r ApiExtrasRelationshipsBulkPartialUpdateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsBulkPartialUpdateExecute(r)
}

/*
ExtrasRelationshipsBulkPartialUpdate Method for ExtrasRelationshipsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsBulkPartialUpdate(ctx context.Context) ApiExtrasRelationshipsBulkPartialUpdateRequest {
	return ApiExtrasRelationshipsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasApiService) ExtrasRelationshipsBulkPartialUpdateExecute(r ApiExtrasRelationshipsBulkPartialUpdateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRelationship
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	relationship *Relationship
}

func (r ApiExtrasRelationshipsBulkUpdateRequest) Relationship(relationship Relationship) ApiExtrasRelationshipsBulkUpdateRequest {
	r.relationship = &relationship
	return r
}

func (r ApiExtrasRelationshipsBulkUpdateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsBulkUpdateExecute(r)
}

/*
ExtrasRelationshipsBulkUpdate Method for ExtrasRelationshipsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsBulkUpdate(ctx context.Context) ApiExtrasRelationshipsBulkUpdateRequest {
	return ApiExtrasRelationshipsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasApiService) ExtrasRelationshipsBulkUpdateExecute(r ApiExtrasRelationshipsBulkUpdateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationship == nil {
		return localVarReturnValue, nil, reportError("relationship is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationship
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	relationship *Relationship
}

func (r ApiExtrasRelationshipsCreateRequest) Relationship(relationship Relationship) ApiExtrasRelationshipsCreateRequest {
	r.relationship = &relationship
	return r
}

func (r ApiExtrasRelationshipsCreateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsCreateExecute(r)
}

/*
ExtrasRelationshipsCreate Method for ExtrasRelationshipsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsCreateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsCreate(ctx context.Context) ApiExtrasRelationshipsCreateRequest {
	return ApiExtrasRelationshipsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasApiService) ExtrasRelationshipsCreateExecute(r ApiExtrasRelationshipsCreateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationship == nil {
		return localVarReturnValue, nil, reportError("relationship is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationship
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasRelationshipsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasRelationshipsDestroyExecute(r)
}

/*
ExtrasRelationshipsDestroy Method for ExtrasRelationshipsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsDestroy(ctx context.Context, id string) ApiExtrasRelationshipsDestroyRequest {
	return ApiExtrasRelationshipsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasRelationshipsDestroyExecute(r ApiExtrasRelationshipsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	destinationType *[]int32
	destinationTypeN *[]int32
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	sourceType *[]int32
	sourceTypeN *[]int32
	type_ *string
	typeN *string
}

func (r ApiExtrasRelationshipsListRequest) DestinationType(destinationType []int32) ApiExtrasRelationshipsListRequest {
	r.destinationType = &destinationType
	return r
}

func (r ApiExtrasRelationshipsListRequest) DestinationTypeN(destinationTypeN []int32) ApiExtrasRelationshipsListRequest {
	r.destinationTypeN = &destinationTypeN
	return r
}

func (r ApiExtrasRelationshipsListRequest) Id(id []string) ApiExtrasRelationshipsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIc(idIc []string) ApiExtrasRelationshipsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIe(idIe []string) ApiExtrasRelationshipsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIew(idIew []string) ApiExtrasRelationshipsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIre(idIre []string) ApiExtrasRelationshipsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdIsw(idIsw []string) ApiExtrasRelationshipsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdN(idN []string) ApiExtrasRelationshipsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNic(idNic []string) ApiExtrasRelationshipsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNie(idNie []string) ApiExtrasRelationshipsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNiew(idNiew []string) ApiExtrasRelationshipsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNire(idNire []string) ApiExtrasRelationshipsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNisw(idNisw []string) ApiExtrasRelationshipsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdNre(idNre []string) ApiExtrasRelationshipsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasRelationshipsListRequest) IdRe(idRe []string) ApiExtrasRelationshipsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasRelationshipsListRequest) Limit(limit int32) ApiExtrasRelationshipsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasRelationshipsListRequest) Name(name []string) ApiExtrasRelationshipsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameIc(nameIc []string) ApiExtrasRelationshipsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameIe(nameIe []string) ApiExtrasRelationshipsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameIew(nameIew []string) ApiExtrasRelationshipsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameIre(nameIre []string) ApiExtrasRelationshipsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameIsw(nameIsw []string) ApiExtrasRelationshipsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameN(nameN []string) ApiExtrasRelationshipsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameNic(nameNic []string) ApiExtrasRelationshipsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameNie(nameNie []string) ApiExtrasRelationshipsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameNiew(nameNiew []string) ApiExtrasRelationshipsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameNire(nameNire []string) ApiExtrasRelationshipsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameNisw(nameNisw []string) ApiExtrasRelationshipsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameNre(nameNre []string) ApiExtrasRelationshipsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasRelationshipsListRequest) NameRe(nameRe []string) ApiExtrasRelationshipsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasRelationshipsListRequest) Offset(offset int32) ApiExtrasRelationshipsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasRelationshipsListRequest) SourceType(sourceType []int32) ApiExtrasRelationshipsListRequest {
	r.sourceType = &sourceType
	return r
}

func (r ApiExtrasRelationshipsListRequest) SourceTypeN(sourceTypeN []int32) ApiExtrasRelationshipsListRequest {
	r.sourceTypeN = &sourceTypeN
	return r
}

// Cardinality of this relationship
func (r ApiExtrasRelationshipsListRequest) Type_(type_ string) ApiExtrasRelationshipsListRequest {
	r.type_ = &type_
	return r
}

// Cardinality of this relationship
func (r ApiExtrasRelationshipsListRequest) TypeN(typeN string) ApiExtrasRelationshipsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiExtrasRelationshipsListRequest) Execute() (*PaginatedRelationshipList, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsListExecute(r)
}

/*
ExtrasRelationshipsList Method for ExtrasRelationshipsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasRelationshipsListRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsList(ctx context.Context) ApiExtrasRelationshipsListRequest {
	return ApiExtrasRelationshipsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRelationshipList
func (a *ExtrasApiService) ExtrasRelationshipsListExecute(r ApiExtrasRelationshipsListRequest) (*PaginatedRelationshipList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRelationshipList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.destinationType != nil {
		t := *r.destinationType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_type", parameterToString(t, "multi"))
		}
	}
	if r.destinationTypeN != nil {
		t := *r.destinationTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("destination_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("destination_type__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.sourceType != nil {
		t := *r.sourceType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_type", parameterToString(t, "multi"))
		}
	}
	if r.sourceTypeN != nil {
		t := *r.sourceTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("source_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("source_type__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedRelationship *PatchedRelationship
}

func (r ApiExtrasRelationshipsPartialUpdateRequest) PatchedRelationship(patchedRelationship PatchedRelationship) ApiExtrasRelationshipsPartialUpdateRequest {
	r.patchedRelationship = &patchedRelationship
	return r
}

func (r ApiExtrasRelationshipsPartialUpdateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsPartialUpdateExecute(r)
}

/*
ExtrasRelationshipsPartialUpdate Method for ExtrasRelationshipsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsPartialUpdate(ctx context.Context, id string) ApiExtrasRelationshipsPartialUpdateRequest {
	return ApiExtrasRelationshipsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasApiService) ExtrasRelationshipsPartialUpdateExecute(r ApiExtrasRelationshipsPartialUpdateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRelationship
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasRelationshipsRetrieveRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsRetrieveExecute(r)
}

/*
ExtrasRelationshipsRetrieve Method for ExtrasRelationshipsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsRetrieve(ctx context.Context, id string) ApiExtrasRelationshipsRetrieveRequest {
	return ApiExtrasRelationshipsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasApiService) ExtrasRelationshipsRetrieveExecute(r ApiExtrasRelationshipsRetrieveRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasRelationshipsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	relationship *Relationship
}

func (r ApiExtrasRelationshipsUpdateRequest) Relationship(relationship Relationship) ApiExtrasRelationshipsUpdateRequest {
	r.relationship = &relationship
	return r
}

func (r ApiExtrasRelationshipsUpdateRequest) Execute() (*Relationship, *http.Response, error) {
	return r.ApiService.ExtrasRelationshipsUpdateExecute(r)
}

/*
ExtrasRelationshipsUpdate Method for ExtrasRelationshipsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this relationship.
 @return ApiExtrasRelationshipsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasRelationshipsUpdate(ctx context.Context, id string) ApiExtrasRelationshipsUpdateRequest {
	return ApiExtrasRelationshipsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Relationship
func (a *ExtrasApiService) ExtrasRelationshipsUpdateExecute(r ApiExtrasRelationshipsUpdateRequest) (*Relationship, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Relationship
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasRelationshipsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/relationships/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.relationship == nil {
		return localVarReturnValue, nil, reportError("relationship is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.relationship
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsApproveCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	force *bool
}

// force execution even if start time has passed
func (r ApiExtrasScheduledJobsApproveCreateRequest) Force(force bool) ApiExtrasScheduledJobsApproveCreateRequest {
	r.force = &force
	return r
}

func (r ApiExtrasScheduledJobsApproveCreateRequest) Execute() (*ScheduledJob, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsApproveCreateExecute(r)
}

/*
ExtrasScheduledJobsApproveCreate Method for ExtrasScheduledJobsApproveCreate

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsApproveCreateRequest
*/
func (a *ExtrasApiService) ExtrasScheduledJobsApproveCreate(ctx context.Context, id string) ApiExtrasScheduledJobsApproveCreateRequest {
	return ApiExtrasScheduledJobsApproveCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduledJob
func (a *ExtrasApiService) ExtrasScheduledJobsApproveCreateExecute(r ApiExtrasScheduledJobsApproveCreateRequest) (*ScheduledJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasScheduledJobsApproveCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/approve/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsDenyCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasScheduledJobsDenyCreateRequest) Execute() (*ScheduledJob, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsDenyCreateExecute(r)
}

/*
ExtrasScheduledJobsDenyCreate Method for ExtrasScheduledJobsDenyCreate

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsDenyCreateRequest
*/
func (a *ExtrasApiService) ExtrasScheduledJobsDenyCreate(ctx context.Context, id string) ApiExtrasScheduledJobsDenyCreateRequest {
	return ApiExtrasScheduledJobsDenyCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduledJob
func (a *ExtrasApiService) ExtrasScheduledJobsDenyCreateExecute(r ApiExtrasScheduledJobsDenyCreateRequest) (*ScheduledJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasScheduledJobsDenyCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/deny/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsDryRunCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasScheduledJobsDryRunCreateRequest) Execute() (*JobResult, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsDryRunCreateExecute(r)
}

/*
ExtrasScheduledJobsDryRunCreate Method for ExtrasScheduledJobsDryRunCreate

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsDryRunCreateRequest
*/
func (a *ExtrasApiService) ExtrasScheduledJobsDryRunCreate(ctx context.Context, id string) ApiExtrasScheduledJobsDryRunCreateRequest {
	return ApiExtrasScheduledJobsDryRunCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JobResult
func (a *ExtrasApiService) ExtrasScheduledJobsDryRunCreateExecute(r ApiExtrasScheduledJobsDryRunCreateRequest) (*JobResult, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasScheduledJobsDryRunCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/dry-run/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	firstRun *time.Time
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	jobModel *[]string
	jobModelN *[]string
	jobModelId *[]*string
	jobModelIdN *[]*string
	lastRun *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	totalRunCount *[]int32
	totalRunCountGt *[]int32
	totalRunCountGte *[]int32
	totalRunCountLt *[]int32
	totalRunCountLte *[]int32
	totalRunCountN *[]int32
}

func (r ApiExtrasScheduledJobsListRequest) FirstRun(firstRun time.Time) ApiExtrasScheduledJobsListRequest {
	r.firstRun = &firstRun
	return r
}

func (r ApiExtrasScheduledJobsListRequest) Id(id []string) ApiExtrasScheduledJobsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIc(idIc []string) ApiExtrasScheduledJobsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIe(idIe []string) ApiExtrasScheduledJobsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIew(idIew []string) ApiExtrasScheduledJobsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIre(idIre []string) ApiExtrasScheduledJobsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdIsw(idIsw []string) ApiExtrasScheduledJobsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdN(idN []string) ApiExtrasScheduledJobsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNic(idNic []string) ApiExtrasScheduledJobsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNie(idNie []string) ApiExtrasScheduledJobsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNiew(idNiew []string) ApiExtrasScheduledJobsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNire(idNire []string) ApiExtrasScheduledJobsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNisw(idNisw []string) ApiExtrasScheduledJobsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdNre(idNre []string) ApiExtrasScheduledJobsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) IdRe(idRe []string) ApiExtrasScheduledJobsListRequest {
	r.idRe = &idRe
	return r
}

// Job (slug)
func (r ApiExtrasScheduledJobsListRequest) JobModel(jobModel []string) ApiExtrasScheduledJobsListRequest {
	r.jobModel = &jobModel
	return r
}

// Job (slug)
func (r ApiExtrasScheduledJobsListRequest) JobModelN(jobModelN []string) ApiExtrasScheduledJobsListRequest {
	r.jobModelN = &jobModelN
	return r
}

// Job (ID)
func (r ApiExtrasScheduledJobsListRequest) JobModelId(jobModelId []*string) ApiExtrasScheduledJobsListRequest {
	r.jobModelId = &jobModelId
	return r
}

// Job (ID)
func (r ApiExtrasScheduledJobsListRequest) JobModelIdN(jobModelIdN []*string) ApiExtrasScheduledJobsListRequest {
	r.jobModelIdN = &jobModelIdN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) LastRun(lastRun time.Time) ApiExtrasScheduledJobsListRequest {
	r.lastRun = &lastRun
	return r
}

// Number of results to return per page.
func (r ApiExtrasScheduledJobsListRequest) Limit(limit int32) ApiExtrasScheduledJobsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasScheduledJobsListRequest) Name(name []string) ApiExtrasScheduledJobsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIc(nameIc []string) ApiExtrasScheduledJobsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIe(nameIe []string) ApiExtrasScheduledJobsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIew(nameIew []string) ApiExtrasScheduledJobsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIre(nameIre []string) ApiExtrasScheduledJobsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameIsw(nameIsw []string) ApiExtrasScheduledJobsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameN(nameN []string) ApiExtrasScheduledJobsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNic(nameNic []string) ApiExtrasScheduledJobsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNie(nameNie []string) ApiExtrasScheduledJobsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNiew(nameNiew []string) ApiExtrasScheduledJobsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNire(nameNire []string) ApiExtrasScheduledJobsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNisw(nameNisw []string) ApiExtrasScheduledJobsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameNre(nameNre []string) ApiExtrasScheduledJobsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasScheduledJobsListRequest) NameRe(nameRe []string) ApiExtrasScheduledJobsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasScheduledJobsListRequest) Offset(offset int32) ApiExtrasScheduledJobsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasScheduledJobsListRequest) Q(q string) ApiExtrasScheduledJobsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCount(totalRunCount []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCount = &totalRunCount
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountGt(totalRunCountGt []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountGt = &totalRunCountGt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountGte(totalRunCountGte []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountGte = &totalRunCountGte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountLt(totalRunCountLt []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountLt = &totalRunCountLt
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountLte(totalRunCountLte []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountLte = &totalRunCountLte
	return r
}

func (r ApiExtrasScheduledJobsListRequest) TotalRunCountN(totalRunCountN []int32) ApiExtrasScheduledJobsListRequest {
	r.totalRunCountN = &totalRunCountN
	return r
}

func (r ApiExtrasScheduledJobsListRequest) Execute() (*PaginatedScheduledJobList, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsListExecute(r)
}

/*
ExtrasScheduledJobsList Method for ExtrasScheduledJobsList

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasScheduledJobsListRequest
*/
func (a *ExtrasApiService) ExtrasScheduledJobsList(ctx context.Context) ApiExtrasScheduledJobsListRequest {
	return ApiExtrasScheduledJobsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedScheduledJobList
func (a *ExtrasApiService) ExtrasScheduledJobsListExecute(r ApiExtrasScheduledJobsListRequest) (*PaginatedScheduledJobList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedScheduledJobList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasScheduledJobsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.firstRun != nil {
		localVarQueryParams.Add("first_run", parameterToString(*r.firstRun, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.jobModel != nil {
		t := *r.jobModel
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model", parameterToString(t, "multi"))
		}
	}
	if r.jobModelN != nil {
		t := *r.jobModelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model__n", parameterToString(t, "multi"))
		}
	}
	if r.jobModelId != nil {
		t := *r.jobModelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model_id", parameterToString(t, "multi"))
		}
	}
	if r.jobModelIdN != nil {
		t := *r.jobModelIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("job_model_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("job_model_id__n", parameterToString(t, "multi"))
		}
	}
	if r.lastRun != nil {
		localVarQueryParams.Add("last_run", parameterToString(*r.lastRun, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.totalRunCount != nil {
		t := *r.totalRunCount
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("total_run_count", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("total_run_count", parameterToString(t, "multi"))
		}
	}
	if r.totalRunCountGt != nil {
		t := *r.totalRunCountGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("total_run_count__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("total_run_count__gt", parameterToString(t, "multi"))
		}
	}
	if r.totalRunCountGte != nil {
		t := *r.totalRunCountGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("total_run_count__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("total_run_count__gte", parameterToString(t, "multi"))
		}
	}
	if r.totalRunCountLt != nil {
		t := *r.totalRunCountLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("total_run_count__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("total_run_count__lt", parameterToString(t, "multi"))
		}
	}
	if r.totalRunCountLte != nil {
		t := *r.totalRunCountLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("total_run_count__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("total_run_count__lte", parameterToString(t, "multi"))
		}
	}
	if r.totalRunCountN != nil {
		t := *r.totalRunCountN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("total_run_count__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("total_run_count__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasScheduledJobsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasScheduledJobsRetrieveRequest) Execute() (*ScheduledJob, *http.Response, error) {
	return r.ApiService.ExtrasScheduledJobsRetrieveExecute(r)
}

/*
ExtrasScheduledJobsRetrieve Method for ExtrasScheduledJobsRetrieve

Retrieve a list of scheduled jobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this scheduled job.
 @return ApiExtrasScheduledJobsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasScheduledJobsRetrieve(ctx context.Context, id string) ApiExtrasScheduledJobsRetrieveRequest {
	return ApiExtrasScheduledJobsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ScheduledJob
func (a *ExtrasApiService) ExtrasScheduledJobsRetrieveExecute(r ApiExtrasScheduledJobsRetrieveRequest) (*ScheduledJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasScheduledJobsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/scheduled-jobs/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasSecretsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsBulkDestroyExecute(r)
}

/*
ExtrasSecretsBulkDestroy Method for ExtrasSecretsBulkDestroy

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasSecretsBulkDestroy(ctx context.Context) ApiExtrasSecretsBulkDestroyRequest {
	return ApiExtrasSecretsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasSecretsBulkDestroyExecute(r ApiExtrasSecretsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedSecret *PatchedSecret
}

func (r ApiExtrasSecretsBulkPartialUpdateRequest) PatchedSecret(patchedSecret PatchedSecret) ApiExtrasSecretsBulkPartialUpdateRequest {
	r.patchedSecret = &patchedSecret
	return r
}

func (r ApiExtrasSecretsBulkPartialUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsBulkPartialUpdateExecute(r)
}

/*
ExtrasSecretsBulkPartialUpdate Method for ExtrasSecretsBulkPartialUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsBulkPartialUpdate(ctx context.Context) ApiExtrasSecretsBulkPartialUpdateRequest {
	return ApiExtrasSecretsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasApiService) ExtrasSecretsBulkPartialUpdateExecute(r ApiExtrasSecretsBulkPartialUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecret
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	secret *Secret
}

func (r ApiExtrasSecretsBulkUpdateRequest) Secret(secret Secret) ApiExtrasSecretsBulkUpdateRequest {
	r.secret = &secret
	return r
}

func (r ApiExtrasSecretsBulkUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsBulkUpdateExecute(r)
}

/*
ExtrasSecretsBulkUpdate Method for ExtrasSecretsBulkUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsBulkUpdate(ctx context.Context) ApiExtrasSecretsBulkUpdateRequest {
	return ApiExtrasSecretsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasApiService) ExtrasSecretsBulkUpdateExecute(r ApiExtrasSecretsBulkUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secret == nil {
		return localVarReturnValue, nil, reportError("secret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secret
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	secret *Secret
}

func (r ApiExtrasSecretsCreateRequest) Secret(secret Secret) ApiExtrasSecretsCreateRequest {
	r.secret = &secret
	return r
}

func (r ApiExtrasSecretsCreateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsCreateExecute(r)
}

/*
ExtrasSecretsCreate Method for ExtrasSecretsCreate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsCreateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsCreate(ctx context.Context) ApiExtrasSecretsCreateRequest {
	return ApiExtrasSecretsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasApiService) ExtrasSecretsCreateExecute(r ApiExtrasSecretsCreateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secret == nil {
		return localVarReturnValue, nil, reportError("secret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secret
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasSecretsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsDestroyExecute(r)
}

/*
ExtrasSecretsDestroy Method for ExtrasSecretsDestroy

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasSecretsDestroy(ctx context.Context, id string) ApiExtrasSecretsDestroyRequest {
	return ApiExtrasSecretsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasSecretsDestroyExecute(r ApiExtrasSecretsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsBulkDestroyExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsBulkDestroy Method for ExtrasSecretsGroupsAssociationsBulkDestroy

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsBulkDestroy(ctx context.Context) ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest {
	return ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsBulkDestroyExecute(r ApiExtrasSecretsGroupsAssociationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWritableSecretsGroupAssociation *PatchedWritableSecretsGroupAssociation
}

func (r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) PatchedWritableSecretsGroupAssociation(patchedWritableSecretsGroupAssociation PatchedWritableSecretsGroupAssociation) ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest {
	r.patchedWritableSecretsGroupAssociation = &patchedWritableSecretsGroupAssociation
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsBulkPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsBulkPartialUpdate Method for ExtrasSecretsGroupsAssociationsBulkPartialUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsBulkPartialUpdate(ctx context.Context) ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsBulkPartialUpdateExecute(r ApiExtrasSecretsGroupsAssociationsBulkPartialUpdateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSecretsGroupAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableSecretsGroupAssociation *WritableSecretsGroupAssociation
}

func (r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) WritableSecretsGroupAssociation(writableSecretsGroupAssociation WritableSecretsGroupAssociation) ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest {
	r.writableSecretsGroupAssociation = &writableSecretsGroupAssociation
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsBulkUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsBulkUpdate Method for ExtrasSecretsGroupsAssociationsBulkUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsBulkUpdate(ctx context.Context) ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsBulkUpdateExecute(r ApiExtrasSecretsGroupsAssociationsBulkUpdateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSecretsGroupAssociation == nil {
		return localVarReturnValue, nil, reportError("writableSecretsGroupAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSecretsGroupAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	writableSecretsGroupAssociation *WritableSecretsGroupAssociation
}

func (r ApiExtrasSecretsGroupsAssociationsCreateRequest) WritableSecretsGroupAssociation(writableSecretsGroupAssociation WritableSecretsGroupAssociation) ApiExtrasSecretsGroupsAssociationsCreateRequest {
	r.writableSecretsGroupAssociation = &writableSecretsGroupAssociation
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsCreateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsCreateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsCreate Method for ExtrasSecretsGroupsAssociationsCreate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsCreateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsCreate(ctx context.Context) ApiExtrasSecretsGroupsAssociationsCreateRequest {
	return ApiExtrasSecretsGroupsAssociationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsCreateExecute(r ApiExtrasSecretsGroupsAssociationsCreateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSecretsGroupAssociation == nil {
		return localVarReturnValue, nil, reportError("writableSecretsGroupAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSecretsGroupAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasSecretsGroupsAssociationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsDestroyExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsDestroy Method for ExtrasSecretsGroupsAssociationsDestroy

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsDestroy(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsDestroyRequest {
	return ApiExtrasSecretsGroupsAssociationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsDestroyExecute(r ApiExtrasSecretsGroupsAssociationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	accessType *[]string
	accessTypeN *[]string
	group *[]string
	groupN *[]string
	groupId *[]string
	groupIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	offset *int32
	secret *[]string
	secretN *[]string
	secretId *[]string
	secretIdN *[]string
	secretType *[]string
	secretTypeN *[]string
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessType(accessType []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessType = &accessType
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) AccessTypeN(accessTypeN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.accessTypeN = &accessTypeN
	return r
}

// Group (slug)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Group(group []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.group = &group
	return r
}

// Group (slug)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) GroupN(groupN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.groupN = &groupN
	return r
}

// Group (ID)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) GroupId(groupId []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.groupId = &groupId
	return r
}

// Group (ID)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) GroupIdN(groupIdN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) Id(id []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIc(idIc []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIe(idIe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIew(idIew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIre(idIre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdIsw(idIsw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdN(idN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNic(idNic []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNie(idNie []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNiew(idNiew []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNire(idNire []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNisw(idNisw []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdNre(idNre []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) IdRe(idRe []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Limit(limit int32) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Offset(offset int32) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.offset = &offset
	return r
}

// Secret (slug)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) Secret(secret []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secret = &secret
	return r
}

// Secret (slug)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretN(secretN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretN = &secretN
	return r
}

// Secret (ID)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretId(secretId []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretId = &secretId
	return r
}

// Secret (ID)
func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretIdN(secretIdN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretIdN = &secretIdN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretType(secretType []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretType = &secretType
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) SecretTypeN(secretTypeN []string) ApiExtrasSecretsGroupsAssociationsListRequest {
	r.secretTypeN = &secretTypeN
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsListRequest) Execute() (*PaginatedSecretsGroupAssociationList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsListExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsList Method for ExtrasSecretsGroupsAssociationsList

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsAssociationsListRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsList(ctx context.Context) ApiExtrasSecretsGroupsAssociationsListRequest {
	return ApiExtrasSecretsGroupsAssociationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSecretsGroupAssociationList
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsListExecute(r ApiExtrasSecretsGroupsAssociationsListRequest) (*PaginatedSecretsGroupAssociationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSecretsGroupAssociationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accessType != nil {
		t := *r.accessType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("access_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("access_type", parameterToString(t, "multi"))
		}
	}
	if r.accessTypeN != nil {
		t := *r.accessTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("access_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("access_type__n", parameterToString(t, "multi"))
		}
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group", parameterToString(t, "multi"))
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group__n", parameterToString(t, "multi"))
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id", parameterToString(t, "multi"))
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.secret != nil {
		t := *r.secret
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secret", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secret", parameterToString(t, "multi"))
		}
	}
	if r.secretN != nil {
		t := *r.secretN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secret__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secret__n", parameterToString(t, "multi"))
		}
	}
	if r.secretId != nil {
		t := *r.secretId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secret_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secret_id", parameterToString(t, "multi"))
		}
	}
	if r.secretIdN != nil {
		t := *r.secretIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secret_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secret_id__n", parameterToString(t, "multi"))
		}
	}
	if r.secretType != nil {
		t := *r.secretType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secret_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secret_type", parameterToString(t, "multi"))
		}
	}
	if r.secretTypeN != nil {
		t := *r.secretTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secret_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secret_type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWritableSecretsGroupAssociation *PatchedWritableSecretsGroupAssociation
}

func (r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) PatchedWritableSecretsGroupAssociation(patchedWritableSecretsGroupAssociation PatchedWritableSecretsGroupAssociation) ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest {
	r.patchedWritableSecretsGroupAssociation = &patchedWritableSecretsGroupAssociation
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsPartialUpdate Method for ExtrasSecretsGroupsAssociationsPartialUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsPartialUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsPartialUpdateExecute(r ApiExtrasSecretsGroupsAssociationsPartialUpdateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSecretsGroupAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasSecretsGroupsAssociationsRetrieveRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsRetrieveExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsRetrieve Method for ExtrasSecretsGroupsAssociationsRetrieve

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsRetrieve(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsRetrieveRequest {
	return ApiExtrasSecretsGroupsAssociationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsRetrieveExecute(r ApiExtrasSecretsGroupsAssociationsRetrieveRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsAssociationsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	writableSecretsGroupAssociation *WritableSecretsGroupAssociation
}

func (r ApiExtrasSecretsGroupsAssociationsUpdateRequest) WritableSecretsGroupAssociation(writableSecretsGroupAssociation WritableSecretsGroupAssociation) ApiExtrasSecretsGroupsAssociationsUpdateRequest {
	r.writableSecretsGroupAssociation = &writableSecretsGroupAssociation
	return r
}

func (r ApiExtrasSecretsGroupsAssociationsUpdateRequest) Execute() (*SecretsGroupAssociation, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsAssociationsUpdateExecute(r)
}

/*
ExtrasSecretsGroupsAssociationsUpdate Method for ExtrasSecretsGroupsAssociationsUpdate

Manage Secrets Group Associations through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group association.
 @return ApiExtrasSecretsGroupsAssociationsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsAssociationsUpdateRequest {
	return ApiExtrasSecretsGroupsAssociationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroupAssociation
func (a *ExtrasApiService) ExtrasSecretsGroupsAssociationsUpdateExecute(r ApiExtrasSecretsGroupsAssociationsUpdateRequest) (*SecretsGroupAssociation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroupAssociation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsAssociationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups-associations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSecretsGroupAssociation == nil {
		return localVarReturnValue, nil, reportError("writableSecretsGroupAssociation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSecretsGroupAssociation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasSecretsGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsBulkDestroyExecute(r)
}

/*
ExtrasSecretsGroupsBulkDestroy Method for ExtrasSecretsGroupsBulkDestroy

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsBulkDestroy(ctx context.Context) ApiExtrasSecretsGroupsBulkDestroyRequest {
	return ApiExtrasSecretsGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasSecretsGroupsBulkDestroyExecute(r ApiExtrasSecretsGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedSecretsGroup *PatchedSecretsGroup
}

func (r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) PatchedSecretsGroup(patchedSecretsGroup PatchedSecretsGroup) ApiExtrasSecretsGroupsBulkPartialUpdateRequest {
	r.patchedSecretsGroup = &patchedSecretsGroup
	return r
}

func (r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsBulkPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsBulkPartialUpdate Method for ExtrasSecretsGroupsBulkPartialUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsBulkPartialUpdate(ctx context.Context) ApiExtrasSecretsGroupsBulkPartialUpdateRequest {
	return ApiExtrasSecretsGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasApiService) ExtrasSecretsGroupsBulkPartialUpdateExecute(r ApiExtrasSecretsGroupsBulkPartialUpdateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretsGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	secretsGroup *SecretsGroup
}

func (r ApiExtrasSecretsGroupsBulkUpdateRequest) SecretsGroup(secretsGroup SecretsGroup) ApiExtrasSecretsGroupsBulkUpdateRequest {
	r.secretsGroup = &secretsGroup
	return r
}

func (r ApiExtrasSecretsGroupsBulkUpdateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsBulkUpdateExecute(r)
}

/*
ExtrasSecretsGroupsBulkUpdate Method for ExtrasSecretsGroupsBulkUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsBulkUpdate(ctx context.Context) ApiExtrasSecretsGroupsBulkUpdateRequest {
	return ApiExtrasSecretsGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasApiService) ExtrasSecretsGroupsBulkUpdateExecute(r ApiExtrasSecretsGroupsBulkUpdateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroup == nil {
		return localVarReturnValue, nil, reportError("secretsGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	secretsGroup *SecretsGroup
}

func (r ApiExtrasSecretsGroupsCreateRequest) SecretsGroup(secretsGroup SecretsGroup) ApiExtrasSecretsGroupsCreateRequest {
	r.secretsGroup = &secretsGroup
	return r
}

func (r ApiExtrasSecretsGroupsCreateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsCreateExecute(r)
}

/*
ExtrasSecretsGroupsCreate Method for ExtrasSecretsGroupsCreate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsCreateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsCreate(ctx context.Context) ApiExtrasSecretsGroupsCreateRequest {
	return ApiExtrasSecretsGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasApiService) ExtrasSecretsGroupsCreateExecute(r ApiExtrasSecretsGroupsCreateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroup == nil {
		return localVarReturnValue, nil, reportError("secretsGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasSecretsGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsDestroyExecute(r)
}

/*
ExtrasSecretsGroupsDestroy Method for ExtrasSecretsGroupsDestroy

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsDestroy(ctx context.Context, id string) ApiExtrasSecretsGroupsDestroyRequest {
	return ApiExtrasSecretsGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasSecretsGroupsDestroyExecute(r ApiExtrasSecretsGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiExtrasSecretsGroupsListRequest) Created(created string) ApiExtrasSecretsGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedGte(createdGte string) ApiExtrasSecretsGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) CreatedLte(createdLte string) ApiExtrasSecretsGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Id(id []string) ApiExtrasSecretsGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIc(idIc []string) ApiExtrasSecretsGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIe(idIe []string) ApiExtrasSecretsGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIew(idIew []string) ApiExtrasSecretsGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIre(idIre []string) ApiExtrasSecretsGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdIsw(idIsw []string) ApiExtrasSecretsGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdN(idN []string) ApiExtrasSecretsGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNic(idNic []string) ApiExtrasSecretsGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNie(idNie []string) ApiExtrasSecretsGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNiew(idNiew []string) ApiExtrasSecretsGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNire(idNire []string) ApiExtrasSecretsGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNisw(idNisw []string) ApiExtrasSecretsGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdNre(idNre []string) ApiExtrasSecretsGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) IdRe(idRe []string) ApiExtrasSecretsGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdated(lastUpdated time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasSecretsGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsGroupsListRequest) Limit(limit int32) ApiExtrasSecretsGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Name(name []string) ApiExtrasSecretsGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIc(nameIc []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIe(nameIe []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIew(nameIew []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIre(nameIre []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameIsw(nameIsw []string) ApiExtrasSecretsGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameN(nameN []string) ApiExtrasSecretsGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNic(nameNic []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNie(nameNie []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNiew(nameNiew []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNire(nameNire []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNisw(nameNisw []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameNre(nameNre []string) ApiExtrasSecretsGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) NameRe(nameRe []string) ApiExtrasSecretsGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsGroupsListRequest) Offset(offset int32) ApiExtrasSecretsGroupsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasSecretsGroupsListRequest) Q(q string) ApiExtrasSecretsGroupsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Slug(slug []string) ApiExtrasSecretsGroupsListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugIc(slugIc []string) ApiExtrasSecretsGroupsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugIe(slugIe []string) ApiExtrasSecretsGroupsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugIew(slugIew []string) ApiExtrasSecretsGroupsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugIre(slugIre []string) ApiExtrasSecretsGroupsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugIsw(slugIsw []string) ApiExtrasSecretsGroupsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugN(slugN []string) ApiExtrasSecretsGroupsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugNic(slugNic []string) ApiExtrasSecretsGroupsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugNie(slugNie []string) ApiExtrasSecretsGroupsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugNiew(slugNiew []string) ApiExtrasSecretsGroupsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugNire(slugNire []string) ApiExtrasSecretsGroupsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugNisw(slugNisw []string) ApiExtrasSecretsGroupsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugNre(slugNre []string) ApiExtrasSecretsGroupsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) SlugRe(slugRe []string) ApiExtrasSecretsGroupsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasSecretsGroupsListRequest) Execute() (*PaginatedSecretsGroupList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsListExecute(r)
}

/*
ExtrasSecretsGroupsList Method for ExtrasSecretsGroupsList

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsGroupsListRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsList(ctx context.Context) ApiExtrasSecretsGroupsListRequest {
	return ApiExtrasSecretsGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSecretsGroupList
func (a *ExtrasApiService) ExtrasSecretsGroupsListExecute(r ApiExtrasSecretsGroupsListRequest) (*PaginatedSecretsGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSecretsGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedSecretsGroup *PatchedSecretsGroup
}

func (r ApiExtrasSecretsGroupsPartialUpdateRequest) PatchedSecretsGroup(patchedSecretsGroup PatchedSecretsGroup) ApiExtrasSecretsGroupsPartialUpdateRequest {
	r.patchedSecretsGroup = &patchedSecretsGroup
	return r
}

func (r ApiExtrasSecretsGroupsPartialUpdateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsPartialUpdateExecute(r)
}

/*
ExtrasSecretsGroupsPartialUpdate Method for ExtrasSecretsGroupsPartialUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsPartialUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsPartialUpdateRequest {
	return ApiExtrasSecretsGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasApiService) ExtrasSecretsGroupsPartialUpdateExecute(r ApiExtrasSecretsGroupsPartialUpdateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecretsGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasSecretsGroupsRetrieveRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsRetrieveExecute(r)
}

/*
ExtrasSecretsGroupsRetrieve Method for ExtrasSecretsGroupsRetrieve

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsRetrieve(ctx context.Context, id string) ApiExtrasSecretsGroupsRetrieveRequest {
	return ApiExtrasSecretsGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasApiService) ExtrasSecretsGroupsRetrieveExecute(r ApiExtrasSecretsGroupsRetrieveRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	secretsGroup *SecretsGroup
}

func (r ApiExtrasSecretsGroupsUpdateRequest) SecretsGroup(secretsGroup SecretsGroup) ApiExtrasSecretsGroupsUpdateRequest {
	r.secretsGroup = &secretsGroup
	return r
}

func (r ApiExtrasSecretsGroupsUpdateRequest) Execute() (*SecretsGroup, *http.Response, error) {
	return r.ApiService.ExtrasSecretsGroupsUpdateExecute(r)
}

/*
ExtrasSecretsGroupsUpdate Method for ExtrasSecretsGroupsUpdate

Manage Secrets Groups through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secrets group.
 @return ApiExtrasSecretsGroupsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsGroupsUpdate(ctx context.Context, id string) ApiExtrasSecretsGroupsUpdateRequest {
	return ApiExtrasSecretsGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SecretsGroup
func (a *ExtrasApiService) ExtrasSecretsGroupsUpdateExecute(r ApiExtrasSecretsGroupsUpdateRequest) (*SecretsGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SecretsGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secretsGroup == nil {
		return localVarReturnValue, nil, reportError("secretsGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secretsGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	provider *[]string
	providerIc *[]string
	providerIe *[]string
	providerIew *[]string
	providerIre *[]string
	providerIsw *[]string
	providerN *[]string
	providerNic *[]string
	providerNie *[]string
	providerNiew *[]string
	providerNire *[]string
	providerNisw *[]string
	providerNre *[]string
	providerRe *[]string
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiExtrasSecretsListRequest) Created(created string) ApiExtrasSecretsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedGte(createdGte string) ApiExtrasSecretsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasSecretsListRequest) CreatedLte(createdLte string) ApiExtrasSecretsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasSecretsListRequest) Id(id []string) ApiExtrasSecretsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasSecretsListRequest) IdIc(idIc []string) ApiExtrasSecretsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasSecretsListRequest) IdIe(idIe []string) ApiExtrasSecretsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasSecretsListRequest) IdIew(idIew []string) ApiExtrasSecretsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasSecretsListRequest) IdIre(idIre []string) ApiExtrasSecretsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasSecretsListRequest) IdIsw(idIsw []string) ApiExtrasSecretsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasSecretsListRequest) IdN(idN []string) ApiExtrasSecretsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasSecretsListRequest) IdNic(idNic []string) ApiExtrasSecretsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasSecretsListRequest) IdNie(idNie []string) ApiExtrasSecretsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasSecretsListRequest) IdNiew(idNiew []string) ApiExtrasSecretsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasSecretsListRequest) IdNire(idNire []string) ApiExtrasSecretsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasSecretsListRequest) IdNisw(idNisw []string) ApiExtrasSecretsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasSecretsListRequest) IdNre(idNre []string) ApiExtrasSecretsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasSecretsListRequest) IdRe(idRe []string) ApiExtrasSecretsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdated(lastUpdated time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasSecretsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasSecretsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasSecretsListRequest) Limit(limit int32) ApiExtrasSecretsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasSecretsListRequest) Name(name []string) ApiExtrasSecretsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasSecretsListRequest) NameIc(nameIc []string) ApiExtrasSecretsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasSecretsListRequest) NameIe(nameIe []string) ApiExtrasSecretsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasSecretsListRequest) NameIew(nameIew []string) ApiExtrasSecretsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasSecretsListRequest) NameIre(nameIre []string) ApiExtrasSecretsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasSecretsListRequest) NameIsw(nameIsw []string) ApiExtrasSecretsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasSecretsListRequest) NameN(nameN []string) ApiExtrasSecretsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasSecretsListRequest) NameNic(nameNic []string) ApiExtrasSecretsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasSecretsListRequest) NameNie(nameNie []string) ApiExtrasSecretsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasSecretsListRequest) NameNiew(nameNiew []string) ApiExtrasSecretsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasSecretsListRequest) NameNire(nameNire []string) ApiExtrasSecretsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasSecretsListRequest) NameNisw(nameNisw []string) ApiExtrasSecretsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasSecretsListRequest) NameNre(nameNre []string) ApiExtrasSecretsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasSecretsListRequest) NameRe(nameRe []string) ApiExtrasSecretsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasSecretsListRequest) Offset(offset int32) ApiExtrasSecretsListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasSecretsListRequest) Provider(provider []string) ApiExtrasSecretsListRequest {
	r.provider = &provider
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIc(providerIc []string) ApiExtrasSecretsListRequest {
	r.providerIc = &providerIc
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIe(providerIe []string) ApiExtrasSecretsListRequest {
	r.providerIe = &providerIe
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIew(providerIew []string) ApiExtrasSecretsListRequest {
	r.providerIew = &providerIew
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIre(providerIre []string) ApiExtrasSecretsListRequest {
	r.providerIre = &providerIre
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderIsw(providerIsw []string) ApiExtrasSecretsListRequest {
	r.providerIsw = &providerIsw
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderN(providerN []string) ApiExtrasSecretsListRequest {
	r.providerN = &providerN
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNic(providerNic []string) ApiExtrasSecretsListRequest {
	r.providerNic = &providerNic
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNie(providerNie []string) ApiExtrasSecretsListRequest {
	r.providerNie = &providerNie
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNiew(providerNiew []string) ApiExtrasSecretsListRequest {
	r.providerNiew = &providerNiew
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNire(providerNire []string) ApiExtrasSecretsListRequest {
	r.providerNire = &providerNire
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNisw(providerNisw []string) ApiExtrasSecretsListRequest {
	r.providerNisw = &providerNisw
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderNre(providerNre []string) ApiExtrasSecretsListRequest {
	r.providerNre = &providerNre
	return r
}

func (r ApiExtrasSecretsListRequest) ProviderRe(providerRe []string) ApiExtrasSecretsListRequest {
	r.providerRe = &providerRe
	return r
}

// Search
func (r ApiExtrasSecretsListRequest) Q(q string) ApiExtrasSecretsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasSecretsListRequest) Slug(slug []string) ApiExtrasSecretsListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasSecretsListRequest) SlugIc(slugIc []string) ApiExtrasSecretsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasSecretsListRequest) SlugIe(slugIe []string) ApiExtrasSecretsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasSecretsListRequest) SlugIew(slugIew []string) ApiExtrasSecretsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasSecretsListRequest) SlugIre(slugIre []string) ApiExtrasSecretsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasSecretsListRequest) SlugIsw(slugIsw []string) ApiExtrasSecretsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasSecretsListRequest) SlugN(slugN []string) ApiExtrasSecretsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasSecretsListRequest) SlugNic(slugNic []string) ApiExtrasSecretsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasSecretsListRequest) SlugNie(slugNie []string) ApiExtrasSecretsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasSecretsListRequest) SlugNiew(slugNiew []string) ApiExtrasSecretsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasSecretsListRequest) SlugNire(slugNire []string) ApiExtrasSecretsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasSecretsListRequest) SlugNisw(slugNisw []string) ApiExtrasSecretsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasSecretsListRequest) SlugNre(slugNre []string) ApiExtrasSecretsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasSecretsListRequest) SlugRe(slugRe []string) ApiExtrasSecretsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasSecretsListRequest) Execute() (*PaginatedSecretList, *http.Response, error) {
	return r.ApiService.ExtrasSecretsListExecute(r)
}

/*
ExtrasSecretsList Method for ExtrasSecretsList

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasSecretsListRequest
*/
func (a *ExtrasApiService) ExtrasSecretsList(ctx context.Context) ApiExtrasSecretsListRequest {
	return ApiExtrasSecretsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSecretList
func (a *ExtrasApiService) ExtrasSecretsListExecute(r ApiExtrasSecretsListRequest) (*PaginatedSecretList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSecretList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.provider != nil {
		t := *r.provider
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider", parameterToString(t, "multi"))
		}
	}
	if r.providerIc != nil {
		t := *r.providerIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__ic", parameterToString(t, "multi"))
		}
	}
	if r.providerIe != nil {
		t := *r.providerIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__ie", parameterToString(t, "multi"))
		}
	}
	if r.providerIew != nil {
		t := *r.providerIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__iew", parameterToString(t, "multi"))
		}
	}
	if r.providerIre != nil {
		t := *r.providerIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__ire", parameterToString(t, "multi"))
		}
	}
	if r.providerIsw != nil {
		t := *r.providerIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__isw", parameterToString(t, "multi"))
		}
	}
	if r.providerN != nil {
		t := *r.providerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__n", parameterToString(t, "multi"))
		}
	}
	if r.providerNic != nil {
		t := *r.providerNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__nic", parameterToString(t, "multi"))
		}
	}
	if r.providerNie != nil {
		t := *r.providerNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__nie", parameterToString(t, "multi"))
		}
	}
	if r.providerNiew != nil {
		t := *r.providerNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__niew", parameterToString(t, "multi"))
		}
	}
	if r.providerNire != nil {
		t := *r.providerNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__nire", parameterToString(t, "multi"))
		}
	}
	if r.providerNisw != nil {
		t := *r.providerNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__nisw", parameterToString(t, "multi"))
		}
	}
	if r.providerNre != nil {
		t := *r.providerNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__nre", parameterToString(t, "multi"))
		}
	}
	if r.providerRe != nil {
		t := *r.providerRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("provider__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("provider__re", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedSecret *PatchedSecret
}

func (r ApiExtrasSecretsPartialUpdateRequest) PatchedSecret(patchedSecret PatchedSecret) ApiExtrasSecretsPartialUpdateRequest {
	r.patchedSecret = &patchedSecret
	return r
}

func (r ApiExtrasSecretsPartialUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsPartialUpdateExecute(r)
}

/*
ExtrasSecretsPartialUpdate Method for ExtrasSecretsPartialUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsPartialUpdate(ctx context.Context, id string) ApiExtrasSecretsPartialUpdateRequest {
	return ApiExtrasSecretsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasApiService) ExtrasSecretsPartialUpdateExecute(r ApiExtrasSecretsPartialUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSecret
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasSecretsRetrieveRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsRetrieveExecute(r)
}

/*
ExtrasSecretsRetrieve Method for ExtrasSecretsRetrieve

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasSecretsRetrieve(ctx context.Context, id string) ApiExtrasSecretsRetrieveRequest {
	return ApiExtrasSecretsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasApiService) ExtrasSecretsRetrieveExecute(r ApiExtrasSecretsRetrieveRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasSecretsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	secret *Secret
}

func (r ApiExtrasSecretsUpdateRequest) Secret(secret Secret) ApiExtrasSecretsUpdateRequest {
	r.secret = &secret
	return r
}

func (r ApiExtrasSecretsUpdateRequest) Execute() (*Secret, *http.Response, error) {
	return r.ApiService.ExtrasSecretsUpdateExecute(r)
}

/*
ExtrasSecretsUpdate Method for ExtrasSecretsUpdate

Manage Secrets through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this secret.
 @return ApiExtrasSecretsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasSecretsUpdate(ctx context.Context, id string) ApiExtrasSecretsUpdateRequest {
	return ApiExtrasSecretsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Secret
func (a *ExtrasApiService) ExtrasSecretsUpdateExecute(r ApiExtrasSecretsUpdateRequest) (*Secret, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Secret
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasSecretsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/secrets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.secret == nil {
		return localVarReturnValue, nil, reportError("secret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.secret
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasStatusesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasStatusesBulkDestroyExecute(r)
}

/*
ExtrasStatusesBulkDestroy Method for ExtrasStatusesBulkDestroy

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasStatusesBulkDestroy(ctx context.Context) ApiExtrasStatusesBulkDestroyRequest {
	return ApiExtrasStatusesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasStatusesBulkDestroyExecute(r ApiExtrasStatusesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasStatusesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedStatus *PatchedStatus
}

func (r ApiExtrasStatusesBulkPartialUpdateRequest) PatchedStatus(patchedStatus PatchedStatus) ApiExtrasStatusesBulkPartialUpdateRequest {
	r.patchedStatus = &patchedStatus
	return r
}

func (r ApiExtrasStatusesBulkPartialUpdateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesBulkPartialUpdateExecute(r)
}

/*
ExtrasStatusesBulkPartialUpdate Method for ExtrasStatusesBulkPartialUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasStatusesBulkPartialUpdate(ctx context.Context) ApiExtrasStatusesBulkPartialUpdateRequest {
	return ApiExtrasStatusesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasApiService) ExtrasStatusesBulkPartialUpdateExecute(r ApiExtrasStatusesBulkPartialUpdateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedStatus
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	status *Status
}

func (r ApiExtrasStatusesBulkUpdateRequest) Status(status Status) ApiExtrasStatusesBulkUpdateRequest {
	r.status = &status
	return r
}

func (r ApiExtrasStatusesBulkUpdateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesBulkUpdateExecute(r)
}

/*
ExtrasStatusesBulkUpdate Method for ExtrasStatusesBulkUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasStatusesBulkUpdate(ctx context.Context) ApiExtrasStatusesBulkUpdateRequest {
	return ApiExtrasStatusesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasApiService) ExtrasStatusesBulkUpdateExecute(r ApiExtrasStatusesBulkUpdateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.status == nil {
		return localVarReturnValue, nil, reportError("status is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.status
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	status *Status
}

func (r ApiExtrasStatusesCreateRequest) Status(status Status) ApiExtrasStatusesCreateRequest {
	r.status = &status
	return r
}

func (r ApiExtrasStatusesCreateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesCreateExecute(r)
}

/*
ExtrasStatusesCreate Method for ExtrasStatusesCreate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesCreateRequest
*/
func (a *ExtrasApiService) ExtrasStatusesCreate(ctx context.Context) ApiExtrasStatusesCreateRequest {
	return ApiExtrasStatusesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasApiService) ExtrasStatusesCreateExecute(r ApiExtrasStatusesCreateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.status == nil {
		return localVarReturnValue, nil, reportError("status is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.status
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasStatusesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasStatusesDestroyExecute(r)
}

/*
ExtrasStatusesDestroy Method for ExtrasStatusesDestroy

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesDestroyRequest
*/
func (a *ExtrasApiService) ExtrasStatusesDestroy(ctx context.Context, id string) ApiExtrasStatusesDestroyRequest {
	return ApiExtrasStatusesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasStatusesDestroyExecute(r ApiExtrasStatusesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasStatusesListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contentTypes *[]int32
	contentTypesN *[]int32
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiExtrasStatusesListRequest) Color(color []string) ApiExtrasStatusesListRequest {
	r.color = &color
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIc(colorIc []string) ApiExtrasStatusesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIe(colorIe []string) ApiExtrasStatusesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIew(colorIew []string) ApiExtrasStatusesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIre(colorIre []string) ApiExtrasStatusesListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasStatusesListRequest) ColorIsw(colorIsw []string) ApiExtrasStatusesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasStatusesListRequest) ColorN(colorN []string) ApiExtrasStatusesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNic(colorNic []string) ApiExtrasStatusesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNie(colorNie []string) ApiExtrasStatusesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNiew(colorNiew []string) ApiExtrasStatusesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNire(colorNire []string) ApiExtrasStatusesListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNisw(colorNisw []string) ApiExtrasStatusesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasStatusesListRequest) ColorNre(colorNre []string) ApiExtrasStatusesListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasStatusesListRequest) ColorRe(colorRe []string) ApiExtrasStatusesListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypes(contentTypes []int32) ApiExtrasStatusesListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasStatusesListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasStatusesListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasStatusesListRequest) Created(created string) ApiExtrasStatusesListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedGte(createdGte string) ApiExtrasStatusesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasStatusesListRequest) CreatedLte(createdLte string) ApiExtrasStatusesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasStatusesListRequest) Id(id []string) ApiExtrasStatusesListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasStatusesListRequest) IdIc(idIc []string) ApiExtrasStatusesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasStatusesListRequest) IdIe(idIe []string) ApiExtrasStatusesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasStatusesListRequest) IdIew(idIew []string) ApiExtrasStatusesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasStatusesListRequest) IdIre(idIre []string) ApiExtrasStatusesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasStatusesListRequest) IdIsw(idIsw []string) ApiExtrasStatusesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasStatusesListRequest) IdN(idN []string) ApiExtrasStatusesListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasStatusesListRequest) IdNic(idNic []string) ApiExtrasStatusesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasStatusesListRequest) IdNie(idNie []string) ApiExtrasStatusesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasStatusesListRequest) IdNiew(idNiew []string) ApiExtrasStatusesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasStatusesListRequest) IdNire(idNire []string) ApiExtrasStatusesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasStatusesListRequest) IdNisw(idNisw []string) ApiExtrasStatusesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasStatusesListRequest) IdNre(idNre []string) ApiExtrasStatusesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasStatusesListRequest) IdRe(idRe []string) ApiExtrasStatusesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdated(lastUpdated time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasStatusesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasStatusesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasStatusesListRequest) Limit(limit int32) ApiExtrasStatusesListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasStatusesListRequest) Name(name []string) ApiExtrasStatusesListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasStatusesListRequest) NameIc(nameIc []string) ApiExtrasStatusesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasStatusesListRequest) NameIe(nameIe []string) ApiExtrasStatusesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasStatusesListRequest) NameIew(nameIew []string) ApiExtrasStatusesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasStatusesListRequest) NameIre(nameIre []string) ApiExtrasStatusesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasStatusesListRequest) NameIsw(nameIsw []string) ApiExtrasStatusesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasStatusesListRequest) NameN(nameN []string) ApiExtrasStatusesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasStatusesListRequest) NameNic(nameNic []string) ApiExtrasStatusesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasStatusesListRequest) NameNie(nameNie []string) ApiExtrasStatusesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasStatusesListRequest) NameNiew(nameNiew []string) ApiExtrasStatusesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasStatusesListRequest) NameNire(nameNire []string) ApiExtrasStatusesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasStatusesListRequest) NameNisw(nameNisw []string) ApiExtrasStatusesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasStatusesListRequest) NameNre(nameNre []string) ApiExtrasStatusesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasStatusesListRequest) NameRe(nameRe []string) ApiExtrasStatusesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasStatusesListRequest) Offset(offset int32) ApiExtrasStatusesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasStatusesListRequest) Q(q string) ApiExtrasStatusesListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasStatusesListRequest) Slug(slug []string) ApiExtrasStatusesListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasStatusesListRequest) SlugIc(slugIc []string) ApiExtrasStatusesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasStatusesListRequest) SlugIe(slugIe []string) ApiExtrasStatusesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasStatusesListRequest) SlugIew(slugIew []string) ApiExtrasStatusesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasStatusesListRequest) SlugIre(slugIre []string) ApiExtrasStatusesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasStatusesListRequest) SlugIsw(slugIsw []string) ApiExtrasStatusesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasStatusesListRequest) SlugN(slugN []string) ApiExtrasStatusesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasStatusesListRequest) SlugNic(slugNic []string) ApiExtrasStatusesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasStatusesListRequest) SlugNie(slugNie []string) ApiExtrasStatusesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasStatusesListRequest) SlugNiew(slugNiew []string) ApiExtrasStatusesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasStatusesListRequest) SlugNire(slugNire []string) ApiExtrasStatusesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasStatusesListRequest) SlugNisw(slugNisw []string) ApiExtrasStatusesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasStatusesListRequest) SlugNre(slugNre []string) ApiExtrasStatusesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasStatusesListRequest) SlugRe(slugRe []string) ApiExtrasStatusesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasStatusesListRequest) Execute() (*PaginatedStatusList, *http.Response, error) {
	return r.ApiService.ExtrasStatusesListExecute(r)
}

/*
ExtrasStatusesList Method for ExtrasStatusesList

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasStatusesListRequest
*/
func (a *ExtrasApiService) ExtrasStatusesList(ctx context.Context) ApiExtrasStatusesListRequest {
	return ApiExtrasStatusesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedStatusList
func (a *ExtrasApiService) ExtrasStatusesListExecute(r ApiExtrasStatusesListRequest) (*PaginatedStatusList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedStatusList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ic", parameterToString(t, "multi"))
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ie", parameterToString(t, "multi"))
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__iew", parameterToString(t, "multi"))
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ire", parameterToString(t, "multi"))
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__isw", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nic", parameterToString(t, "multi"))
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nie", parameterToString(t, "multi"))
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__niew", parameterToString(t, "multi"))
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nire", parameterToString(t, "multi"))
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nisw", parameterToString(t, "multi"))
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nre", parameterToString(t, "multi"))
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__re", parameterToString(t, "multi"))
		}
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types", parameterToString(t, "multi"))
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedStatus *PatchedStatus
}

func (r ApiExtrasStatusesPartialUpdateRequest) PatchedStatus(patchedStatus PatchedStatus) ApiExtrasStatusesPartialUpdateRequest {
	r.patchedStatus = &patchedStatus
	return r
}

func (r ApiExtrasStatusesPartialUpdateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesPartialUpdateExecute(r)
}

/*
ExtrasStatusesPartialUpdate Method for ExtrasStatusesPartialUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasStatusesPartialUpdate(ctx context.Context, id string) ApiExtrasStatusesPartialUpdateRequest {
	return ApiExtrasStatusesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasApiService) ExtrasStatusesPartialUpdateExecute(r ApiExtrasStatusesPartialUpdateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedStatus
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasStatusesRetrieveRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesRetrieveExecute(r)
}

/*
ExtrasStatusesRetrieve Method for ExtrasStatusesRetrieve

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasStatusesRetrieve(ctx context.Context, id string) ApiExtrasStatusesRetrieveRequest {
	return ApiExtrasStatusesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasApiService) ExtrasStatusesRetrieveExecute(r ApiExtrasStatusesRetrieveRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasStatusesUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	status *Status
}

func (r ApiExtrasStatusesUpdateRequest) Status(status Status) ApiExtrasStatusesUpdateRequest {
	r.status = &status
	return r
}

func (r ApiExtrasStatusesUpdateRequest) Execute() (*Status, *http.Response, error) {
	return r.ApiService.ExtrasStatusesUpdateExecute(r)
}

/*
ExtrasStatusesUpdate Method for ExtrasStatusesUpdate

View and manage custom status choices for objects with a `status` field.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this status.
 @return ApiExtrasStatusesUpdateRequest
*/
func (a *ExtrasApiService) ExtrasStatusesUpdate(ctx context.Context, id string) ApiExtrasStatusesUpdateRequest {
	return ApiExtrasStatusesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Status
func (a *ExtrasApiService) ExtrasStatusesUpdateExecute(r ApiExtrasStatusesUpdateRequest) (*Status, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Status
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasStatusesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/statuses/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.status == nil {
		return localVarReturnValue, nil, reportError("status is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.status
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasTagsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTagsBulkDestroyExecute(r)
}

/*
ExtrasTagsBulkDestroy Method for ExtrasTagsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasTagsBulkDestroy(ctx context.Context) ApiExtrasTagsBulkDestroyRequest {
	return ApiExtrasTagsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasTagsBulkDestroyExecute(r ApiExtrasTagsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contentTypes *[]int32
	contentTypesN *[]int32
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	patchedTagSerializerVersion13 *PatchedTagSerializerVersion13
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Color(color []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.color = &color
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorIc(colorIc []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorIe(colorIe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorIew(colorIew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorIre(colorIre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorIsw(colorIsw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorN(colorN []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorNic(colorNic []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorNie(colorNie []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorNiew(colorNiew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorNire(colorNire []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorNisw(colorNisw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorNre(colorNre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ColorRe(colorRe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ContentTypes(contentTypes []int32) ApiExtrasTagsBulkPartialUpdateRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) ContentTypesN(contentTypesN []int32) ApiExtrasTagsBulkPartialUpdateRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Created(created string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.created = &created
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) CreatedGte(createdGte string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) CreatedLte(createdLte string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Id(id []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.id = &id
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdIc(idIc []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdIe(idIe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdIew(idIew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdIre(idIre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdIsw(idIsw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdN(idN []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdNic(idNic []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdNie(idNie []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdNiew(idNiew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdNire(idNire []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdNisw(idNisw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdNre(idNre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) IdRe(idRe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) LastUpdated(lastUpdated time.Time) ApiExtrasTagsBulkPartialUpdateRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasTagsBulkPartialUpdateRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasTagsBulkPartialUpdateRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasTagsBulkPartialUpdateRequest) Limit(limit int32) ApiExtrasTagsBulkPartialUpdateRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Name(name []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.name = &name
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameIc(nameIc []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameIe(nameIe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameIew(nameIew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameIre(nameIre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameIsw(nameIsw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameN(nameN []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameNic(nameNic []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameNie(nameNie []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameNiew(nameNiew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameNire(nameNire []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameNisw(nameNisw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameNre(nameNre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) NameRe(nameRe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTagsBulkPartialUpdateRequest) Offset(offset int32) ApiExtrasTagsBulkPartialUpdateRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasTagsBulkPartialUpdateRequest) Q(q string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.q = &q
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Slug(slug []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugIc(slugIc []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugIe(slugIe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugIew(slugIew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugIre(slugIre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugIsw(slugIsw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugN(slugN []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugNic(slugNic []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugNie(slugNie []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugNiew(slugNiew []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugNire(slugNire []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugNisw(slugNisw []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugNre(slugNre []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) SlugRe(slugRe []string) ApiExtrasTagsBulkPartialUpdateRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) PatchedTagSerializerVersion13(patchedTagSerializerVersion13 PatchedTagSerializerVersion13) ApiExtrasTagsBulkPartialUpdateRequest {
	r.patchedTagSerializerVersion13 = &patchedTagSerializerVersion13
	return r
}

func (r ApiExtrasTagsBulkPartialUpdateRequest) Execute() (*PaginatedTagList, *http.Response, error) {
	return r.ApiService.ExtrasTagsBulkPartialUpdateExecute(r)
}

/*
ExtrasTagsBulkPartialUpdate Method for ExtrasTagsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasTagsBulkPartialUpdate(ctx context.Context) ApiExtrasTagsBulkPartialUpdateRequest {
	return ApiExtrasTagsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTagList
func (a *ExtrasApiService) ExtrasTagsBulkPartialUpdateExecute(r ApiExtrasTagsBulkPartialUpdateRequest) (*PaginatedTagList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTagList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ic", parameterToString(t, "multi"))
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ie", parameterToString(t, "multi"))
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__iew", parameterToString(t, "multi"))
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ire", parameterToString(t, "multi"))
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__isw", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nic", parameterToString(t, "multi"))
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nie", parameterToString(t, "multi"))
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__niew", parameterToString(t, "multi"))
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nire", parameterToString(t, "multi"))
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nisw", parameterToString(t, "multi"))
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nre", parameterToString(t, "multi"))
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__re", parameterToString(t, "multi"))
		}
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types", parameterToString(t, "multi"))
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTagSerializerVersion13
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	tagSerializerVersion13 *TagSerializerVersion13
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contentTypes *[]int32
	contentTypesN *[]int32
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiExtrasTagsBulkUpdateRequest) TagSerializerVersion13(tagSerializerVersion13 TagSerializerVersion13) ApiExtrasTagsBulkUpdateRequest {
	r.tagSerializerVersion13 = &tagSerializerVersion13
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Color(color []string) ApiExtrasTagsBulkUpdateRequest {
	r.color = &color
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorIc(colorIc []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorIe(colorIe []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorIew(colorIew []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorIre(colorIre []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorIsw(colorIsw []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorN(colorN []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorNic(colorNic []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorNie(colorNie []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorNiew(colorNiew []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorNire(colorNire []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorNisw(colorNisw []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorNre(colorNre []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ColorRe(colorRe []string) ApiExtrasTagsBulkUpdateRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ContentTypes(contentTypes []int32) ApiExtrasTagsBulkUpdateRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) ContentTypesN(contentTypesN []int32) ApiExtrasTagsBulkUpdateRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Created(created string) ApiExtrasTagsBulkUpdateRequest {
	r.created = &created
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) CreatedGte(createdGte string) ApiExtrasTagsBulkUpdateRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) CreatedLte(createdLte string) ApiExtrasTagsBulkUpdateRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Id(id []string) ApiExtrasTagsBulkUpdateRequest {
	r.id = &id
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdIc(idIc []string) ApiExtrasTagsBulkUpdateRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdIe(idIe []string) ApiExtrasTagsBulkUpdateRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdIew(idIew []string) ApiExtrasTagsBulkUpdateRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdIre(idIre []string) ApiExtrasTagsBulkUpdateRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdIsw(idIsw []string) ApiExtrasTagsBulkUpdateRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdN(idN []string) ApiExtrasTagsBulkUpdateRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdNic(idNic []string) ApiExtrasTagsBulkUpdateRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdNie(idNie []string) ApiExtrasTagsBulkUpdateRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdNiew(idNiew []string) ApiExtrasTagsBulkUpdateRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdNire(idNire []string) ApiExtrasTagsBulkUpdateRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdNisw(idNisw []string) ApiExtrasTagsBulkUpdateRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdNre(idNre []string) ApiExtrasTagsBulkUpdateRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) IdRe(idRe []string) ApiExtrasTagsBulkUpdateRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) LastUpdated(lastUpdated time.Time) ApiExtrasTagsBulkUpdateRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasTagsBulkUpdateRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasTagsBulkUpdateRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasTagsBulkUpdateRequest) Limit(limit int32) ApiExtrasTagsBulkUpdateRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Name(name []string) ApiExtrasTagsBulkUpdateRequest {
	r.name = &name
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameIc(nameIc []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameIe(nameIe []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameIew(nameIew []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameIre(nameIre []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameIsw(nameIsw []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameN(nameN []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameNic(nameNic []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameNie(nameNie []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameNiew(nameNiew []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameNire(nameNire []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameNisw(nameNisw []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameNre(nameNre []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) NameRe(nameRe []string) ApiExtrasTagsBulkUpdateRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTagsBulkUpdateRequest) Offset(offset int32) ApiExtrasTagsBulkUpdateRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasTagsBulkUpdateRequest) Q(q string) ApiExtrasTagsBulkUpdateRequest {
	r.q = &q
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Slug(slug []string) ApiExtrasTagsBulkUpdateRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugIc(slugIc []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugIe(slugIe []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugIew(slugIew []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugIre(slugIre []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugIsw(slugIsw []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugN(slugN []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugNic(slugNic []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugNie(slugNie []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugNiew(slugNiew []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugNire(slugNire []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugNisw(slugNisw []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugNre(slugNre []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) SlugRe(slugRe []string) ApiExtrasTagsBulkUpdateRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasTagsBulkUpdateRequest) Execute() (*PaginatedTagList, *http.Response, error) {
	return r.ApiService.ExtrasTagsBulkUpdateExecute(r)
}

/*
ExtrasTagsBulkUpdate Method for ExtrasTagsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasTagsBulkUpdate(ctx context.Context) ApiExtrasTagsBulkUpdateRequest {
	return ApiExtrasTagsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTagList
func (a *ExtrasApiService) ExtrasTagsBulkUpdateExecute(r ApiExtrasTagsBulkUpdateRequest) (*PaginatedTagList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTagList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagSerializerVersion13 == nil {
		return localVarReturnValue, nil, reportError("tagSerializerVersion13 is required and must be specified")
	}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ic", parameterToString(t, "multi"))
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ie", parameterToString(t, "multi"))
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__iew", parameterToString(t, "multi"))
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ire", parameterToString(t, "multi"))
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__isw", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nic", parameterToString(t, "multi"))
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nie", parameterToString(t, "multi"))
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__niew", parameterToString(t, "multi"))
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nire", parameterToString(t, "multi"))
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nisw", parameterToString(t, "multi"))
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nre", parameterToString(t, "multi"))
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__re", parameterToString(t, "multi"))
		}
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types", parameterToString(t, "multi"))
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagSerializerVersion13
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	tagSerializerVersion13 *TagSerializerVersion13
}

func (r ApiExtrasTagsCreateRequest) TagSerializerVersion13(tagSerializerVersion13 TagSerializerVersion13) ApiExtrasTagsCreateRequest {
	r.tagSerializerVersion13 = &tagSerializerVersion13
	return r
}

func (r ApiExtrasTagsCreateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsCreateExecute(r)
}

/*
ExtrasTagsCreate Method for ExtrasTagsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsCreateRequest
*/
func (a *ExtrasApiService) ExtrasTagsCreate(ctx context.Context) ApiExtrasTagsCreateRequest {
	return ApiExtrasTagsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasApiService) ExtrasTagsCreateExecute(r ApiExtrasTagsCreateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagSerializerVersion13 == nil {
		return localVarReturnValue, nil, reportError("tagSerializerVersion13 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagSerializerVersion13
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasTagsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasTagsDestroyExecute(r)
}

/*
ExtrasTagsDestroy Method for ExtrasTagsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsDestroyRequest
*/
func (a *ExtrasApiService) ExtrasTagsDestroy(ctx context.Context, id string) ApiExtrasTagsDestroyRequest {
	return ApiExtrasTagsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasTagsDestroyExecute(r ApiExtrasTagsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasTagsListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	contentTypes *[]int32
	contentTypesN *[]int32
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiExtrasTagsListRequest) Color(color []string) ApiExtrasTagsListRequest {
	r.color = &color
	return r
}

func (r ApiExtrasTagsListRequest) ColorIc(colorIc []string) ApiExtrasTagsListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiExtrasTagsListRequest) ColorIe(colorIe []string) ApiExtrasTagsListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiExtrasTagsListRequest) ColorIew(colorIew []string) ApiExtrasTagsListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiExtrasTagsListRequest) ColorIre(colorIre []string) ApiExtrasTagsListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiExtrasTagsListRequest) ColorIsw(colorIsw []string) ApiExtrasTagsListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiExtrasTagsListRequest) ColorN(colorN []string) ApiExtrasTagsListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiExtrasTagsListRequest) ColorNic(colorNic []string) ApiExtrasTagsListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiExtrasTagsListRequest) ColorNie(colorNie []string) ApiExtrasTagsListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiExtrasTagsListRequest) ColorNiew(colorNiew []string) ApiExtrasTagsListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiExtrasTagsListRequest) ColorNire(colorNire []string) ApiExtrasTagsListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiExtrasTagsListRequest) ColorNisw(colorNisw []string) ApiExtrasTagsListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiExtrasTagsListRequest) ColorNre(colorNre []string) ApiExtrasTagsListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiExtrasTagsListRequest) ColorRe(colorRe []string) ApiExtrasTagsListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypes(contentTypes []int32) ApiExtrasTagsListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasTagsListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasTagsListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasTagsListRequest) Created(created string) ApiExtrasTagsListRequest {
	r.created = &created
	return r
}

func (r ApiExtrasTagsListRequest) CreatedGte(createdGte string) ApiExtrasTagsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiExtrasTagsListRequest) CreatedLte(createdLte string) ApiExtrasTagsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiExtrasTagsListRequest) Id(id []string) ApiExtrasTagsListRequest {
	r.id = &id
	return r
}

func (r ApiExtrasTagsListRequest) IdIc(idIc []string) ApiExtrasTagsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiExtrasTagsListRequest) IdIe(idIe []string) ApiExtrasTagsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiExtrasTagsListRequest) IdIew(idIew []string) ApiExtrasTagsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiExtrasTagsListRequest) IdIre(idIre []string) ApiExtrasTagsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiExtrasTagsListRequest) IdIsw(idIsw []string) ApiExtrasTagsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiExtrasTagsListRequest) IdN(idN []string) ApiExtrasTagsListRequest {
	r.idN = &idN
	return r
}

func (r ApiExtrasTagsListRequest) IdNic(idNic []string) ApiExtrasTagsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiExtrasTagsListRequest) IdNie(idNie []string) ApiExtrasTagsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiExtrasTagsListRequest) IdNiew(idNiew []string) ApiExtrasTagsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiExtrasTagsListRequest) IdNire(idNire []string) ApiExtrasTagsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiExtrasTagsListRequest) IdNisw(idNisw []string) ApiExtrasTagsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiExtrasTagsListRequest) IdNre(idNre []string) ApiExtrasTagsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiExtrasTagsListRequest) IdRe(idRe []string) ApiExtrasTagsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdated(lastUpdated time.Time) ApiExtrasTagsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiExtrasTagsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiExtrasTagsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiExtrasTagsListRequest) Limit(limit int32) ApiExtrasTagsListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasTagsListRequest) Name(name []string) ApiExtrasTagsListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasTagsListRequest) NameIc(nameIc []string) ApiExtrasTagsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasTagsListRequest) NameIe(nameIe []string) ApiExtrasTagsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasTagsListRequest) NameIew(nameIew []string) ApiExtrasTagsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasTagsListRequest) NameIre(nameIre []string) ApiExtrasTagsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasTagsListRequest) NameIsw(nameIsw []string) ApiExtrasTagsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasTagsListRequest) NameN(nameN []string) ApiExtrasTagsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasTagsListRequest) NameNic(nameNic []string) ApiExtrasTagsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasTagsListRequest) NameNie(nameNie []string) ApiExtrasTagsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasTagsListRequest) NameNiew(nameNiew []string) ApiExtrasTagsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasTagsListRequest) NameNire(nameNire []string) ApiExtrasTagsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasTagsListRequest) NameNisw(nameNisw []string) ApiExtrasTagsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasTagsListRequest) NameNre(nameNre []string) ApiExtrasTagsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasTagsListRequest) NameRe(nameRe []string) ApiExtrasTagsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasTagsListRequest) Offset(offset int32) ApiExtrasTagsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiExtrasTagsListRequest) Q(q string) ApiExtrasTagsListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasTagsListRequest) Slug(slug []string) ApiExtrasTagsListRequest {
	r.slug = &slug
	return r
}

func (r ApiExtrasTagsListRequest) SlugIc(slugIc []string) ApiExtrasTagsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiExtrasTagsListRequest) SlugIe(slugIe []string) ApiExtrasTagsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiExtrasTagsListRequest) SlugIew(slugIew []string) ApiExtrasTagsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiExtrasTagsListRequest) SlugIre(slugIre []string) ApiExtrasTagsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiExtrasTagsListRequest) SlugIsw(slugIsw []string) ApiExtrasTagsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiExtrasTagsListRequest) SlugN(slugN []string) ApiExtrasTagsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiExtrasTagsListRequest) SlugNic(slugNic []string) ApiExtrasTagsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiExtrasTagsListRequest) SlugNie(slugNie []string) ApiExtrasTagsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiExtrasTagsListRequest) SlugNiew(slugNiew []string) ApiExtrasTagsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiExtrasTagsListRequest) SlugNire(slugNire []string) ApiExtrasTagsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiExtrasTagsListRequest) SlugNisw(slugNisw []string) ApiExtrasTagsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiExtrasTagsListRequest) SlugNre(slugNre []string) ApiExtrasTagsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiExtrasTagsListRequest) SlugRe(slugRe []string) ApiExtrasTagsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiExtrasTagsListRequest) Execute() (*PaginatedTagList, *http.Response, error) {
	return r.ApiService.ExtrasTagsListExecute(r)
}

/*
ExtrasTagsList Method for ExtrasTagsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasTagsListRequest
*/
func (a *ExtrasApiService) ExtrasTagsList(ctx context.Context) ApiExtrasTagsListRequest {
	return ApiExtrasTagsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedTagList
func (a *ExtrasApiService) ExtrasTagsListExecute(r ApiExtrasTagsListRequest) (*PaginatedTagList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedTagList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ic", parameterToString(t, "multi"))
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ie", parameterToString(t, "multi"))
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__iew", parameterToString(t, "multi"))
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ire", parameterToString(t, "multi"))
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__isw", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nic", parameterToString(t, "multi"))
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nie", parameterToString(t, "multi"))
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__niew", parameterToString(t, "multi"))
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nire", parameterToString(t, "multi"))
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nisw", parameterToString(t, "multi"))
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nre", parameterToString(t, "multi"))
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__re", parameterToString(t, "multi"))
		}
	}
	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types", parameterToString(t, "multi"))
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedTagSerializerVersion13 *PatchedTagSerializerVersion13
}

func (r ApiExtrasTagsPartialUpdateRequest) PatchedTagSerializerVersion13(patchedTagSerializerVersion13 PatchedTagSerializerVersion13) ApiExtrasTagsPartialUpdateRequest {
	r.patchedTagSerializerVersion13 = &patchedTagSerializerVersion13
	return r
}

func (r ApiExtrasTagsPartialUpdateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsPartialUpdateExecute(r)
}

/*
ExtrasTagsPartialUpdate Method for ExtrasTagsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasTagsPartialUpdate(ctx context.Context, id string) ApiExtrasTagsPartialUpdateRequest {
	return ApiExtrasTagsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasApiService) ExtrasTagsPartialUpdateExecute(r ApiExtrasTagsPartialUpdateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedTagSerializerVersion13
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasTagsRetrieveRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsRetrieveExecute(r)
}

/*
ExtrasTagsRetrieve Method for ExtrasTagsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasTagsRetrieve(ctx context.Context, id string) ApiExtrasTagsRetrieveRequest {
	return ApiExtrasTagsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasApiService) ExtrasTagsRetrieveExecute(r ApiExtrasTagsRetrieveRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasTagsUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	tagSerializerVersion13 *TagSerializerVersion13
}

func (r ApiExtrasTagsUpdateRequest) TagSerializerVersion13(tagSerializerVersion13 TagSerializerVersion13) ApiExtrasTagsUpdateRequest {
	r.tagSerializerVersion13 = &tagSerializerVersion13
	return r
}

func (r ApiExtrasTagsUpdateRequest) Execute() (*Tag, *http.Response, error) {
	return r.ApiService.ExtrasTagsUpdateExecute(r)
}

/*
ExtrasTagsUpdate Method for ExtrasTagsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this tag.
 @return ApiExtrasTagsUpdateRequest
*/
func (a *ExtrasApiService) ExtrasTagsUpdate(ctx context.Context, id string) ApiExtrasTagsUpdateRequest {
	return ApiExtrasTagsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Tag
func (a *ExtrasApiService) ExtrasTagsUpdateExecute(r ApiExtrasTagsUpdateRequest) (*Tag, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Tag
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasTagsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/tags/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagSerializerVersion13 == nil {
		return localVarReturnValue, nil, reportError("tagSerializerVersion13 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagSerializerVersion13
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
}

func (r ApiExtrasWebhooksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkDestroyExecute(r)
}

/*
ExtrasWebhooksBulkDestroy Method for ExtrasWebhooksBulkDestroy

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksBulkDestroyRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksBulkDestroy(ctx context.Context) ApiExtrasWebhooksBulkDestroyRequest {
	return ApiExtrasWebhooksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasWebhooksBulkDestroyExecute(r ApiExtrasWebhooksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	patchedWebhook *PatchedWebhook
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) PatchedWebhook(patchedWebhook PatchedWebhook) ApiExtrasWebhooksBulkPartialUpdateRequest {
	r.patchedWebhook = &patchedWebhook
	return r
}

func (r ApiExtrasWebhooksBulkPartialUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkPartialUpdateExecute(r)
}

/*
ExtrasWebhooksBulkPartialUpdate Method for ExtrasWebhooksBulkPartialUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksBulkPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksBulkPartialUpdate(ctx context.Context) ApiExtrasWebhooksBulkPartialUpdateRequest {
	return ApiExtrasWebhooksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasApiService) ExtrasWebhooksBulkPartialUpdateExecute(r ApiExtrasWebhooksBulkPartialUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWebhook
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	webhook *Webhook
}

func (r ApiExtrasWebhooksBulkUpdateRequest) Webhook(webhook Webhook) ApiExtrasWebhooksBulkUpdateRequest {
	r.webhook = &webhook
	return r
}

func (r ApiExtrasWebhooksBulkUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksBulkUpdateExecute(r)
}

/*
ExtrasWebhooksBulkUpdate Method for ExtrasWebhooksBulkUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksBulkUpdateRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksBulkUpdate(ctx context.Context) ApiExtrasWebhooksBulkUpdateRequest {
	return ApiExtrasWebhooksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasApiService) ExtrasWebhooksBulkUpdateExecute(r ApiExtrasWebhooksBulkUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhook == nil {
		return localVarReturnValue, nil, reportError("webhook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhook
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksCreateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	webhook *Webhook
}

func (r ApiExtrasWebhooksCreateRequest) Webhook(webhook Webhook) ApiExtrasWebhooksCreateRequest {
	r.webhook = &webhook
	return r
}

func (r ApiExtrasWebhooksCreateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksCreateExecute(r)
}

/*
ExtrasWebhooksCreate Method for ExtrasWebhooksCreate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksCreateRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksCreate(ctx context.Context) ApiExtrasWebhooksCreateRequest {
	return ApiExtrasWebhooksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasApiService) ExtrasWebhooksCreateExecute(r ApiExtrasWebhooksCreateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhook == nil {
		return localVarReturnValue, nil, reportError("webhook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhook
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksDestroyRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasWebhooksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ExtrasWebhooksDestroyExecute(r)
}

/*
ExtrasWebhooksDestroy Method for ExtrasWebhooksDestroy

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksDestroyRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksDestroy(ctx context.Context, id string) ApiExtrasWebhooksDestroyRequest {
	return ApiExtrasWebhooksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ExtrasApiService) ExtrasWebhooksDestroyExecute(r ApiExtrasWebhooksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiExtrasWebhooksListRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	contentTypes *[]int32
	contentTypesN *[]int32
	enabled *bool
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	payloadUrl *[]string
	payloadUrlIc *[]string
	payloadUrlIe *[]string
	payloadUrlIew *[]string
	payloadUrlIre *[]string
	payloadUrlIsw *[]string
	payloadUrlN *[]string
	payloadUrlNic *[]string
	payloadUrlNie *[]string
	payloadUrlNiew *[]string
	payloadUrlNire *[]string
	payloadUrlNisw *[]string
	payloadUrlNre *[]string
	payloadUrlRe *[]string
	q *string
	typeCreate *bool
	typeDelete *bool
	typeUpdate *bool
}

func (r ApiExtrasWebhooksListRequest) ContentTypes(contentTypes []int32) ApiExtrasWebhooksListRequest {
	r.contentTypes = &contentTypes
	return r
}

func (r ApiExtrasWebhooksListRequest) ContentTypesN(contentTypesN []int32) ApiExtrasWebhooksListRequest {
	r.contentTypesN = &contentTypesN
	return r
}

func (r ApiExtrasWebhooksListRequest) Enabled(enabled bool) ApiExtrasWebhooksListRequest {
	r.enabled = &enabled
	return r
}

// Number of results to return per page.
func (r ApiExtrasWebhooksListRequest) Limit(limit int32) ApiExtrasWebhooksListRequest {
	r.limit = &limit
	return r
}

func (r ApiExtrasWebhooksListRequest) Name(name []string) ApiExtrasWebhooksListRequest {
	r.name = &name
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIc(nameIc []string) ApiExtrasWebhooksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIe(nameIe []string) ApiExtrasWebhooksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIew(nameIew []string) ApiExtrasWebhooksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIre(nameIre []string) ApiExtrasWebhooksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiExtrasWebhooksListRequest) NameIsw(nameIsw []string) ApiExtrasWebhooksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) NameN(nameN []string) ApiExtrasWebhooksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNic(nameNic []string) ApiExtrasWebhooksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNie(nameNie []string) ApiExtrasWebhooksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNiew(nameNiew []string) ApiExtrasWebhooksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNire(nameNire []string) ApiExtrasWebhooksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNisw(nameNisw []string) ApiExtrasWebhooksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) NameNre(nameNre []string) ApiExtrasWebhooksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiExtrasWebhooksListRequest) NameRe(nameRe []string) ApiExtrasWebhooksListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiExtrasWebhooksListRequest) Offset(offset int32) ApiExtrasWebhooksListRequest {
	r.offset = &offset
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrl(payloadUrl []string) ApiExtrasWebhooksListRequest {
	r.payloadUrl = &payloadUrl
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIc(payloadUrlIc []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIc = &payloadUrlIc
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIe(payloadUrlIe []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIe = &payloadUrlIe
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIew(payloadUrlIew []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIew = &payloadUrlIew
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIre(payloadUrlIre []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIre = &payloadUrlIre
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlIsw(payloadUrlIsw []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlIsw = &payloadUrlIsw
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlN(payloadUrlN []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlN = &payloadUrlN
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNic(payloadUrlNic []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNic = &payloadUrlNic
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNie(payloadUrlNie []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNie = &payloadUrlNie
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNiew(payloadUrlNiew []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNiew = &payloadUrlNiew
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNire(payloadUrlNire []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNire = &payloadUrlNire
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNisw(payloadUrlNisw []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNisw = &payloadUrlNisw
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlNre(payloadUrlNre []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlNre = &payloadUrlNre
	return r
}

func (r ApiExtrasWebhooksListRequest) PayloadUrlRe(payloadUrlRe []string) ApiExtrasWebhooksListRequest {
	r.payloadUrlRe = &payloadUrlRe
	return r
}

// Search
func (r ApiExtrasWebhooksListRequest) Q(q string) ApiExtrasWebhooksListRequest {
	r.q = &q
	return r
}

func (r ApiExtrasWebhooksListRequest) TypeCreate(typeCreate bool) ApiExtrasWebhooksListRequest {
	r.typeCreate = &typeCreate
	return r
}

func (r ApiExtrasWebhooksListRequest) TypeDelete(typeDelete bool) ApiExtrasWebhooksListRequest {
	r.typeDelete = &typeDelete
	return r
}

func (r ApiExtrasWebhooksListRequest) TypeUpdate(typeUpdate bool) ApiExtrasWebhooksListRequest {
	r.typeUpdate = &typeUpdate
	return r
}

func (r ApiExtrasWebhooksListRequest) Execute() (*PaginatedWebhookList, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksListExecute(r)
}

/*
ExtrasWebhooksList Method for ExtrasWebhooksList

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiExtrasWebhooksListRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksList(ctx context.Context) ApiExtrasWebhooksListRequest {
	return ApiExtrasWebhooksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedWebhookList
func (a *ExtrasApiService) ExtrasWebhooksListExecute(r ApiExtrasWebhooksListRequest) (*PaginatedWebhookList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedWebhookList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.contentTypes != nil {
		t := *r.contentTypes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types", parameterToString(t, "multi"))
		}
	}
	if r.contentTypesN != nil {
		t := *r.contentTypesN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("content_types__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("content_types__n", parameterToString(t, "multi"))
		}
	}
	if r.enabled != nil {
		localVarQueryParams.Add("enabled", parameterToString(*r.enabled, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.payloadUrl != nil {
		t := *r.payloadUrl
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlIc != nil {
		t := *r.payloadUrlIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__ic", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlIe != nil {
		t := *r.payloadUrlIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__ie", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlIew != nil {
		t := *r.payloadUrlIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__iew", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlIre != nil {
		t := *r.payloadUrlIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__ire", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlIsw != nil {
		t := *r.payloadUrlIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__isw", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlN != nil {
		t := *r.payloadUrlN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__n", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlNic != nil {
		t := *r.payloadUrlNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__nic", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlNie != nil {
		t := *r.payloadUrlNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__nie", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlNiew != nil {
		t := *r.payloadUrlNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__niew", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlNire != nil {
		t := *r.payloadUrlNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__nire", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlNisw != nil {
		t := *r.payloadUrlNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__nisw", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlNre != nil {
		t := *r.payloadUrlNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__nre", parameterToString(t, "multi"))
		}
	}
	if r.payloadUrlRe != nil {
		t := *r.payloadUrlRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("payload_url__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("payload_url__re", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.typeCreate != nil {
		localVarQueryParams.Add("type_create", parameterToString(*r.typeCreate, ""))
	}
	if r.typeDelete != nil {
		localVarQueryParams.Add("type_delete", parameterToString(*r.typeDelete, ""))
	}
	if r.typeUpdate != nil {
		localVarQueryParams.Add("type_update", parameterToString(*r.typeUpdate, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	patchedWebhook *PatchedWebhook
}

func (r ApiExtrasWebhooksPartialUpdateRequest) PatchedWebhook(patchedWebhook PatchedWebhook) ApiExtrasWebhooksPartialUpdateRequest {
	r.patchedWebhook = &patchedWebhook
	return r
}

func (r ApiExtrasWebhooksPartialUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksPartialUpdateExecute(r)
}

/*
ExtrasWebhooksPartialUpdate Method for ExtrasWebhooksPartialUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksPartialUpdateRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksPartialUpdate(ctx context.Context, id string) ApiExtrasWebhooksPartialUpdateRequest {
	return ApiExtrasWebhooksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasApiService) ExtrasWebhooksPartialUpdateExecute(r ApiExtrasWebhooksPartialUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWebhook
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksRetrieveRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
}

func (r ApiExtrasWebhooksRetrieveRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksRetrieveExecute(r)
}

/*
ExtrasWebhooksRetrieve Method for ExtrasWebhooksRetrieve

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksRetrieveRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksRetrieve(ctx context.Context, id string) ApiExtrasWebhooksRetrieveRequest {
	return ApiExtrasWebhooksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasApiService) ExtrasWebhooksRetrieveExecute(r ApiExtrasWebhooksRetrieveRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtrasWebhooksUpdateRequest struct {
	ctx context.Context
	ApiService *ExtrasApiService
	id string
	webhook *Webhook
}

func (r ApiExtrasWebhooksUpdateRequest) Webhook(webhook Webhook) ApiExtrasWebhooksUpdateRequest {
	r.webhook = &webhook
	return r
}

func (r ApiExtrasWebhooksUpdateRequest) Execute() (*Webhook, *http.Response, error) {
	return r.ApiService.ExtrasWebhooksUpdateExecute(r)
}

/*
ExtrasWebhooksUpdate Method for ExtrasWebhooksUpdate

Manage Webhooks through DELETE, GET, POST, PUT, and PATCH requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this webhook.
 @return ApiExtrasWebhooksUpdateRequest
*/
func (a *ExtrasApiService) ExtrasWebhooksUpdate(ctx context.Context, id string) ApiExtrasWebhooksUpdateRequest {
	return ApiExtrasWebhooksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Webhook
func (a *ExtrasApiService) ExtrasWebhooksUpdateExecute(r ApiExtrasWebhooksUpdateRequest) (*Webhook, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Webhook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExtrasApiService.ExtrasWebhooksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/extras/webhooks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.webhook == nil {
		return localVarReturnValue, nil, reportError("webhook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.webhook
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
