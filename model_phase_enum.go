/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PhaseEnum the model 'PhaseEnum'
type PhaseEnum string

// List of PhaseEnum
const (
	SINGLE_PHASE PhaseEnum = "single-phase"
	THREE_PHASE PhaseEnum = "three-phase"
)

// All allowed values of PhaseEnum enum
var AllowedPhaseEnumEnumValues = []PhaseEnum{
	"single-phase",
	"three-phase",
}

func (v *PhaseEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PhaseEnum(value)
	for _, existing := range AllowedPhaseEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PhaseEnum", value)
}

// NewPhaseEnumFromValue returns a pointer to a valid PhaseEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPhaseEnumFromValue(v string) (*PhaseEnum, error) {
	ev := PhaseEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PhaseEnum: valid values are %v", v, AllowedPhaseEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PhaseEnum) IsValid() bool {
	for _, existing := range AllowedPhaseEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PhaseEnum value
func (v PhaseEnum) Ptr() *PhaseEnum {
	return &v
}

type NullablePhaseEnum struct {
	value *PhaseEnum
	isSet bool
}

func (v NullablePhaseEnum) Get() *PhaseEnum {
	return v.value
}

func (v *NullablePhaseEnum) Set(val *PhaseEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePhaseEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePhaseEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhaseEnum(val *PhaseEnum) *NullablePhaseEnum {
	return &NullablePhaseEnum{value: val, isSet: true}
}

func (v NullablePhaseEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhaseEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

