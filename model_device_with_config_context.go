/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DeviceWithConfigContext Mixin to add `status` choice field to model serializers.
type DeviceWithConfigContext struct {
	Id string `json:"id"`
	Url string `json:"url"`
	Name NullableString `json:"name,omitempty"`
	DeviceType NestedDeviceType `json:"device_type"`
	DeviceRole NestedDeviceRole `json:"device_role"`
	Tenant NullableAggregateTenant `json:"tenant,omitempty"`
	Platform NullableDevicePlatform `json:"platform,omitempty"`
	Serial *string `json:"serial,omitempty"`
	// A unique tag used to identify this device
	AssetTag NullableString `json:"asset_tag,omitempty"`
	Site NestedSite `json:"site"`
	Rack NullableDeviceRack `json:"rack,omitempty"`
	// The lowest-numbered unit occupied by the device
	Position NullableInt32 `json:"position,omitempty"`
	Face *DeviceFace `json:"face,omitempty"`
	ParentDevice DeviceParentDevice `json:"parent_device"`
	Status DeviceStatus `json:"status"`
	PrimaryIp DevicePrimaryIp `json:"primary_ip"`
	PrimaryIp4 NullableDevicePrimaryIp4 `json:"primary_ip4,omitempty"`
	PrimaryIp6 NullableDevicePrimaryIp4 `json:"primary_ip6,omitempty"`
	SecretsGroup NullableDeviceSecretsGroup `json:"secrets_group,omitempty"`
	Cluster NullableDeviceCluster `json:"cluster,omitempty"`
	VirtualChassis NullableDeviceVirtualChassis `json:"virtual_chassis,omitempty"`
	VcPosition NullableInt32 `json:"vc_position,omitempty"`
	VcPriority NullableInt32 `json:"vc_priority,omitempty"`
	Comments *string `json:"comments,omitempty"`
	LocalContextSchema NullableConfigContextSchema `json:"local_context_schema,omitempty"`
	LocalContextData map[string]interface{} `json:"local_context_data,omitempty"`
	Tags []TagSerializerField `json:"tags,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	ConfigContext map[string]interface{} `json:"config_context"`
	Created string `json:"created"`
	LastUpdated time.Time `json:"last_updated"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewDeviceWithConfigContext instantiates a new DeviceWithConfigContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceWithConfigContext(id string, url string, deviceType NestedDeviceType, deviceRole NestedDeviceRole, site NestedSite, parentDevice DeviceParentDevice, status DeviceStatus, primaryIp DevicePrimaryIp, configContext map[string]interface{}, created string, lastUpdated time.Time, display string) *DeviceWithConfigContext {
	this := DeviceWithConfigContext{}
	this.Id = id
	this.Url = url
	this.DeviceType = deviceType
	this.DeviceRole = deviceRole
	this.Site = site
	this.ParentDevice = parentDevice
	this.Status = status
	this.PrimaryIp = primaryIp
	this.ConfigContext = configContext
	this.Created = created
	this.LastUpdated = lastUpdated
	this.Display = display
	return &this
}

// NewDeviceWithConfigContextWithDefaults instantiates a new DeviceWithConfigContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceWithConfigContextWithDefaults() *DeviceWithConfigContext {
	this := DeviceWithConfigContext{}
	return &this
}

// GetId returns the Id field value
func (o *DeviceWithConfigContext) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeviceWithConfigContext) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *DeviceWithConfigContext) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *DeviceWithConfigContext) SetUrl(v string) {
	o.Url = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DeviceWithConfigContext) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DeviceWithConfigContext) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetName() {
	o.Name.Unset()
}

// GetDeviceType returns the DeviceType field value
func (o *DeviceWithConfigContext) GetDeviceType() NestedDeviceType {
	if o == nil {
		var ret NestedDeviceType
		return ret
	}

	return o.DeviceType
}

// GetDeviceTypeOk returns a tuple with the DeviceType field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetDeviceTypeOk() (*NestedDeviceType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceType, true
}

// SetDeviceType sets field value
func (o *DeviceWithConfigContext) SetDeviceType(v NestedDeviceType) {
	o.DeviceType = v
}

// GetDeviceRole returns the DeviceRole field value
func (o *DeviceWithConfigContext) GetDeviceRole() NestedDeviceRole {
	if o == nil {
		var ret NestedDeviceRole
		return ret
	}

	return o.DeviceRole
}

// GetDeviceRoleOk returns a tuple with the DeviceRole field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetDeviceRoleOk() (*NestedDeviceRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceRole, true
}

// SetDeviceRole sets field value
func (o *DeviceWithConfigContext) SetDeviceRole(v NestedDeviceRole) {
	o.DeviceRole = v
}

// GetTenant returns the Tenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetTenant() AggregateTenant {
	if o == nil || o.Tenant.Get() == nil {
		var ret AggregateTenant
		return ret
	}
	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetTenantOk() (*AggregateTenant, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// HasTenant returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasTenant() bool {
	if o != nil && o.Tenant.IsSet() {
		return true
	}

	return false
}

// SetTenant gets a reference to the given NullableAggregateTenant and assigns it to the Tenant field.
func (o *DeviceWithConfigContext) SetTenant(v AggregateTenant) {
	o.Tenant.Set(&v)
}
// SetTenantNil sets the value for Tenant to be an explicit nil
func (o *DeviceWithConfigContext) SetTenantNil() {
	o.Tenant.Set(nil)
}

// UnsetTenant ensures that no value is present for Tenant, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetTenant() {
	o.Tenant.Unset()
}

// GetPlatform returns the Platform field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetPlatform() DevicePlatform {
	if o == nil || o.Platform.Get() == nil {
		var ret DevicePlatform
		return ret
	}
	return *o.Platform.Get()
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetPlatformOk() (*DevicePlatform, bool) {
	if o == nil {
		return nil, false
	}
	return o.Platform.Get(), o.Platform.IsSet()
}

// HasPlatform returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasPlatform() bool {
	if o != nil && o.Platform.IsSet() {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given NullableDevicePlatform and assigns it to the Platform field.
func (o *DeviceWithConfigContext) SetPlatform(v DevicePlatform) {
	o.Platform.Set(&v)
}
// SetPlatformNil sets the value for Platform to be an explicit nil
func (o *DeviceWithConfigContext) SetPlatformNil() {
	o.Platform.Set(nil)
}

// UnsetPlatform ensures that no value is present for Platform, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetPlatform() {
	o.Platform.Unset()
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *DeviceWithConfigContext) GetSerial() string {
	if o == nil || o.Serial == nil {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetSerialOk() (*string, bool) {
	if o == nil || o.Serial == nil {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasSerial() bool {
	if o != nil && o.Serial != nil {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *DeviceWithConfigContext) SetSerial(v string) {
	o.Serial = &v
}

// GetAssetTag returns the AssetTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetAssetTag() string {
	if o == nil || o.AssetTag.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssetTag.Get()
}

// GetAssetTagOk returns a tuple with the AssetTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetAssetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AssetTag.Get(), o.AssetTag.IsSet()
}

// HasAssetTag returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasAssetTag() bool {
	if o != nil && o.AssetTag.IsSet() {
		return true
	}

	return false
}

// SetAssetTag gets a reference to the given NullableString and assigns it to the AssetTag field.
func (o *DeviceWithConfigContext) SetAssetTag(v string) {
	o.AssetTag.Set(&v)
}
// SetAssetTagNil sets the value for AssetTag to be an explicit nil
func (o *DeviceWithConfigContext) SetAssetTagNil() {
	o.AssetTag.Set(nil)
}

// UnsetAssetTag ensures that no value is present for AssetTag, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetAssetTag() {
	o.AssetTag.Unset()
}

// GetSite returns the Site field value
func (o *DeviceWithConfigContext) GetSite() NestedSite {
	if o == nil {
		var ret NestedSite
		return ret
	}

	return o.Site
}

// GetSiteOk returns a tuple with the Site field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetSiteOk() (*NestedSite, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Site, true
}

// SetSite sets field value
func (o *DeviceWithConfigContext) SetSite(v NestedSite) {
	o.Site = v
}

// GetRack returns the Rack field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetRack() DeviceRack {
	if o == nil || o.Rack.Get() == nil {
		var ret DeviceRack
		return ret
	}
	return *o.Rack.Get()
}

// GetRackOk returns a tuple with the Rack field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetRackOk() (*DeviceRack, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rack.Get(), o.Rack.IsSet()
}

// HasRack returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasRack() bool {
	if o != nil && o.Rack.IsSet() {
		return true
	}

	return false
}

// SetRack gets a reference to the given NullableDeviceRack and assigns it to the Rack field.
func (o *DeviceWithConfigContext) SetRack(v DeviceRack) {
	o.Rack.Set(&v)
}
// SetRackNil sets the value for Rack to be an explicit nil
func (o *DeviceWithConfigContext) SetRackNil() {
	o.Rack.Set(nil)
}

// UnsetRack ensures that no value is present for Rack, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetRack() {
	o.Rack.Unset()
}

// GetPosition returns the Position field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetPosition() int32 {
	if o == nil || o.Position.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Position.Get()
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Position.Get(), o.Position.IsSet()
}

// HasPosition returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasPosition() bool {
	if o != nil && o.Position.IsSet() {
		return true
	}

	return false
}

// SetPosition gets a reference to the given NullableInt32 and assigns it to the Position field.
func (o *DeviceWithConfigContext) SetPosition(v int32) {
	o.Position.Set(&v)
}
// SetPositionNil sets the value for Position to be an explicit nil
func (o *DeviceWithConfigContext) SetPositionNil() {
	o.Position.Set(nil)
}

// UnsetPosition ensures that no value is present for Position, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetPosition() {
	o.Position.Unset()
}

// GetFace returns the Face field value if set, zero value otherwise.
func (o *DeviceWithConfigContext) GetFace() DeviceFace {
	if o == nil || o.Face == nil {
		var ret DeviceFace
		return ret
	}
	return *o.Face
}

// GetFaceOk returns a tuple with the Face field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetFaceOk() (*DeviceFace, bool) {
	if o == nil || o.Face == nil {
		return nil, false
	}
	return o.Face, true
}

// HasFace returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasFace() bool {
	if o != nil && o.Face != nil {
		return true
	}

	return false
}

// SetFace gets a reference to the given DeviceFace and assigns it to the Face field.
func (o *DeviceWithConfigContext) SetFace(v DeviceFace) {
	o.Face = &v
}

// GetParentDevice returns the ParentDevice field value
func (o *DeviceWithConfigContext) GetParentDevice() DeviceParentDevice {
	if o == nil {
		var ret DeviceParentDevice
		return ret
	}

	return o.ParentDevice
}

// GetParentDeviceOk returns a tuple with the ParentDevice field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetParentDeviceOk() (*DeviceParentDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ParentDevice, true
}

// SetParentDevice sets field value
func (o *DeviceWithConfigContext) SetParentDevice(v DeviceParentDevice) {
	o.ParentDevice = v
}

// GetStatus returns the Status field value
func (o *DeviceWithConfigContext) GetStatus() DeviceStatus {
	if o == nil {
		var ret DeviceStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetStatusOk() (*DeviceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *DeviceWithConfigContext) SetStatus(v DeviceStatus) {
	o.Status = v
}

// GetPrimaryIp returns the PrimaryIp field value
func (o *DeviceWithConfigContext) GetPrimaryIp() DevicePrimaryIp {
	if o == nil {
		var ret DevicePrimaryIp
		return ret
	}

	return o.PrimaryIp
}

// GetPrimaryIpOk returns a tuple with the PrimaryIp field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetPrimaryIpOk() (*DevicePrimaryIp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrimaryIp, true
}

// SetPrimaryIp sets field value
func (o *DeviceWithConfigContext) SetPrimaryIp(v DevicePrimaryIp) {
	o.PrimaryIp = v
}

// GetPrimaryIp4 returns the PrimaryIp4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetPrimaryIp4() DevicePrimaryIp4 {
	if o == nil || o.PrimaryIp4.Get() == nil {
		var ret DevicePrimaryIp4
		return ret
	}
	return *o.PrimaryIp4.Get()
}

// GetPrimaryIp4Ok returns a tuple with the PrimaryIp4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetPrimaryIp4Ok() (*DevicePrimaryIp4, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIp4.Get(), o.PrimaryIp4.IsSet()
}

// HasPrimaryIp4 returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasPrimaryIp4() bool {
	if o != nil && o.PrimaryIp4.IsSet() {
		return true
	}

	return false
}

// SetPrimaryIp4 gets a reference to the given NullableDevicePrimaryIp4 and assigns it to the PrimaryIp4 field.
func (o *DeviceWithConfigContext) SetPrimaryIp4(v DevicePrimaryIp4) {
	o.PrimaryIp4.Set(&v)
}
// SetPrimaryIp4Nil sets the value for PrimaryIp4 to be an explicit nil
func (o *DeviceWithConfigContext) SetPrimaryIp4Nil() {
	o.PrimaryIp4.Set(nil)
}

// UnsetPrimaryIp4 ensures that no value is present for PrimaryIp4, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetPrimaryIp4() {
	o.PrimaryIp4.Unset()
}

// GetPrimaryIp6 returns the PrimaryIp6 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetPrimaryIp6() DevicePrimaryIp4 {
	if o == nil || o.PrimaryIp6.Get() == nil {
		var ret DevicePrimaryIp4
		return ret
	}
	return *o.PrimaryIp6.Get()
}

// GetPrimaryIp6Ok returns a tuple with the PrimaryIp6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetPrimaryIp6Ok() (*DevicePrimaryIp4, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIp6.Get(), o.PrimaryIp6.IsSet()
}

// HasPrimaryIp6 returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasPrimaryIp6() bool {
	if o != nil && o.PrimaryIp6.IsSet() {
		return true
	}

	return false
}

// SetPrimaryIp6 gets a reference to the given NullableDevicePrimaryIp4 and assigns it to the PrimaryIp6 field.
func (o *DeviceWithConfigContext) SetPrimaryIp6(v DevicePrimaryIp4) {
	o.PrimaryIp6.Set(&v)
}
// SetPrimaryIp6Nil sets the value for PrimaryIp6 to be an explicit nil
func (o *DeviceWithConfigContext) SetPrimaryIp6Nil() {
	o.PrimaryIp6.Set(nil)
}

// UnsetPrimaryIp6 ensures that no value is present for PrimaryIp6, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetPrimaryIp6() {
	o.PrimaryIp6.Unset()
}

// GetSecretsGroup returns the SecretsGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetSecretsGroup() DeviceSecretsGroup {
	if o == nil || o.SecretsGroup.Get() == nil {
		var ret DeviceSecretsGroup
		return ret
	}
	return *o.SecretsGroup.Get()
}

// GetSecretsGroupOk returns a tuple with the SecretsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetSecretsGroupOk() (*DeviceSecretsGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretsGroup.Get(), o.SecretsGroup.IsSet()
}

// HasSecretsGroup returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasSecretsGroup() bool {
	if o != nil && o.SecretsGroup.IsSet() {
		return true
	}

	return false
}

// SetSecretsGroup gets a reference to the given NullableDeviceSecretsGroup and assigns it to the SecretsGroup field.
func (o *DeviceWithConfigContext) SetSecretsGroup(v DeviceSecretsGroup) {
	o.SecretsGroup.Set(&v)
}
// SetSecretsGroupNil sets the value for SecretsGroup to be an explicit nil
func (o *DeviceWithConfigContext) SetSecretsGroupNil() {
	o.SecretsGroup.Set(nil)
}

// UnsetSecretsGroup ensures that no value is present for SecretsGroup, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetSecretsGroup() {
	o.SecretsGroup.Unset()
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetCluster() DeviceCluster {
	if o == nil || o.Cluster.Get() == nil {
		var ret DeviceCluster
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetClusterOk() (*DeviceCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableDeviceCluster and assigns it to the Cluster field.
func (o *DeviceWithConfigContext) SetCluster(v DeviceCluster) {
	o.Cluster.Set(&v)
}
// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *DeviceWithConfigContext) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetCluster() {
	o.Cluster.Unset()
}

// GetVirtualChassis returns the VirtualChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetVirtualChassis() DeviceVirtualChassis {
	if o == nil || o.VirtualChassis.Get() == nil {
		var ret DeviceVirtualChassis
		return ret
	}
	return *o.VirtualChassis.Get()
}

// GetVirtualChassisOk returns a tuple with the VirtualChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetVirtualChassisOk() (*DeviceVirtualChassis, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualChassis.Get(), o.VirtualChassis.IsSet()
}

// HasVirtualChassis returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasVirtualChassis() bool {
	if o != nil && o.VirtualChassis.IsSet() {
		return true
	}

	return false
}

// SetVirtualChassis gets a reference to the given NullableDeviceVirtualChassis and assigns it to the VirtualChassis field.
func (o *DeviceWithConfigContext) SetVirtualChassis(v DeviceVirtualChassis) {
	o.VirtualChassis.Set(&v)
}
// SetVirtualChassisNil sets the value for VirtualChassis to be an explicit nil
func (o *DeviceWithConfigContext) SetVirtualChassisNil() {
	o.VirtualChassis.Set(nil)
}

// UnsetVirtualChassis ensures that no value is present for VirtualChassis, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetVirtualChassis() {
	o.VirtualChassis.Unset()
}

// GetVcPosition returns the VcPosition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetVcPosition() int32 {
	if o == nil || o.VcPosition.Get() == nil {
		var ret int32
		return ret
	}
	return *o.VcPosition.Get()
}

// GetVcPositionOk returns a tuple with the VcPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetVcPositionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VcPosition.Get(), o.VcPosition.IsSet()
}

// HasVcPosition returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasVcPosition() bool {
	if o != nil && o.VcPosition.IsSet() {
		return true
	}

	return false
}

// SetVcPosition gets a reference to the given NullableInt32 and assigns it to the VcPosition field.
func (o *DeviceWithConfigContext) SetVcPosition(v int32) {
	o.VcPosition.Set(&v)
}
// SetVcPositionNil sets the value for VcPosition to be an explicit nil
func (o *DeviceWithConfigContext) SetVcPositionNil() {
	o.VcPosition.Set(nil)
}

// UnsetVcPosition ensures that no value is present for VcPosition, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetVcPosition() {
	o.VcPosition.Unset()
}

// GetVcPriority returns the VcPriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetVcPriority() int32 {
	if o == nil || o.VcPriority.Get() == nil {
		var ret int32
		return ret
	}
	return *o.VcPriority.Get()
}

// GetVcPriorityOk returns a tuple with the VcPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetVcPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VcPriority.Get(), o.VcPriority.IsSet()
}

// HasVcPriority returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasVcPriority() bool {
	if o != nil && o.VcPriority.IsSet() {
		return true
	}

	return false
}

// SetVcPriority gets a reference to the given NullableInt32 and assigns it to the VcPriority field.
func (o *DeviceWithConfigContext) SetVcPriority(v int32) {
	o.VcPriority.Set(&v)
}
// SetVcPriorityNil sets the value for VcPriority to be an explicit nil
func (o *DeviceWithConfigContext) SetVcPriorityNil() {
	o.VcPriority.Set(nil)
}

// UnsetVcPriority ensures that no value is present for VcPriority, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetVcPriority() {
	o.VcPriority.Unset()
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *DeviceWithConfigContext) GetComments() string {
	if o == nil || o.Comments == nil {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetCommentsOk() (*string, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *DeviceWithConfigContext) SetComments(v string) {
	o.Comments = &v
}

// GetLocalContextSchema returns the LocalContextSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetLocalContextSchema() ConfigContextSchema {
	if o == nil || o.LocalContextSchema.Get() == nil {
		var ret ConfigContextSchema
		return ret
	}
	return *o.LocalContextSchema.Get()
}

// GetLocalContextSchemaOk returns a tuple with the LocalContextSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetLocalContextSchemaOk() (*ConfigContextSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalContextSchema.Get(), o.LocalContextSchema.IsSet()
}

// HasLocalContextSchema returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasLocalContextSchema() bool {
	if o != nil && o.LocalContextSchema.IsSet() {
		return true
	}

	return false
}

// SetLocalContextSchema gets a reference to the given NullableConfigContextSchema and assigns it to the LocalContextSchema field.
func (o *DeviceWithConfigContext) SetLocalContextSchema(v ConfigContextSchema) {
	o.LocalContextSchema.Set(&v)
}
// SetLocalContextSchemaNil sets the value for LocalContextSchema to be an explicit nil
func (o *DeviceWithConfigContext) SetLocalContextSchemaNil() {
	o.LocalContextSchema.Set(nil)
}

// UnsetLocalContextSchema ensures that no value is present for LocalContextSchema, not even an explicit nil
func (o *DeviceWithConfigContext) UnsetLocalContextSchema() {
	o.LocalContextSchema.Unset()
}

// GetLocalContextData returns the LocalContextData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceWithConfigContext) GetLocalContextData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.LocalContextData
}

// GetLocalContextDataOk returns a tuple with the LocalContextData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceWithConfigContext) GetLocalContextDataOk() (map[string]interface{}, bool) {
	if o == nil || o.LocalContextData == nil {
		return nil, false
	}
	return o.LocalContextData, true
}

// HasLocalContextData returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasLocalContextData() bool {
	if o != nil && o.LocalContextData != nil {
		return true
	}

	return false
}

// SetLocalContextData gets a reference to the given map[string]interface{} and assigns it to the LocalContextData field.
func (o *DeviceWithConfigContext) SetLocalContextData(v map[string]interface{}) {
	o.LocalContextData = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DeviceWithConfigContext) GetTags() []TagSerializerField {
	if o == nil || o.Tags == nil {
		var ret []TagSerializerField
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetTagsOk() ([]TagSerializerField, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagSerializerField and assigns it to the Tags field.
func (o *DeviceWithConfigContext) SetTags(v []TagSerializerField) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *DeviceWithConfigContext) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *DeviceWithConfigContext) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *DeviceWithConfigContext) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetConfigContext returns the ConfigContext field value
func (o *DeviceWithConfigContext) GetConfigContext() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ConfigContext
}

// GetConfigContextOk returns a tuple with the ConfigContext field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetConfigContextOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigContext, true
}

// SetConfigContext sets field value
func (o *DeviceWithConfigContext) SetConfigContext(v map[string]interface{}) {
	o.ConfigContext = v
}

// GetCreated returns the Created field value
func (o *DeviceWithConfigContext) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *DeviceWithConfigContext) SetCreated(v string) {
	o.Created = v
}

// GetLastUpdated returns the LastUpdated field value
func (o *DeviceWithConfigContext) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *DeviceWithConfigContext) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

// GetDisplay returns the Display field value
func (o *DeviceWithConfigContext) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *DeviceWithConfigContext) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *DeviceWithConfigContext) SetDisplay(v string) {
	o.Display = v
}

func (o DeviceWithConfigContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["device_type"] = o.DeviceType
	}
	if true {
		toSerialize["device_role"] = o.DeviceRole
	}
	if o.Tenant.IsSet() {
		toSerialize["tenant"] = o.Tenant.Get()
	}
	if o.Platform.IsSet() {
		toSerialize["platform"] = o.Platform.Get()
	}
	if o.Serial != nil {
		toSerialize["serial"] = o.Serial
	}
	if o.AssetTag.IsSet() {
		toSerialize["asset_tag"] = o.AssetTag.Get()
	}
	if true {
		toSerialize["site"] = o.Site
	}
	if o.Rack.IsSet() {
		toSerialize["rack"] = o.Rack.Get()
	}
	if o.Position.IsSet() {
		toSerialize["position"] = o.Position.Get()
	}
	if o.Face != nil {
		toSerialize["face"] = o.Face
	}
	if true {
		toSerialize["parent_device"] = o.ParentDevice
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["primary_ip"] = o.PrimaryIp
	}
	if o.PrimaryIp4.IsSet() {
		toSerialize["primary_ip4"] = o.PrimaryIp4.Get()
	}
	if o.PrimaryIp6.IsSet() {
		toSerialize["primary_ip6"] = o.PrimaryIp6.Get()
	}
	if o.SecretsGroup.IsSet() {
		toSerialize["secrets_group"] = o.SecretsGroup.Get()
	}
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	if o.VirtualChassis.IsSet() {
		toSerialize["virtual_chassis"] = o.VirtualChassis.Get()
	}
	if o.VcPosition.IsSet() {
		toSerialize["vc_position"] = o.VcPosition.Get()
	}
	if o.VcPriority.IsSet() {
		toSerialize["vc_priority"] = o.VcPriority.Get()
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.LocalContextSchema.IsSet() {
		toSerialize["local_context_schema"] = o.LocalContextSchema.Get()
	}
	if o.LocalContextData != nil {
		toSerialize["local_context_data"] = o.LocalContextData
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if true {
		toSerialize["config_context"] = o.ConfigContext
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceWithConfigContext struct {
	value *DeviceWithConfigContext
	isSet bool
}

func (v NullableDeviceWithConfigContext) Get() *DeviceWithConfigContext {
	return v.value
}

func (v *NullableDeviceWithConfigContext) Set(val *DeviceWithConfigContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceWithConfigContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceWithConfigContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceWithConfigContext(val *DeviceWithConfigContext) *NullableDeviceWithConfigContext {
	return &NullableDeviceWithConfigContext{value: val, isSet: true}
}

func (v NullableDeviceWithConfigContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceWithConfigContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


