/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// DcimApiService DcimApi service
type DcimApiService service

type ApiDcimCablesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimCablesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimCablesBulkDestroyExecute(r)
}

/*
DcimCablesBulkDestroy Method for DcimCablesBulkDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimCablesBulkDestroyRequest
*/
func (a *DcimApiService) DcimCablesBulkDestroy(ctx context.Context) ApiDcimCablesBulkDestroyRequest {
	return ApiDcimCablesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimCablesBulkDestroyExecute(r ApiDcimCablesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimCablesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableCable *PatchedWritableCable
}

func (r ApiDcimCablesBulkPartialUpdateRequest) PatchedWritableCable(patchedWritableCable PatchedWritableCable) ApiDcimCablesBulkPartialUpdateRequest {
	r.patchedWritableCable = &patchedWritableCable
	return r
}

func (r ApiDcimCablesBulkPartialUpdateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesBulkPartialUpdateExecute(r)
}

/*
DcimCablesBulkPartialUpdate Method for DcimCablesBulkPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimCablesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimCablesBulkPartialUpdate(ctx context.Context) ApiDcimCablesBulkPartialUpdateRequest {
	return ApiDcimCablesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cable
func (a *DcimApiService) DcimCablesBulkPartialUpdateExecute(r ApiDcimCablesBulkPartialUpdateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableCable *WritableCable
}

func (r ApiDcimCablesBulkUpdateRequest) WritableCable(writableCable WritableCable) ApiDcimCablesBulkUpdateRequest {
	r.writableCable = &writableCable
	return r
}

func (r ApiDcimCablesBulkUpdateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesBulkUpdateExecute(r)
}

/*
DcimCablesBulkUpdate Method for DcimCablesBulkUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimCablesBulkUpdateRequest
*/
func (a *DcimApiService) DcimCablesBulkUpdate(ctx context.Context) ApiDcimCablesBulkUpdateRequest {
	return ApiDcimCablesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cable
func (a *DcimApiService) DcimCablesBulkUpdateExecute(r ApiDcimCablesBulkUpdateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCable == nil {
		return localVarReturnValue, nil, reportError("writableCable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableCable *WritableCable
}

func (r ApiDcimCablesCreateRequest) WritableCable(writableCable WritableCable) ApiDcimCablesCreateRequest {
	r.writableCable = &writableCable
	return r
}

func (r ApiDcimCablesCreateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesCreateExecute(r)
}

/*
DcimCablesCreate Method for DcimCablesCreate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimCablesCreateRequest
*/
func (a *DcimApiService) DcimCablesCreate(ctx context.Context) ApiDcimCablesCreateRequest {
	return ApiDcimCablesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cable
func (a *DcimApiService) DcimCablesCreateExecute(r ApiDcimCablesCreateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCable == nil {
		return localVarReturnValue, nil, reportError("writableCable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimCablesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimCablesDestroyExecute(r)
}

/*
DcimCablesDestroy Method for DcimCablesDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cable.
 @return ApiDcimCablesDestroyRequest
*/
func (a *DcimApiService) DcimCablesDestroy(ctx context.Context, id string) ApiDcimCablesDestroyRequest {
	return ApiDcimCablesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimCablesDestroyExecute(r ApiDcimCablesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimCablesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	color *[]string
	colorN *[]string
	created *string
	createdGte *string
	createdLte *string
	device *[]string
	deviceId *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	label *[]string
	labelIc *[]string
	labelIe *[]string
	labelIew *[]string
	labelIre *[]string
	labelIsw *[]string
	labelN *[]string
	labelNic *[]string
	labelNie *[]string
	labelNiew *[]string
	labelNire *[]string
	labelNisw *[]string
	labelNre *[]string
	labelRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	length *[]int32
	lengthGt *[]int32
	lengthGte *[]int32
	lengthLt *[]int32
	lengthLte *[]int32
	lengthN *[]int32
	lengthUnit *string
	lengthUnitN *string
	limit *int32
	offset *int32
	q *string
	rack *[]string
	rackId *[]string
	site *[]string
	siteId *[]string
	status *[]string
	statusN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantId *[]string
	type_ *[]string
	typeN *[]string
}

func (r ApiDcimCablesListRequest) Color(color []string) ApiDcimCablesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimCablesListRequest) ColorN(colorN []string) ApiDcimCablesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimCablesListRequest) Created(created string) ApiDcimCablesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimCablesListRequest) CreatedGte(createdGte string) ApiDcimCablesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimCablesListRequest) CreatedLte(createdLte string) ApiDcimCablesListRequest {
	r.createdLte = &createdLte
	return r
}

// Device (name)
func (r ApiDcimCablesListRequest) Device(device []string) ApiDcimCablesListRequest {
	r.device = &device
	return r
}

// Device (ID)
func (r ApiDcimCablesListRequest) DeviceId(deviceId []string) ApiDcimCablesListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiDcimCablesListRequest) Id(id []string) ApiDcimCablesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimCablesListRequest) IdIc(idIc []string) ApiDcimCablesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimCablesListRequest) IdIe(idIe []string) ApiDcimCablesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimCablesListRequest) IdIew(idIew []string) ApiDcimCablesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimCablesListRequest) IdIre(idIre []string) ApiDcimCablesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimCablesListRequest) IdIsw(idIsw []string) ApiDcimCablesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimCablesListRequest) IdN(idN []string) ApiDcimCablesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimCablesListRequest) IdNic(idNic []string) ApiDcimCablesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimCablesListRequest) IdNie(idNie []string) ApiDcimCablesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimCablesListRequest) IdNiew(idNiew []string) ApiDcimCablesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimCablesListRequest) IdNire(idNire []string) ApiDcimCablesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimCablesListRequest) IdNisw(idNisw []string) ApiDcimCablesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimCablesListRequest) IdNre(idNre []string) ApiDcimCablesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimCablesListRequest) IdRe(idRe []string) ApiDcimCablesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimCablesListRequest) Label(label []string) ApiDcimCablesListRequest {
	r.label = &label
	return r
}

func (r ApiDcimCablesListRequest) LabelIc(labelIc []string) ApiDcimCablesListRequest {
	r.labelIc = &labelIc
	return r
}

func (r ApiDcimCablesListRequest) LabelIe(labelIe []string) ApiDcimCablesListRequest {
	r.labelIe = &labelIe
	return r
}

func (r ApiDcimCablesListRequest) LabelIew(labelIew []string) ApiDcimCablesListRequest {
	r.labelIew = &labelIew
	return r
}

func (r ApiDcimCablesListRequest) LabelIre(labelIre []string) ApiDcimCablesListRequest {
	r.labelIre = &labelIre
	return r
}

func (r ApiDcimCablesListRequest) LabelIsw(labelIsw []string) ApiDcimCablesListRequest {
	r.labelIsw = &labelIsw
	return r
}

func (r ApiDcimCablesListRequest) LabelN(labelN []string) ApiDcimCablesListRequest {
	r.labelN = &labelN
	return r
}

func (r ApiDcimCablesListRequest) LabelNic(labelNic []string) ApiDcimCablesListRequest {
	r.labelNic = &labelNic
	return r
}

func (r ApiDcimCablesListRequest) LabelNie(labelNie []string) ApiDcimCablesListRequest {
	r.labelNie = &labelNie
	return r
}

func (r ApiDcimCablesListRequest) LabelNiew(labelNiew []string) ApiDcimCablesListRequest {
	r.labelNiew = &labelNiew
	return r
}

func (r ApiDcimCablesListRequest) LabelNire(labelNire []string) ApiDcimCablesListRequest {
	r.labelNire = &labelNire
	return r
}

func (r ApiDcimCablesListRequest) LabelNisw(labelNisw []string) ApiDcimCablesListRequest {
	r.labelNisw = &labelNisw
	return r
}

func (r ApiDcimCablesListRequest) LabelNre(labelNre []string) ApiDcimCablesListRequest {
	r.labelNre = &labelNre
	return r
}

func (r ApiDcimCablesListRequest) LabelRe(labelRe []string) ApiDcimCablesListRequest {
	r.labelRe = &labelRe
	return r
}

func (r ApiDcimCablesListRequest) LastUpdated(lastUpdated time.Time) ApiDcimCablesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimCablesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimCablesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimCablesListRequest) Length(length []int32) ApiDcimCablesListRequest {
	r.length = &length
	return r
}

func (r ApiDcimCablesListRequest) LengthGt(lengthGt []int32) ApiDcimCablesListRequest {
	r.lengthGt = &lengthGt
	return r
}

func (r ApiDcimCablesListRequest) LengthGte(lengthGte []int32) ApiDcimCablesListRequest {
	r.lengthGte = &lengthGte
	return r
}

func (r ApiDcimCablesListRequest) LengthLt(lengthLt []int32) ApiDcimCablesListRequest {
	r.lengthLt = &lengthLt
	return r
}

func (r ApiDcimCablesListRequest) LengthLte(lengthLte []int32) ApiDcimCablesListRequest {
	r.lengthLte = &lengthLte
	return r
}

func (r ApiDcimCablesListRequest) LengthN(lengthN []int32) ApiDcimCablesListRequest {
	r.lengthN = &lengthN
	return r
}

func (r ApiDcimCablesListRequest) LengthUnit(lengthUnit string) ApiDcimCablesListRequest {
	r.lengthUnit = &lengthUnit
	return r
}

func (r ApiDcimCablesListRequest) LengthUnitN(lengthUnitN string) ApiDcimCablesListRequest {
	r.lengthUnitN = &lengthUnitN
	return r
}

// Number of results to return per page.
func (r ApiDcimCablesListRequest) Limit(limit int32) ApiDcimCablesListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDcimCablesListRequest) Offset(offset int32) ApiDcimCablesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimCablesListRequest) Q(q string) ApiDcimCablesListRequest {
	r.q = &q
	return r
}

// Rack (name)
func (r ApiDcimCablesListRequest) Rack(rack []string) ApiDcimCablesListRequest {
	r.rack = &rack
	return r
}

// Rack (ID)
func (r ApiDcimCablesListRequest) RackId(rackId []string) ApiDcimCablesListRequest {
	r.rackId = &rackId
	return r
}

// Site (name)
func (r ApiDcimCablesListRequest) Site(site []string) ApiDcimCablesListRequest {
	r.site = &site
	return r
}

// Site (ID)
func (r ApiDcimCablesListRequest) SiteId(siteId []string) ApiDcimCablesListRequest {
	r.siteId = &siteId
	return r
}

func (r ApiDcimCablesListRequest) Status(status []string) ApiDcimCablesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimCablesListRequest) StatusN(statusN []string) ApiDcimCablesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimCablesListRequest) Tag(tag []string) ApiDcimCablesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimCablesListRequest) TagN(tagN []string) ApiDcimCablesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (name)
func (r ApiDcimCablesListRequest) Tenant(tenant []string) ApiDcimCablesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (ID)
func (r ApiDcimCablesListRequest) TenantId(tenantId []string) ApiDcimCablesListRequest {
	r.tenantId = &tenantId
	return r
}

func (r ApiDcimCablesListRequest) Type_(type_ []string) ApiDcimCablesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimCablesListRequest) TypeN(typeN []string) ApiDcimCablesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimCablesListRequest) Execute() (*PaginatedCableList, *http.Response, error) {
	return r.ApiService.DcimCablesListExecute(r)
}

/*
DcimCablesList Method for DcimCablesList

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimCablesListRequest
*/
func (a *DcimApiService) DcimCablesList(ctx context.Context) ApiDcimCablesListRequest {
	return ApiDcimCablesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedCableList
func (a *DcimApiService) DcimCablesListExecute(r ApiDcimCablesListRequest) (*PaginatedCableList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedCableList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.label != nil {
		t := *r.label
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label", parameterToString(t, "multi"))
		}
	}
	if r.labelIc != nil {
		t := *r.labelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__ic", parameterToString(t, "multi"))
		}
	}
	if r.labelIe != nil {
		t := *r.labelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__ie", parameterToString(t, "multi"))
		}
	}
	if r.labelIew != nil {
		t := *r.labelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__iew", parameterToString(t, "multi"))
		}
	}
	if r.labelIre != nil {
		t := *r.labelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__ire", parameterToString(t, "multi"))
		}
	}
	if r.labelIsw != nil {
		t := *r.labelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__isw", parameterToString(t, "multi"))
		}
	}
	if r.labelN != nil {
		t := *r.labelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__n", parameterToString(t, "multi"))
		}
	}
	if r.labelNic != nil {
		t := *r.labelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__nic", parameterToString(t, "multi"))
		}
	}
	if r.labelNie != nil {
		t := *r.labelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__nie", parameterToString(t, "multi"))
		}
	}
	if r.labelNiew != nil {
		t := *r.labelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__niew", parameterToString(t, "multi"))
		}
	}
	if r.labelNire != nil {
		t := *r.labelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__nire", parameterToString(t, "multi"))
		}
	}
	if r.labelNisw != nil {
		t := *r.labelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__nisw", parameterToString(t, "multi"))
		}
	}
	if r.labelNre != nil {
		t := *r.labelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__nre", parameterToString(t, "multi"))
		}
	}
	if r.labelRe != nil {
		t := *r.labelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.length != nil {
		t := *r.length
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("length", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("length", parameterToString(t, "multi"))
		}
	}
	if r.lengthGt != nil {
		t := *r.lengthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("length__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("length__gt", parameterToString(t, "multi"))
		}
	}
	if r.lengthGte != nil {
		t := *r.lengthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("length__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("length__gte", parameterToString(t, "multi"))
		}
	}
	if r.lengthLt != nil {
		t := *r.lengthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("length__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("length__lt", parameterToString(t, "multi"))
		}
	}
	if r.lengthLte != nil {
		t := *r.lengthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("length__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("length__lte", parameterToString(t, "multi"))
		}
	}
	if r.lengthN != nil {
		t := *r.lengthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("length__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("length__n", parameterToString(t, "multi"))
		}
	}
	if r.lengthUnit != nil {
		localVarQueryParams.Add("length_unit", parameterToString(*r.lengthUnit, ""))
	}
	if r.lengthUnitN != nil {
		localVarQueryParams.Add("length_unit__n", parameterToString(*r.lengthUnitN, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.rack != nil {
		t := *r.rack
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack", parameterToString(t, "multi"))
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableCable *PatchedWritableCable
}

func (r ApiDcimCablesPartialUpdateRequest) PatchedWritableCable(patchedWritableCable PatchedWritableCable) ApiDcimCablesPartialUpdateRequest {
	r.patchedWritableCable = &patchedWritableCable
	return r
}

func (r ApiDcimCablesPartialUpdateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesPartialUpdateExecute(r)
}

/*
DcimCablesPartialUpdate Method for DcimCablesPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cable.
 @return ApiDcimCablesPartialUpdateRequest
*/
func (a *DcimApiService) DcimCablesPartialUpdate(ctx context.Context, id string) ApiDcimCablesPartialUpdateRequest {
	return ApiDcimCablesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cable
func (a *DcimApiService) DcimCablesPartialUpdateExecute(r ApiDcimCablesPartialUpdateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimCablesRetrieveRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesRetrieveExecute(r)
}

/*
DcimCablesRetrieve Method for DcimCablesRetrieve

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cable.
 @return ApiDcimCablesRetrieveRequest
*/
func (a *DcimApiService) DcimCablesRetrieve(ctx context.Context, id string) ApiDcimCablesRetrieveRequest {
	return ApiDcimCablesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cable
func (a *DcimApiService) DcimCablesRetrieveExecute(r ApiDcimCablesRetrieveRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimCablesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableCable *WritableCable
}

func (r ApiDcimCablesUpdateRequest) WritableCable(writableCable WritableCable) ApiDcimCablesUpdateRequest {
	r.writableCable = &writableCable
	return r
}

func (r ApiDcimCablesUpdateRequest) Execute() (*Cable, *http.Response, error) {
	return r.ApiService.DcimCablesUpdateExecute(r)
}

/*
DcimCablesUpdate Method for DcimCablesUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cable.
 @return ApiDcimCablesUpdateRequest
*/
func (a *DcimApiService) DcimCablesUpdate(ctx context.Context, id string) ApiDcimCablesUpdateRequest {
	return ApiDcimCablesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cable
func (a *DcimApiService) DcimCablesUpdateExecute(r ApiDcimCablesUpdateRequest) (*Cable, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimCablesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/cables/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCable == nil {
		return localVarReturnValue, nil, reportError("writableCable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCable
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConnectedDeviceListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	peerDevice *string
	peerInterface *string
}

// The name of the peer device
func (r ApiDcimConnectedDeviceListRequest) PeerDevice(peerDevice string) ApiDcimConnectedDeviceListRequest {
	r.peerDevice = &peerDevice
	return r
}

// The name of the peer interface
func (r ApiDcimConnectedDeviceListRequest) PeerInterface(peerInterface string) ApiDcimConnectedDeviceListRequest {
	r.peerInterface = &peerInterface
	return r
}

func (r ApiDcimConnectedDeviceListRequest) Execute() ([]Device, *http.Response, error) {
	return r.ApiService.DcimConnectedDeviceListExecute(r)
}

/*
DcimConnectedDeviceList Method for DcimConnectedDeviceList

This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer
interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors
via a protocol such as LLDP. Two query parameters must be included in the request:

* `peer_device`: The name of the peer device
* `peer_interface`: The name of the peer interface

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConnectedDeviceListRequest
*/
func (a *DcimApiService) DcimConnectedDeviceList(ctx context.Context) ApiDcimConnectedDeviceListRequest {
	return ApiDcimConnectedDeviceListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Device
func (a *DcimApiService) DcimConnectedDeviceListExecute(r ApiDcimConnectedDeviceListRequest) ([]Device, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Device
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConnectedDeviceList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/connected-device/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.peerDevice == nil {
		return localVarReturnValue, nil, reportError("peerDevice is required and must be specified")
	}
	if r.peerInterface == nil {
		return localVarReturnValue, nil, reportError("peerInterface is required and must be specified")
	}

	localVarQueryParams.Add("peer_device", parameterToString(*r.peerDevice, ""))
	localVarQueryParams.Add("peer_interface", parameterToString(*r.peerInterface, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleConnectionsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	device *[]string
	deviceId *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	site *string
}

// Device (name)
func (r ApiDcimConsoleConnectionsListRequest) Device(device []string) ApiDcimConsoleConnectionsListRequest {
	r.device = &device
	return r
}

// Device (ID)
func (r ApiDcimConsoleConnectionsListRequest) DeviceId(deviceId []string) ApiDcimConsoleConnectionsListRequest {
	r.deviceId = &deviceId
	return r
}

// Number of results to return per page.
func (r ApiDcimConsoleConnectionsListRequest) Limit(limit int32) ApiDcimConsoleConnectionsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) Name(name []string) ApiDcimConsoleConnectionsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameIc(nameIc []string) ApiDcimConsoleConnectionsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameIe(nameIe []string) ApiDcimConsoleConnectionsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameIew(nameIew []string) ApiDcimConsoleConnectionsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameIre(nameIre []string) ApiDcimConsoleConnectionsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameIsw(nameIsw []string) ApiDcimConsoleConnectionsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameN(nameN []string) ApiDcimConsoleConnectionsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameNic(nameNic []string) ApiDcimConsoleConnectionsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameNie(nameNie []string) ApiDcimConsoleConnectionsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameNiew(nameNiew []string) ApiDcimConsoleConnectionsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameNire(nameNire []string) ApiDcimConsoleConnectionsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameNisw(nameNisw []string) ApiDcimConsoleConnectionsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameNre(nameNre []string) ApiDcimConsoleConnectionsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) NameRe(nameRe []string) ApiDcimConsoleConnectionsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsoleConnectionsListRequest) Offset(offset int32) ApiDcimConsoleConnectionsListRequest {
	r.offset = &offset
	return r
}

// Site (slug)
func (r ApiDcimConsoleConnectionsListRequest) Site(site string) ApiDcimConsoleConnectionsListRequest {
	r.site = &site
	return r
}

func (r ApiDcimConsoleConnectionsListRequest) Execute() (*PaginatedConsolePortList, *http.Response, error) {
	return r.ApiService.DcimConsoleConnectionsListExecute(r)
}

/*
DcimConsoleConnectionsList Method for DcimConsoleConnectionsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleConnectionsListRequest
*/
func (a *DcimApiService) DcimConsoleConnectionsList(ctx context.Context) ApiDcimConsoleConnectionsListRequest {
	return ApiDcimConsoleConnectionsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConsolePortList
func (a *DcimApiService) DcimConsoleConnectionsListExecute(r ApiDcimConsoleConnectionsListRequest) (*PaginatedConsolePortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConsolePortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleConnectionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-connections/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.site != nil {
		localVarQueryParams.Add("site", parameterToString(*r.site, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimConsolePortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesBulkDestroyExecute(r)
}

/*
DcimConsolePortTemplatesBulkDestroy Method for DcimConsolePortTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesBulkDestroy(ctx context.Context) ApiDcimConsolePortTemplatesBulkDestroyRequest {
	return ApiDcimConsolePortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsolePortTemplatesBulkDestroyExecute(r ApiDcimConsolePortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableConsolePortTemplate *PatchedWritableConsolePortTemplate
}

func (r ApiDcimConsolePortTemplatesBulkPartialUpdateRequest) PatchedWritableConsolePortTemplate(patchedWritableConsolePortTemplate PatchedWritableConsolePortTemplate) ApiDcimConsolePortTemplatesBulkPartialUpdateRequest {
	r.patchedWritableConsolePortTemplate = &patchedWritableConsolePortTemplate
	return r
}

func (r ApiDcimConsolePortTemplatesBulkPartialUpdateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimConsolePortTemplatesBulkPartialUpdate Method for DcimConsolePortTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimConsolePortTemplatesBulkPartialUpdateRequest {
	return ApiDcimConsolePortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsolePortTemplate
func (a *DcimApiService) DcimConsolePortTemplatesBulkPartialUpdateExecute(r ApiDcimConsolePortTemplatesBulkPartialUpdateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsolePortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsolePortTemplate *WritableConsolePortTemplate
}

func (r ApiDcimConsolePortTemplatesBulkUpdateRequest) WritableConsolePortTemplate(writableConsolePortTemplate WritableConsolePortTemplate) ApiDcimConsolePortTemplatesBulkUpdateRequest {
	r.writableConsolePortTemplate = &writableConsolePortTemplate
	return r
}

func (r ApiDcimConsolePortTemplatesBulkUpdateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesBulkUpdateExecute(r)
}

/*
DcimConsolePortTemplatesBulkUpdate Method for DcimConsolePortTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesBulkUpdate(ctx context.Context) ApiDcimConsolePortTemplatesBulkUpdateRequest {
	return ApiDcimConsolePortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsolePortTemplate
func (a *DcimApiService) DcimConsolePortTemplatesBulkUpdateExecute(r ApiDcimConsolePortTemplatesBulkUpdateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsolePortTemplate *WritableConsolePortTemplate
}

func (r ApiDcimConsolePortTemplatesCreateRequest) WritableConsolePortTemplate(writableConsolePortTemplate WritableConsolePortTemplate) ApiDcimConsolePortTemplatesCreateRequest {
	r.writableConsolePortTemplate = &writableConsolePortTemplate
	return r
}

func (r ApiDcimConsolePortTemplatesCreateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesCreateExecute(r)
}

/*
DcimConsolePortTemplatesCreate Method for DcimConsolePortTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortTemplatesCreateRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesCreate(ctx context.Context) ApiDcimConsolePortTemplatesCreateRequest {
	return ApiDcimConsolePortTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsolePortTemplate
func (a *DcimApiService) DcimConsolePortTemplatesCreateExecute(r ApiDcimConsolePortTemplatesCreateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsolePortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesDestroyExecute(r)
}

/*
DcimConsolePortTemplatesDestroy Method for DcimConsolePortTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port template.
 @return ApiDcimConsolePortTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesDestroy(ctx context.Context, id string) ApiDcimConsolePortTemplatesDestroyRequest {
	return ApiDcimConsolePortTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsolePortTemplatesDestroyExecute(r ApiDcimConsolePortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	type_ *string
	typeN *string
}

// Device type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimConsolePortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsolePortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimConsolePortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Id(id []string) ApiDcimConsolePortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdIc(idIc []string) ApiDcimConsolePortTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdIe(idIe []string) ApiDcimConsolePortTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdIew(idIew []string) ApiDcimConsolePortTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdIre(idIre []string) ApiDcimConsolePortTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdIsw(idIsw []string) ApiDcimConsolePortTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdN(idN []string) ApiDcimConsolePortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdNic(idNic []string) ApiDcimConsolePortTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdNie(idNie []string) ApiDcimConsolePortTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdNiew(idNiew []string) ApiDcimConsolePortTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdNire(idNire []string) ApiDcimConsolePortTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdNisw(idNisw []string) ApiDcimConsolePortTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdNre(idNre []string) ApiDcimConsolePortTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) IdRe(idRe []string) ApiDcimConsolePortTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimConsolePortTemplatesListRequest) Limit(limit int32) ApiDcimConsolePortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Name(name []string) ApiDcimConsolePortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIc(nameIc []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIe(nameIe []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIew(nameIew []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIre(nameIre []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameN(nameN []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNic(nameNic []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNie(nameNie []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNire(nameNire []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameNre(nameNre []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) NameRe(nameRe []string) ApiDcimConsolePortTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsolePortTemplatesListRequest) Offset(offset int32) ApiDcimConsolePortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimConsolePortTemplatesListRequest) Q(q string) ApiDcimConsolePortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Type_(type_ string) ApiDcimConsolePortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) TypeN(typeN string) ApiDcimConsolePortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsolePortTemplatesListRequest) Execute() (*PaginatedConsolePortTemplateList, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesListExecute(r)
}

/*
DcimConsolePortTemplatesList Method for DcimConsolePortTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortTemplatesListRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesList(ctx context.Context) ApiDcimConsolePortTemplatesListRequest {
	return ApiDcimConsolePortTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConsolePortTemplateList
func (a *DcimApiService) DcimConsolePortTemplatesListExecute(r ApiDcimConsolePortTemplatesListRequest) (*PaginatedConsolePortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConsolePortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableConsolePortTemplate *PatchedWritableConsolePortTemplate
}

func (r ApiDcimConsolePortTemplatesPartialUpdateRequest) PatchedWritableConsolePortTemplate(patchedWritableConsolePortTemplate PatchedWritableConsolePortTemplate) ApiDcimConsolePortTemplatesPartialUpdateRequest {
	r.patchedWritableConsolePortTemplate = &patchedWritableConsolePortTemplate
	return r
}

func (r ApiDcimConsolePortTemplatesPartialUpdateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesPartialUpdateExecute(r)
}

/*
DcimConsolePortTemplatesPartialUpdate Method for DcimConsolePortTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port template.
 @return ApiDcimConsolePortTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimConsolePortTemplatesPartialUpdateRequest {
	return ApiDcimConsolePortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePortTemplate
func (a *DcimApiService) DcimConsolePortTemplatesPartialUpdateExecute(r ApiDcimConsolePortTemplatesPartialUpdateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsolePortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsolePortTemplatesRetrieveRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesRetrieveExecute(r)
}

/*
DcimConsolePortTemplatesRetrieve Method for DcimConsolePortTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port template.
 @return ApiDcimConsolePortTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesRetrieve(ctx context.Context, id string) ApiDcimConsolePortTemplatesRetrieveRequest {
	return ApiDcimConsolePortTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePortTemplate
func (a *DcimApiService) DcimConsolePortTemplatesRetrieveExecute(r ApiDcimConsolePortTemplatesRetrieveRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableConsolePortTemplate *WritableConsolePortTemplate
}

func (r ApiDcimConsolePortTemplatesUpdateRequest) WritableConsolePortTemplate(writableConsolePortTemplate WritableConsolePortTemplate) ApiDcimConsolePortTemplatesUpdateRequest {
	r.writableConsolePortTemplate = &writableConsolePortTemplate
	return r
}

func (r ApiDcimConsolePortTemplatesUpdateRequest) Execute() (*ConsolePortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsolePortTemplatesUpdateExecute(r)
}

/*
DcimConsolePortTemplatesUpdate Method for DcimConsolePortTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port template.
 @return ApiDcimConsolePortTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortTemplatesUpdate(ctx context.Context, id string) ApiDcimConsolePortTemplatesUpdateRequest {
	return ApiDcimConsolePortTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePortTemplate
func (a *DcimApiService) DcimConsolePortTemplatesUpdateExecute(r ApiDcimConsolePortTemplatesUpdateRequest) (*ConsolePortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableConsolePortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimConsolePortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortsBulkDestroyExecute(r)
}

/*
DcimConsolePortsBulkDestroy Method for DcimConsolePortsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortsBulkDestroyRequest
*/
func (a *DcimApiService) DcimConsolePortsBulkDestroy(ctx context.Context) ApiDcimConsolePortsBulkDestroyRequest {
	return ApiDcimConsolePortsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsolePortsBulkDestroyExecute(r ApiDcimConsolePortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableConsolePort *PatchedWritableConsolePort
}

func (r ApiDcimConsolePortsBulkPartialUpdateRequest) PatchedWritableConsolePort(patchedWritableConsolePort PatchedWritableConsolePort) ApiDcimConsolePortsBulkPartialUpdateRequest {
	r.patchedWritableConsolePort = &patchedWritableConsolePort
	return r
}

func (r ApiDcimConsolePortsBulkPartialUpdateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsBulkPartialUpdateExecute(r)
}

/*
DcimConsolePortsBulkPartialUpdate Method for DcimConsolePortsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortsBulkPartialUpdate(ctx context.Context) ApiDcimConsolePortsBulkPartialUpdateRequest {
	return ApiDcimConsolePortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsBulkPartialUpdateExecute(r ApiDcimConsolePortsBulkPartialUpdateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsolePort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsolePort *WritableConsolePort
}

func (r ApiDcimConsolePortsBulkUpdateRequest) WritableConsolePort(writableConsolePort WritableConsolePort) ApiDcimConsolePortsBulkUpdateRequest {
	r.writableConsolePort = &writableConsolePort
	return r
}

func (r ApiDcimConsolePortsBulkUpdateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsBulkUpdateExecute(r)
}

/*
DcimConsolePortsBulkUpdate Method for DcimConsolePortsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortsBulkUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortsBulkUpdate(ctx context.Context) ApiDcimConsolePortsBulkUpdateRequest {
	return ApiDcimConsolePortsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsBulkUpdateExecute(r ApiDcimConsolePortsBulkUpdateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePort == nil {
		return localVarReturnValue, nil, reportError("writableConsolePort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsolePort *WritableConsolePort
}

func (r ApiDcimConsolePortsCreateRequest) WritableConsolePort(writableConsolePort WritableConsolePort) ApiDcimConsolePortsCreateRequest {
	r.writableConsolePort = &writableConsolePort
	return r
}

func (r ApiDcimConsolePortsCreateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsCreateExecute(r)
}

/*
DcimConsolePortsCreate Method for DcimConsolePortsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortsCreateRequest
*/
func (a *DcimApiService) DcimConsolePortsCreate(ctx context.Context) ApiDcimConsolePortsCreateRequest {
	return ApiDcimConsolePortsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsCreateExecute(r ApiDcimConsolePortsCreateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePort == nil {
		return localVarReturnValue, nil, reportError("writableConsolePort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsolePortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsolePortsDestroyExecute(r)
}

/*
DcimConsolePortsDestroy Method for DcimConsolePortsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port.
 @return ApiDcimConsolePortsDestroyRequest
*/
func (a *DcimApiService) DcimConsolePortsDestroy(ctx context.Context, id string) ApiDcimConsolePortsDestroyRequest {
	return ApiDcimConsolePortsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsolePortsDestroyExecute(r ApiDcimConsolePortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsolePortsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	cabled *bool
	connected *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *[]string
	typeN *[]string
}

func (r ApiDcimConsolePortsListRequest) Cabled(cabled bool) ApiDcimConsolePortsListRequest {
	r.cabled = &cabled
	return r
}

// Connected status (bool)
func (r ApiDcimConsolePortsListRequest) Connected(connected bool) ApiDcimConsolePortsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimConsolePortsListRequest) Description(description []string) ApiDcimConsolePortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimConsolePortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimConsolePortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimConsolePortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIre(descriptionIre []string) ApiDcimConsolePortsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimConsolePortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionN(descriptionN []string) ApiDcimConsolePortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimConsolePortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimConsolePortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimConsolePortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNire(descriptionNire []string) ApiDcimConsolePortsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimConsolePortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionNre(descriptionNre []string) ApiDcimConsolePortsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimConsolePortsListRequest) DescriptionRe(descriptionRe []string) ApiDcimConsolePortsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimConsolePortsListRequest) Device(device []*string) ApiDcimConsolePortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimConsolePortsListRequest) DeviceN(deviceN []*string) ApiDcimConsolePortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimConsolePortsListRequest) DeviceId(deviceId []string) ApiDcimConsolePortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimConsolePortsListRequest) DeviceIdN(deviceIdN []string) ApiDcimConsolePortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Id(id []string) ApiDcimConsolePortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsolePortsListRequest) IdIc(idIc []string) ApiDcimConsolePortsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimConsolePortsListRequest) IdIe(idIe []string) ApiDcimConsolePortsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimConsolePortsListRequest) IdIew(idIew []string) ApiDcimConsolePortsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimConsolePortsListRequest) IdIre(idIre []string) ApiDcimConsolePortsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimConsolePortsListRequest) IdIsw(idIsw []string) ApiDcimConsolePortsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimConsolePortsListRequest) IdN(idN []string) ApiDcimConsolePortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsolePortsListRequest) IdNic(idNic []string) ApiDcimConsolePortsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimConsolePortsListRequest) IdNie(idNie []string) ApiDcimConsolePortsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimConsolePortsListRequest) IdNiew(idNiew []string) ApiDcimConsolePortsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimConsolePortsListRequest) IdNire(idNire []string) ApiDcimConsolePortsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimConsolePortsListRequest) IdNisw(idNisw []string) ApiDcimConsolePortsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimConsolePortsListRequest) IdNre(idNre []string) ApiDcimConsolePortsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimConsolePortsListRequest) IdRe(idRe []string) ApiDcimConsolePortsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimConsolePortsListRequest) Limit(limit int32) ApiDcimConsolePortsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsolePortsListRequest) Name(name []string) ApiDcimConsolePortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIc(nameIc []string) ApiDcimConsolePortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIe(nameIe []string) ApiDcimConsolePortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIew(nameIew []string) ApiDcimConsolePortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIre(nameIre []string) ApiDcimConsolePortsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimConsolePortsListRequest) NameIsw(nameIsw []string) ApiDcimConsolePortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsolePortsListRequest) NameN(nameN []string) ApiDcimConsolePortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNic(nameNic []string) ApiDcimConsolePortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNie(nameNie []string) ApiDcimConsolePortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNiew(nameNiew []string) ApiDcimConsolePortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNire(nameNire []string) ApiDcimConsolePortsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNisw(nameNisw []string) ApiDcimConsolePortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsolePortsListRequest) NameNre(nameNre []string) ApiDcimConsolePortsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimConsolePortsListRequest) NameRe(nameRe []string) ApiDcimConsolePortsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsolePortsListRequest) Offset(offset int32) ApiDcimConsolePortsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimConsolePortsListRequest) Q(q string) ApiDcimConsolePortsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimConsolePortsListRequest) Region(region []string) ApiDcimConsolePortsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimConsolePortsListRequest) RegionN(regionN []string) ApiDcimConsolePortsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimConsolePortsListRequest) RegionId(regionId []string) ApiDcimConsolePortsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimConsolePortsListRequest) RegionIdN(regionIdN []string) ApiDcimConsolePortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimConsolePortsListRequest) Site(site []string) ApiDcimConsolePortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimConsolePortsListRequest) SiteN(siteN []string) ApiDcimConsolePortsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimConsolePortsListRequest) SiteId(siteId []string) ApiDcimConsolePortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimConsolePortsListRequest) SiteIdN(siteIdN []string) ApiDcimConsolePortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimConsolePortsListRequest) Tag(tag []string) ApiDcimConsolePortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimConsolePortsListRequest) TagN(tagN []string) ApiDcimConsolePortsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimConsolePortsListRequest) Type_(type_ []string) ApiDcimConsolePortsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimConsolePortsListRequest) TypeN(typeN []string) ApiDcimConsolePortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsolePortsListRequest) Execute() (*PaginatedConsolePortList, *http.Response, error) {
	return r.ApiService.DcimConsolePortsListExecute(r)
}

/*
DcimConsolePortsList Method for DcimConsolePortsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsolePortsListRequest
*/
func (a *DcimApiService) DcimConsolePortsList(ctx context.Context) ApiDcimConsolePortsListRequest {
	return ApiDcimConsolePortsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConsolePortList
func (a *DcimApiService) DcimConsolePortsListExecute(r ApiDcimConsolePortsListRequest) (*PaginatedConsolePortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConsolePortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableConsolePort *PatchedWritableConsolePort
}

func (r ApiDcimConsolePortsPartialUpdateRequest) PatchedWritableConsolePort(patchedWritableConsolePort PatchedWritableConsolePort) ApiDcimConsolePortsPartialUpdateRequest {
	r.patchedWritableConsolePort = &patchedWritableConsolePort
	return r
}

func (r ApiDcimConsolePortsPartialUpdateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsPartialUpdateExecute(r)
}

/*
DcimConsolePortsPartialUpdate Method for DcimConsolePortsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port.
 @return ApiDcimConsolePortsPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortsPartialUpdate(ctx context.Context, id string) ApiDcimConsolePortsPartialUpdateRequest {
	return ApiDcimConsolePortsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsPartialUpdateExecute(r ApiDcimConsolePortsPartialUpdateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsolePort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsolePortsRetrieveRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsRetrieveExecute(r)
}

/*
DcimConsolePortsRetrieve Method for DcimConsolePortsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port.
 @return ApiDcimConsolePortsRetrieveRequest
*/
func (a *DcimApiService) DcimConsolePortsRetrieve(ctx context.Context, id string) ApiDcimConsolePortsRetrieveRequest {
	return ApiDcimConsolePortsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsRetrieveExecute(r ApiDcimConsolePortsRetrieveRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsolePortsTraceRetrieveRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsTraceRetrieveExecute(r)
}

/*
DcimConsolePortsTraceRetrieve Method for DcimConsolePortsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port.
 @return ApiDcimConsolePortsTraceRetrieveRequest
*/
func (a *DcimApiService) DcimConsolePortsTraceRetrieve(ctx context.Context, id string) ApiDcimConsolePortsTraceRetrieveRequest {
	return ApiDcimConsolePortsTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsTraceRetrieveExecute(r ApiDcimConsolePortsTraceRetrieveRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsolePortsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableConsolePort *WritableConsolePort
}

func (r ApiDcimConsolePortsUpdateRequest) WritableConsolePort(writableConsolePort WritableConsolePort) ApiDcimConsolePortsUpdateRequest {
	r.writableConsolePort = &writableConsolePort
	return r
}

func (r ApiDcimConsolePortsUpdateRequest) Execute() (*ConsolePort, *http.Response, error) {
	return r.ApiService.DcimConsolePortsUpdateExecute(r)
}

/*
DcimConsolePortsUpdate Method for DcimConsolePortsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console port.
 @return ApiDcimConsolePortsUpdateRequest
*/
func (a *DcimApiService) DcimConsolePortsUpdate(ctx context.Context, id string) ApiDcimConsolePortsUpdateRequest {
	return ApiDcimConsolePortsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsolePort
func (a *DcimApiService) DcimConsolePortsUpdateExecute(r ApiDcimConsolePortsUpdateRequest) (*ConsolePort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsolePort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsolePortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsolePort == nil {
		return localVarReturnValue, nil, reportError("writableConsolePort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsolePort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimConsoleServerPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesBulkDestroyExecute(r)
}

/*
DcimConsoleServerPortTemplatesBulkDestroy Method for DcimConsoleServerPortTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesBulkDestroy(ctx context.Context) ApiDcimConsoleServerPortTemplatesBulkDestroyRequest {
	return ApiDcimConsoleServerPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsoleServerPortTemplatesBulkDestroyExecute(r ApiDcimConsoleServerPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableConsoleServerPortTemplate *PatchedWritableConsoleServerPortTemplate
}

func (r ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest) PatchedWritableConsoleServerPortTemplate(patchedWritableConsoleServerPortTemplate PatchedWritableConsoleServerPortTemplate) ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest {
	r.patchedWritableConsoleServerPortTemplate = &patchedWritableConsoleServerPortTemplate
	return r
}

func (r ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesBulkPartialUpdate Method for DcimConsoleServerPortTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleServerPortTemplate
func (a *DcimApiService) DcimConsoleServerPortTemplatesBulkPartialUpdateExecute(r ApiDcimConsoleServerPortTemplatesBulkPartialUpdateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsoleServerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsoleServerPortTemplate *WritableConsoleServerPortTemplate
}

func (r ApiDcimConsoleServerPortTemplatesBulkUpdateRequest) WritableConsoleServerPortTemplate(writableConsoleServerPortTemplate WritableConsoleServerPortTemplate) ApiDcimConsoleServerPortTemplatesBulkUpdateRequest {
	r.writableConsoleServerPortTemplate = &writableConsoleServerPortTemplate
	return r
}

func (r ApiDcimConsoleServerPortTemplatesBulkUpdateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesBulkUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesBulkUpdate Method for DcimConsoleServerPortTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesBulkUpdate(ctx context.Context) ApiDcimConsoleServerPortTemplatesBulkUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleServerPortTemplate
func (a *DcimApiService) DcimConsoleServerPortTemplatesBulkUpdateExecute(r ApiDcimConsoleServerPortTemplatesBulkUpdateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsoleServerPortTemplate *WritableConsoleServerPortTemplate
}

func (r ApiDcimConsoleServerPortTemplatesCreateRequest) WritableConsoleServerPortTemplate(writableConsoleServerPortTemplate WritableConsoleServerPortTemplate) ApiDcimConsoleServerPortTemplatesCreateRequest {
	r.writableConsoleServerPortTemplate = &writableConsoleServerPortTemplate
	return r
}

func (r ApiDcimConsoleServerPortTemplatesCreateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesCreateExecute(r)
}

/*
DcimConsoleServerPortTemplatesCreate Method for DcimConsoleServerPortTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortTemplatesCreateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesCreate(ctx context.Context) ApiDcimConsoleServerPortTemplatesCreateRequest {
	return ApiDcimConsoleServerPortTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleServerPortTemplate
func (a *DcimApiService) DcimConsoleServerPortTemplatesCreateExecute(r ApiDcimConsoleServerPortTemplatesCreateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsoleServerPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesDestroyExecute(r)
}

/*
DcimConsoleServerPortTemplatesDestroy Method for DcimConsoleServerPortTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port template.
 @return ApiDcimConsoleServerPortTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesDestroy(ctx context.Context, id string) ApiDcimConsoleServerPortTemplatesDestroyRequest {
	return ApiDcimConsoleServerPortTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsoleServerPortTemplatesDestroyExecute(r ApiDcimConsoleServerPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	type_ *string
	typeN *string
}

// Device type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimConsoleServerPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Id(id []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdIc(idIc []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdIe(idIe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdIew(idIew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdIre(idIre []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdIsw(idIsw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdN(idN []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdNic(idNic []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdNie(idNie []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdNiew(idNiew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdNire(idNire []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdNisw(idNisw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdNre(idNre []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) IdRe(idRe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimConsoleServerPortTemplatesListRequest) Limit(limit int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Name(name []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIre(nameIre []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameN(nameN []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNire(nameNire []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameNre(nameNre []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) NameRe(nameRe []string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsoleServerPortTemplatesListRequest) Offset(offset int32) ApiDcimConsoleServerPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimConsoleServerPortTemplatesListRequest) Q(q string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Type_(type_ string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) TypeN(typeN string) ApiDcimConsoleServerPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsoleServerPortTemplatesListRequest) Execute() (*PaginatedConsoleServerPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesListExecute(r)
}

/*
DcimConsoleServerPortTemplatesList Method for DcimConsoleServerPortTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortTemplatesListRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesList(ctx context.Context) ApiDcimConsoleServerPortTemplatesListRequest {
	return ApiDcimConsoleServerPortTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConsoleServerPortTemplateList
func (a *DcimApiService) DcimConsoleServerPortTemplatesListExecute(r ApiDcimConsoleServerPortTemplatesListRequest) (*PaginatedConsoleServerPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConsoleServerPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableConsoleServerPortTemplate *PatchedWritableConsoleServerPortTemplate
}

func (r ApiDcimConsoleServerPortTemplatesPartialUpdateRequest) PatchedWritableConsoleServerPortTemplate(patchedWritableConsoleServerPortTemplate PatchedWritableConsoleServerPortTemplate) ApiDcimConsoleServerPortTemplatesPartialUpdateRequest {
	r.patchedWritableConsoleServerPortTemplate = &patchedWritableConsoleServerPortTemplate
	return r
}

func (r ApiDcimConsoleServerPortTemplatesPartialUpdateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesPartialUpdate Method for DcimConsoleServerPortTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port template.
 @return ApiDcimConsoleServerPortTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimConsoleServerPortTemplatesPartialUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPortTemplate
func (a *DcimApiService) DcimConsoleServerPortTemplatesPartialUpdateExecute(r ApiDcimConsoleServerPortTemplatesPartialUpdateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsoleServerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsoleServerPortTemplatesRetrieveRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesRetrieveExecute(r)
}

/*
DcimConsoleServerPortTemplatesRetrieve Method for DcimConsoleServerPortTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port template.
 @return ApiDcimConsoleServerPortTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesRetrieve(ctx context.Context, id string) ApiDcimConsoleServerPortTemplatesRetrieveRequest {
	return ApiDcimConsoleServerPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPortTemplate
func (a *DcimApiService) DcimConsoleServerPortTemplatesRetrieveExecute(r ApiDcimConsoleServerPortTemplatesRetrieveRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableConsoleServerPortTemplate *WritableConsoleServerPortTemplate
}

func (r ApiDcimConsoleServerPortTemplatesUpdateRequest) WritableConsoleServerPortTemplate(writableConsoleServerPortTemplate WritableConsoleServerPortTemplate) ApiDcimConsoleServerPortTemplatesUpdateRequest {
	r.writableConsoleServerPortTemplate = &writableConsoleServerPortTemplate
	return r
}

func (r ApiDcimConsoleServerPortTemplatesUpdateRequest) Execute() (*ConsoleServerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortTemplatesUpdateExecute(r)
}

/*
DcimConsoleServerPortTemplatesUpdate Method for DcimConsoleServerPortTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port template.
 @return ApiDcimConsoleServerPortTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortTemplatesUpdate(ctx context.Context, id string) ApiDcimConsoleServerPortTemplatesUpdateRequest {
	return ApiDcimConsoleServerPortTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPortTemplate
func (a *DcimApiService) DcimConsoleServerPortTemplatesUpdateExecute(r ApiDcimConsoleServerPortTemplatesUpdateRequest) (*ConsoleServerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimConsoleServerPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsBulkDestroyExecute(r)
}

/*
DcimConsoleServerPortsBulkDestroy Method for DcimConsoleServerPortsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortsBulkDestroyRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsBulkDestroy(ctx context.Context) ApiDcimConsoleServerPortsBulkDestroyRequest {
	return ApiDcimConsoleServerPortsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsoleServerPortsBulkDestroyExecute(r ApiDcimConsoleServerPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableConsoleServerPort *PatchedWritableConsoleServerPort
}

func (r ApiDcimConsoleServerPortsBulkPartialUpdateRequest) PatchedWritableConsoleServerPort(patchedWritableConsoleServerPort PatchedWritableConsoleServerPort) ApiDcimConsoleServerPortsBulkPartialUpdateRequest {
	r.patchedWritableConsoleServerPort = &patchedWritableConsoleServerPort
	return r
}

func (r ApiDcimConsoleServerPortsBulkPartialUpdateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsBulkPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortsBulkPartialUpdate Method for DcimConsoleServerPortsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsBulkPartialUpdate(ctx context.Context) ApiDcimConsoleServerPortsBulkPartialUpdateRequest {
	return ApiDcimConsoleServerPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsBulkPartialUpdateExecute(r ApiDcimConsoleServerPortsBulkPartialUpdateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsoleServerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsoleServerPort *WritableConsoleServerPort
}

func (r ApiDcimConsoleServerPortsBulkUpdateRequest) WritableConsoleServerPort(writableConsoleServerPort WritableConsoleServerPort) ApiDcimConsoleServerPortsBulkUpdateRequest {
	r.writableConsoleServerPort = &writableConsoleServerPort
	return r
}

func (r ApiDcimConsoleServerPortsBulkUpdateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsBulkUpdateExecute(r)
}

/*
DcimConsoleServerPortsBulkUpdate Method for DcimConsoleServerPortsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortsBulkUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsBulkUpdate(ctx context.Context) ApiDcimConsoleServerPortsBulkUpdateRequest {
	return ApiDcimConsoleServerPortsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsBulkUpdateExecute(r ApiDcimConsoleServerPortsBulkUpdateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPort == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableConsoleServerPort *WritableConsoleServerPort
}

func (r ApiDcimConsoleServerPortsCreateRequest) WritableConsoleServerPort(writableConsoleServerPort WritableConsoleServerPort) ApiDcimConsoleServerPortsCreateRequest {
	r.writableConsoleServerPort = &writableConsoleServerPort
	return r
}

func (r ApiDcimConsoleServerPortsCreateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsCreateExecute(r)
}

/*
DcimConsoleServerPortsCreate Method for DcimConsoleServerPortsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortsCreateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsCreate(ctx context.Context) ApiDcimConsoleServerPortsCreateRequest {
	return ApiDcimConsoleServerPortsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsCreateExecute(r ApiDcimConsoleServerPortsCreateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPort == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsoleServerPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsDestroyExecute(r)
}

/*
DcimConsoleServerPortsDestroy Method for DcimConsoleServerPortsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port.
 @return ApiDcimConsoleServerPortsDestroyRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsDestroy(ctx context.Context, id string) ApiDcimConsoleServerPortsDestroyRequest {
	return ApiDcimConsoleServerPortsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimConsoleServerPortsDestroyExecute(r ApiDcimConsoleServerPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	cabled *bool
	connected *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *[]string
	typeN *[]string
}

func (r ApiDcimConsoleServerPortsListRequest) Cabled(cabled bool) ApiDcimConsoleServerPortsListRequest {
	r.cabled = &cabled
	return r
}

// Connected status (bool)
func (r ApiDcimConsoleServerPortsListRequest) Connected(connected bool) ApiDcimConsoleServerPortsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Description(description []string) ApiDcimConsoleServerPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIre(descriptionIre []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionN(descriptionN []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNire(descriptionNire []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionNre(descriptionNre []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) DescriptionRe(descriptionRe []string) ApiDcimConsoleServerPortsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimConsoleServerPortsListRequest) Device(device []*string) ApiDcimConsoleServerPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimConsoleServerPortsListRequest) DeviceN(deviceN []*string) ApiDcimConsoleServerPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceId(deviceId []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimConsoleServerPortsListRequest) DeviceIdN(deviceIdN []string) ApiDcimConsoleServerPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Id(id []string) ApiDcimConsoleServerPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdIc(idIc []string) ApiDcimConsoleServerPortsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdIe(idIe []string) ApiDcimConsoleServerPortsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdIew(idIew []string) ApiDcimConsoleServerPortsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdIre(idIre []string) ApiDcimConsoleServerPortsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdIsw(idIsw []string) ApiDcimConsoleServerPortsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdN(idN []string) ApiDcimConsoleServerPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdNic(idNic []string) ApiDcimConsoleServerPortsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdNie(idNie []string) ApiDcimConsoleServerPortsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdNiew(idNiew []string) ApiDcimConsoleServerPortsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdNire(idNire []string) ApiDcimConsoleServerPortsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdNisw(idNisw []string) ApiDcimConsoleServerPortsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdNre(idNre []string) ApiDcimConsoleServerPortsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) IdRe(idRe []string) ApiDcimConsoleServerPortsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimConsoleServerPortsListRequest) Limit(limit int32) ApiDcimConsoleServerPortsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Name(name []string) ApiDcimConsoleServerPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIc(nameIc []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIe(nameIe []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIew(nameIew []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIre(nameIre []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameIsw(nameIsw []string) ApiDcimConsoleServerPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameN(nameN []string) ApiDcimConsoleServerPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNic(nameNic []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNie(nameNie []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNiew(nameNiew []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNire(nameNire []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNisw(nameNisw []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameNre(nameNre []string) ApiDcimConsoleServerPortsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) NameRe(nameRe []string) ApiDcimConsoleServerPortsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimConsoleServerPortsListRequest) Offset(offset int32) ApiDcimConsoleServerPortsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimConsoleServerPortsListRequest) Q(q string) ApiDcimConsoleServerPortsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimConsoleServerPortsListRequest) Region(region []string) ApiDcimConsoleServerPortsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimConsoleServerPortsListRequest) RegionN(regionN []string) ApiDcimConsoleServerPortsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimConsoleServerPortsListRequest) RegionId(regionId []string) ApiDcimConsoleServerPortsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimConsoleServerPortsListRequest) RegionIdN(regionIdN []string) ApiDcimConsoleServerPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimConsoleServerPortsListRequest) Site(site []string) ApiDcimConsoleServerPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimConsoleServerPortsListRequest) SiteN(siteN []string) ApiDcimConsoleServerPortsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimConsoleServerPortsListRequest) SiteId(siteId []string) ApiDcimConsoleServerPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimConsoleServerPortsListRequest) SiteIdN(siteIdN []string) ApiDcimConsoleServerPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Tag(tag []string) ApiDcimConsoleServerPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) TagN(tagN []string) ApiDcimConsoleServerPortsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimConsoleServerPortsListRequest) Type_(type_ []string) ApiDcimConsoleServerPortsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimConsoleServerPortsListRequest) TypeN(typeN []string) ApiDcimConsoleServerPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimConsoleServerPortsListRequest) Execute() (*PaginatedConsoleServerPortList, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsListExecute(r)
}

/*
DcimConsoleServerPortsList Method for DcimConsoleServerPortsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimConsoleServerPortsListRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsList(ctx context.Context) ApiDcimConsoleServerPortsListRequest {
	return ApiDcimConsoleServerPortsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedConsoleServerPortList
func (a *DcimApiService) DcimConsoleServerPortsListExecute(r ApiDcimConsoleServerPortsListRequest) (*PaginatedConsoleServerPortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedConsoleServerPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableConsoleServerPort *PatchedWritableConsoleServerPort
}

func (r ApiDcimConsoleServerPortsPartialUpdateRequest) PatchedWritableConsoleServerPort(patchedWritableConsoleServerPort PatchedWritableConsoleServerPort) ApiDcimConsoleServerPortsPartialUpdateRequest {
	r.patchedWritableConsoleServerPort = &patchedWritableConsoleServerPort
	return r
}

func (r ApiDcimConsoleServerPortsPartialUpdateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsPartialUpdateExecute(r)
}

/*
DcimConsoleServerPortsPartialUpdate Method for DcimConsoleServerPortsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port.
 @return ApiDcimConsoleServerPortsPartialUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsPartialUpdate(ctx context.Context, id string) ApiDcimConsoleServerPortsPartialUpdateRequest {
	return ApiDcimConsoleServerPortsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsPartialUpdateExecute(r ApiDcimConsoleServerPortsPartialUpdateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableConsoleServerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsoleServerPortsRetrieveRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsRetrieveExecute(r)
}

/*
DcimConsoleServerPortsRetrieve Method for DcimConsoleServerPortsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port.
 @return ApiDcimConsoleServerPortsRetrieveRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsRetrieve(ctx context.Context, id string) ApiDcimConsoleServerPortsRetrieveRequest {
	return ApiDcimConsoleServerPortsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsRetrieveExecute(r ApiDcimConsoleServerPortsRetrieveRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimConsoleServerPortsTraceRetrieveRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsTraceRetrieveExecute(r)
}

/*
DcimConsoleServerPortsTraceRetrieve Method for DcimConsoleServerPortsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port.
 @return ApiDcimConsoleServerPortsTraceRetrieveRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsTraceRetrieve(ctx context.Context, id string) ApiDcimConsoleServerPortsTraceRetrieveRequest {
	return ApiDcimConsoleServerPortsTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsTraceRetrieveExecute(r ApiDcimConsoleServerPortsTraceRetrieveRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimConsoleServerPortsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableConsoleServerPort *WritableConsoleServerPort
}

func (r ApiDcimConsoleServerPortsUpdateRequest) WritableConsoleServerPort(writableConsoleServerPort WritableConsoleServerPort) ApiDcimConsoleServerPortsUpdateRequest {
	r.writableConsoleServerPort = &writableConsoleServerPort
	return r
}

func (r ApiDcimConsoleServerPortsUpdateRequest) Execute() (*ConsoleServerPort, *http.Response, error) {
	return r.ApiService.DcimConsoleServerPortsUpdateExecute(r)
}

/*
DcimConsoleServerPortsUpdate Method for DcimConsoleServerPortsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this console server port.
 @return ApiDcimConsoleServerPortsUpdateRequest
*/
func (a *DcimApiService) DcimConsoleServerPortsUpdate(ctx context.Context, id string) ApiDcimConsoleServerPortsUpdateRequest {
	return ApiDcimConsoleServerPortsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ConsoleServerPort
func (a *DcimApiService) DcimConsoleServerPortsUpdateExecute(r ApiDcimConsoleServerPortsUpdateRequest) (*ConsoleServerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConsoleServerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimConsoleServerPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/console-server-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableConsoleServerPort == nil {
		return localVarReturnValue, nil, reportError("writableConsoleServerPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableConsoleServerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimDeviceBayTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesBulkDestroyExecute(r)
}

/*
DcimDeviceBayTemplatesBulkDestroy Method for DcimDeviceBayTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBayTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesBulkDestroy(ctx context.Context) ApiDcimDeviceBayTemplatesBulkDestroyRequest {
	return ApiDcimDeviceBayTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceBayTemplatesBulkDestroyExecute(r ApiDcimDeviceBayTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableDeviceBayTemplate *PatchedWritableDeviceBayTemplate
}

func (r ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest) PatchedWritableDeviceBayTemplate(patchedWritableDeviceBayTemplate PatchedWritableDeviceBayTemplate) ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest {
	r.patchedWritableDeviceBayTemplate = &patchedWritableDeviceBayTemplate
	return r
}

func (r ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesBulkPartialUpdate Method for DcimDeviceBayTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest {
	return ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceBayTemplate
func (a *DcimApiService) DcimDeviceBayTemplatesBulkPartialUpdateExecute(r ApiDcimDeviceBayTemplatesBulkPartialUpdateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceBayTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceBayTemplate *WritableDeviceBayTemplate
}

func (r ApiDcimDeviceBayTemplatesBulkUpdateRequest) WritableDeviceBayTemplate(writableDeviceBayTemplate WritableDeviceBayTemplate) ApiDcimDeviceBayTemplatesBulkUpdateRequest {
	r.writableDeviceBayTemplate = &writableDeviceBayTemplate
	return r
}

func (r ApiDcimDeviceBayTemplatesBulkUpdateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesBulkUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesBulkUpdate Method for DcimDeviceBayTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBayTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesBulkUpdate(ctx context.Context) ApiDcimDeviceBayTemplatesBulkUpdateRequest {
	return ApiDcimDeviceBayTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceBayTemplate
func (a *DcimApiService) DcimDeviceBayTemplatesBulkUpdateExecute(r ApiDcimDeviceBayTemplatesBulkUpdateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceBayTemplate == nil {
		return localVarReturnValue, nil, reportError("writableDeviceBayTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceBayTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceBayTemplate *WritableDeviceBayTemplate
}

func (r ApiDcimDeviceBayTemplatesCreateRequest) WritableDeviceBayTemplate(writableDeviceBayTemplate WritableDeviceBayTemplate) ApiDcimDeviceBayTemplatesCreateRequest {
	r.writableDeviceBayTemplate = &writableDeviceBayTemplate
	return r
}

func (r ApiDcimDeviceBayTemplatesCreateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesCreateExecute(r)
}

/*
DcimDeviceBayTemplatesCreate Method for DcimDeviceBayTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBayTemplatesCreateRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesCreate(ctx context.Context) ApiDcimDeviceBayTemplatesCreateRequest {
	return ApiDcimDeviceBayTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceBayTemplate
func (a *DcimApiService) DcimDeviceBayTemplatesCreateExecute(r ApiDcimDeviceBayTemplatesCreateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceBayTemplate == nil {
		return localVarReturnValue, nil, reportError("writableDeviceBayTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceBayTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceBayTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesDestroyExecute(r)
}

/*
DcimDeviceBayTemplatesDestroy Method for DcimDeviceBayTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay template.
 @return ApiDcimDeviceBayTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesDestroy(ctx context.Context, id string) ApiDcimDeviceBayTemplatesDestroyRequest {
	return ApiDcimDeviceBayTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceBayTemplatesDestroyExecute(r ApiDcimDeviceBayTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
}

// Device type (ID)
func (r ApiDcimDeviceBayTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimDeviceBayTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimDeviceBayTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimDeviceBayTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Id(id []string) ApiDcimDeviceBayTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdIc(idIc []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdIe(idIe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdIew(idIew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdIre(idIre []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdIsw(idIsw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdN(idN []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdNic(idNic []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdNie(idNie []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdNiew(idNiew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdNire(idNire []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdNisw(idNisw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdNre(idNre []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) IdRe(idRe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceBayTemplatesListRequest) Limit(limit int32) ApiDcimDeviceBayTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Name(name []string) ApiDcimDeviceBayTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIc(nameIc []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIe(nameIe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIew(nameIew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIre(nameIre []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameN(nameN []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNic(nameNic []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNie(nameNie []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNire(nameNire []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameNre(nameNre []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) NameRe(nameRe []string) ApiDcimDeviceBayTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceBayTemplatesListRequest) Offset(offset int32) ApiDcimDeviceBayTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimDeviceBayTemplatesListRequest) Q(q string) ApiDcimDeviceBayTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimDeviceBayTemplatesListRequest) Execute() (*PaginatedDeviceBayTemplateList, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesListExecute(r)
}

/*
DcimDeviceBayTemplatesList Method for DcimDeviceBayTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBayTemplatesListRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesList(ctx context.Context) ApiDcimDeviceBayTemplatesListRequest {
	return ApiDcimDeviceBayTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDeviceBayTemplateList
func (a *DcimApiService) DcimDeviceBayTemplatesListExecute(r ApiDcimDeviceBayTemplatesListRequest) (*PaginatedDeviceBayTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeviceBayTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableDeviceBayTemplate *PatchedWritableDeviceBayTemplate
}

func (r ApiDcimDeviceBayTemplatesPartialUpdateRequest) PatchedWritableDeviceBayTemplate(patchedWritableDeviceBayTemplate PatchedWritableDeviceBayTemplate) ApiDcimDeviceBayTemplatesPartialUpdateRequest {
	r.patchedWritableDeviceBayTemplate = &patchedWritableDeviceBayTemplate
	return r
}

func (r ApiDcimDeviceBayTemplatesPartialUpdateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesPartialUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesPartialUpdate Method for DcimDeviceBayTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay template.
 @return ApiDcimDeviceBayTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimDeviceBayTemplatesPartialUpdateRequest {
	return ApiDcimDeviceBayTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceBayTemplate
func (a *DcimApiService) DcimDeviceBayTemplatesPartialUpdateExecute(r ApiDcimDeviceBayTemplatesPartialUpdateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceBayTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceBayTemplatesRetrieveRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesRetrieveExecute(r)
}

/*
DcimDeviceBayTemplatesRetrieve Method for DcimDeviceBayTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay template.
 @return ApiDcimDeviceBayTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesRetrieve(ctx context.Context, id string) ApiDcimDeviceBayTemplatesRetrieveRequest {
	return ApiDcimDeviceBayTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceBayTemplate
func (a *DcimApiService) DcimDeviceBayTemplatesRetrieveExecute(r ApiDcimDeviceBayTemplatesRetrieveRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBayTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableDeviceBayTemplate *WritableDeviceBayTemplate
}

func (r ApiDcimDeviceBayTemplatesUpdateRequest) WritableDeviceBayTemplate(writableDeviceBayTemplate WritableDeviceBayTemplate) ApiDcimDeviceBayTemplatesUpdateRequest {
	r.writableDeviceBayTemplate = &writableDeviceBayTemplate
	return r
}

func (r ApiDcimDeviceBayTemplatesUpdateRequest) Execute() (*DeviceBayTemplate, *http.Response, error) {
	return r.ApiService.DcimDeviceBayTemplatesUpdateExecute(r)
}

/*
DcimDeviceBayTemplatesUpdate Method for DcimDeviceBayTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay template.
 @return ApiDcimDeviceBayTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBayTemplatesUpdate(ctx context.Context, id string) ApiDcimDeviceBayTemplatesUpdateRequest {
	return ApiDcimDeviceBayTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceBayTemplate
func (a *DcimApiService) DcimDeviceBayTemplatesUpdateExecute(r ApiDcimDeviceBayTemplatesUpdateRequest) (*DeviceBayTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBayTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBayTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bay-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceBayTemplate == nil {
		return localVarReturnValue, nil, reportError("writableDeviceBayTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceBayTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimDeviceBaysBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBaysBulkDestroyExecute(r)
}

/*
DcimDeviceBaysBulkDestroy Method for DcimDeviceBaysBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBaysBulkDestroyRequest
*/
func (a *DcimApiService) DcimDeviceBaysBulkDestroy(ctx context.Context) ApiDcimDeviceBaysBulkDestroyRequest {
	return ApiDcimDeviceBaysBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceBaysBulkDestroyExecute(r ApiDcimDeviceBaysBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableDeviceBay *PatchedWritableDeviceBay
}

func (r ApiDcimDeviceBaysBulkPartialUpdateRequest) PatchedWritableDeviceBay(patchedWritableDeviceBay PatchedWritableDeviceBay) ApiDcimDeviceBaysBulkPartialUpdateRequest {
	r.patchedWritableDeviceBay = &patchedWritableDeviceBay
	return r
}

func (r ApiDcimDeviceBaysBulkPartialUpdateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysBulkPartialUpdateExecute(r)
}

/*
DcimDeviceBaysBulkPartialUpdate Method for DcimDeviceBaysBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBaysBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBaysBulkPartialUpdate(ctx context.Context) ApiDcimDeviceBaysBulkPartialUpdateRequest {
	return ApiDcimDeviceBaysBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceBay
func (a *DcimApiService) DcimDeviceBaysBulkPartialUpdateExecute(r ApiDcimDeviceBaysBulkPartialUpdateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceBay
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceBay *WritableDeviceBay
}

func (r ApiDcimDeviceBaysBulkUpdateRequest) WritableDeviceBay(writableDeviceBay WritableDeviceBay) ApiDcimDeviceBaysBulkUpdateRequest {
	r.writableDeviceBay = &writableDeviceBay
	return r
}

func (r ApiDcimDeviceBaysBulkUpdateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysBulkUpdateExecute(r)
}

/*
DcimDeviceBaysBulkUpdate Method for DcimDeviceBaysBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBaysBulkUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBaysBulkUpdate(ctx context.Context) ApiDcimDeviceBaysBulkUpdateRequest {
	return ApiDcimDeviceBaysBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceBay
func (a *DcimApiService) DcimDeviceBaysBulkUpdateExecute(r ApiDcimDeviceBaysBulkUpdateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceBay == nil {
		return localVarReturnValue, nil, reportError("writableDeviceBay is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceBay
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceBay *WritableDeviceBay
}

func (r ApiDcimDeviceBaysCreateRequest) WritableDeviceBay(writableDeviceBay WritableDeviceBay) ApiDcimDeviceBaysCreateRequest {
	r.writableDeviceBay = &writableDeviceBay
	return r
}

func (r ApiDcimDeviceBaysCreateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysCreateExecute(r)
}

/*
DcimDeviceBaysCreate Method for DcimDeviceBaysCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBaysCreateRequest
*/
func (a *DcimApiService) DcimDeviceBaysCreate(ctx context.Context) ApiDcimDeviceBaysCreateRequest {
	return ApiDcimDeviceBaysCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceBay
func (a *DcimApiService) DcimDeviceBaysCreateExecute(r ApiDcimDeviceBaysCreateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceBay == nil {
		return localVarReturnValue, nil, reportError("writableDeviceBay is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceBay
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceBaysDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceBaysDestroyExecute(r)
}

/*
DcimDeviceBaysDestroy Method for DcimDeviceBaysDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay.
 @return ApiDcimDeviceBaysDestroyRequest
*/
func (a *DcimApiService) DcimDeviceBaysDestroy(ctx context.Context, id string) ApiDcimDeviceBaysDestroyRequest {
	return ApiDcimDeviceBaysDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceBaysDestroyExecute(r ApiDcimDeviceBaysDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
}

func (r ApiDcimDeviceBaysListRequest) Description(description []string) ApiDcimDeviceBaysListRequest {
	r.description = &description
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIc(descriptionIc []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIe(descriptionIe []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIew(descriptionIew []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIre(descriptionIre []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimDeviceBaysListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionN(descriptionN []string) ApiDcimDeviceBaysListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNic(descriptionNic []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNie(descriptionNie []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNire(descriptionNire []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionNre(descriptionNre []string) ApiDcimDeviceBaysListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimDeviceBaysListRequest) DescriptionRe(descriptionRe []string) ApiDcimDeviceBaysListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimDeviceBaysListRequest) Device(device []*string) ApiDcimDeviceBaysListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimDeviceBaysListRequest) DeviceN(deviceN []*string) ApiDcimDeviceBaysListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceId(deviceId []string) ApiDcimDeviceBaysListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimDeviceBaysListRequest) DeviceIdN(deviceIdN []string) ApiDcimDeviceBaysListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Id(id []string) ApiDcimDeviceBaysListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdIc(idIc []string) ApiDcimDeviceBaysListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdIe(idIe []string) ApiDcimDeviceBaysListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdIew(idIew []string) ApiDcimDeviceBaysListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdIre(idIre []string) ApiDcimDeviceBaysListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdIsw(idIsw []string) ApiDcimDeviceBaysListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdN(idN []string) ApiDcimDeviceBaysListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdNic(idNic []string) ApiDcimDeviceBaysListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdNie(idNie []string) ApiDcimDeviceBaysListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdNiew(idNiew []string) ApiDcimDeviceBaysListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdNire(idNire []string) ApiDcimDeviceBaysListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdNisw(idNisw []string) ApiDcimDeviceBaysListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdNre(idNre []string) ApiDcimDeviceBaysListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimDeviceBaysListRequest) IdRe(idRe []string) ApiDcimDeviceBaysListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceBaysListRequest) Limit(limit int32) ApiDcimDeviceBaysListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimDeviceBaysListRequest) Name(name []string) ApiDcimDeviceBaysListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIc(nameIc []string) ApiDcimDeviceBaysListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIe(nameIe []string) ApiDcimDeviceBaysListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIew(nameIew []string) ApiDcimDeviceBaysListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIre(nameIre []string) ApiDcimDeviceBaysListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameIsw(nameIsw []string) ApiDcimDeviceBaysListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameN(nameN []string) ApiDcimDeviceBaysListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNic(nameNic []string) ApiDcimDeviceBaysListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNie(nameNie []string) ApiDcimDeviceBaysListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNiew(nameNiew []string) ApiDcimDeviceBaysListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNire(nameNire []string) ApiDcimDeviceBaysListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNisw(nameNisw []string) ApiDcimDeviceBaysListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameNre(nameNre []string) ApiDcimDeviceBaysListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimDeviceBaysListRequest) NameRe(nameRe []string) ApiDcimDeviceBaysListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceBaysListRequest) Offset(offset int32) ApiDcimDeviceBaysListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimDeviceBaysListRequest) Q(q string) ApiDcimDeviceBaysListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimDeviceBaysListRequest) Region(region []string) ApiDcimDeviceBaysListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimDeviceBaysListRequest) RegionN(regionN []string) ApiDcimDeviceBaysListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimDeviceBaysListRequest) RegionId(regionId []string) ApiDcimDeviceBaysListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimDeviceBaysListRequest) RegionIdN(regionIdN []string) ApiDcimDeviceBaysListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimDeviceBaysListRequest) Site(site []string) ApiDcimDeviceBaysListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimDeviceBaysListRequest) SiteN(siteN []string) ApiDcimDeviceBaysListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimDeviceBaysListRequest) SiteId(siteId []string) ApiDcimDeviceBaysListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimDeviceBaysListRequest) SiteIdN(siteIdN []string) ApiDcimDeviceBaysListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Tag(tag []string) ApiDcimDeviceBaysListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDeviceBaysListRequest) TagN(tagN []string) ApiDcimDeviceBaysListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimDeviceBaysListRequest) Execute() (*PaginatedDeviceBayList, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysListExecute(r)
}

/*
DcimDeviceBaysList Method for DcimDeviceBaysList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceBaysListRequest
*/
func (a *DcimApiService) DcimDeviceBaysList(ctx context.Context) ApiDcimDeviceBaysListRequest {
	return ApiDcimDeviceBaysListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDeviceBayList
func (a *DcimApiService) DcimDeviceBaysListExecute(r ApiDcimDeviceBaysListRequest) (*PaginatedDeviceBayList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeviceBayList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableDeviceBay *PatchedWritableDeviceBay
}

func (r ApiDcimDeviceBaysPartialUpdateRequest) PatchedWritableDeviceBay(patchedWritableDeviceBay PatchedWritableDeviceBay) ApiDcimDeviceBaysPartialUpdateRequest {
	r.patchedWritableDeviceBay = &patchedWritableDeviceBay
	return r
}

func (r ApiDcimDeviceBaysPartialUpdateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysPartialUpdateExecute(r)
}

/*
DcimDeviceBaysPartialUpdate Method for DcimDeviceBaysPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay.
 @return ApiDcimDeviceBaysPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBaysPartialUpdate(ctx context.Context, id string) ApiDcimDeviceBaysPartialUpdateRequest {
	return ApiDcimDeviceBaysPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceBay
func (a *DcimApiService) DcimDeviceBaysPartialUpdateExecute(r ApiDcimDeviceBaysPartialUpdateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceBay
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceBaysRetrieveRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysRetrieveExecute(r)
}

/*
DcimDeviceBaysRetrieve Method for DcimDeviceBaysRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay.
 @return ApiDcimDeviceBaysRetrieveRequest
*/
func (a *DcimApiService) DcimDeviceBaysRetrieve(ctx context.Context, id string) ApiDcimDeviceBaysRetrieveRequest {
	return ApiDcimDeviceBaysRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceBay
func (a *DcimApiService) DcimDeviceBaysRetrieveExecute(r ApiDcimDeviceBaysRetrieveRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceBaysUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableDeviceBay *WritableDeviceBay
}

func (r ApiDcimDeviceBaysUpdateRequest) WritableDeviceBay(writableDeviceBay WritableDeviceBay) ApiDcimDeviceBaysUpdateRequest {
	r.writableDeviceBay = &writableDeviceBay
	return r
}

func (r ApiDcimDeviceBaysUpdateRequest) Execute() (*DeviceBay, *http.Response, error) {
	return r.ApiService.DcimDeviceBaysUpdateExecute(r)
}

/*
DcimDeviceBaysUpdate Method for DcimDeviceBaysUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device bay.
 @return ApiDcimDeviceBaysUpdateRequest
*/
func (a *DcimApiService) DcimDeviceBaysUpdate(ctx context.Context, id string) ApiDcimDeviceBaysUpdateRequest {
	return ApiDcimDeviceBaysUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceBay
func (a *DcimApiService) DcimDeviceBaysUpdateExecute(r ApiDcimDeviceBaysUpdateRequest) (*DeviceBay, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceBay
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceBaysUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-bays/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceBay == nil {
		return localVarReturnValue, nil, reportError("writableDeviceBay is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceBay
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimDeviceRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceRolesBulkDestroyExecute(r)
}

/*
DcimDeviceRolesBulkDestroy Method for DcimDeviceRolesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceRolesBulkDestroyRequest
*/
func (a *DcimApiService) DcimDeviceRolesBulkDestroy(ctx context.Context) ApiDcimDeviceRolesBulkDestroyRequest {
	return ApiDcimDeviceRolesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceRolesBulkDestroyExecute(r ApiDcimDeviceRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedDeviceRole *PatchedDeviceRole
}

func (r ApiDcimDeviceRolesBulkPartialUpdateRequest) PatchedDeviceRole(patchedDeviceRole PatchedDeviceRole) ApiDcimDeviceRolesBulkPartialUpdateRequest {
	r.patchedDeviceRole = &patchedDeviceRole
	return r
}

func (r ApiDcimDeviceRolesBulkPartialUpdateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesBulkPartialUpdateExecute(r)
}

/*
DcimDeviceRolesBulkPartialUpdate Method for DcimDeviceRolesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceRolesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceRolesBulkPartialUpdate(ctx context.Context) ApiDcimDeviceRolesBulkPartialUpdateRequest {
	return ApiDcimDeviceRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceRole
func (a *DcimApiService) DcimDeviceRolesBulkPartialUpdateExecute(r ApiDcimDeviceRolesBulkPartialUpdateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDeviceRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	deviceRole *DeviceRole
}

func (r ApiDcimDeviceRolesBulkUpdateRequest) DeviceRole(deviceRole DeviceRole) ApiDcimDeviceRolesBulkUpdateRequest {
	r.deviceRole = &deviceRole
	return r
}

func (r ApiDcimDeviceRolesBulkUpdateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesBulkUpdateExecute(r)
}

/*
DcimDeviceRolesBulkUpdate Method for DcimDeviceRolesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceRolesBulkUpdateRequest
*/
func (a *DcimApiService) DcimDeviceRolesBulkUpdate(ctx context.Context) ApiDcimDeviceRolesBulkUpdateRequest {
	return ApiDcimDeviceRolesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceRole
func (a *DcimApiService) DcimDeviceRolesBulkUpdateExecute(r ApiDcimDeviceRolesBulkUpdateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRole == nil {
		return localVarReturnValue, nil, reportError("deviceRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	deviceRole *DeviceRole
}

func (r ApiDcimDeviceRolesCreateRequest) DeviceRole(deviceRole DeviceRole) ApiDcimDeviceRolesCreateRequest {
	r.deviceRole = &deviceRole
	return r
}

func (r ApiDcimDeviceRolesCreateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesCreateExecute(r)
}

/*
DcimDeviceRolesCreate Method for DcimDeviceRolesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceRolesCreateRequest
*/
func (a *DcimApiService) DcimDeviceRolesCreate(ctx context.Context) ApiDcimDeviceRolesCreateRequest {
	return ApiDcimDeviceRolesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceRole
func (a *DcimApiService) DcimDeviceRolesCreateExecute(r ApiDcimDeviceRolesCreateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRole == nil {
		return localVarReturnValue, nil, reportError("deviceRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceRolesDestroyExecute(r)
}

/*
DcimDeviceRolesDestroy Method for DcimDeviceRolesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device role.
 @return ApiDcimDeviceRolesDestroyRequest
*/
func (a *DcimApiService) DcimDeviceRolesDestroy(ctx context.Context, id string) ApiDcimDeviceRolesDestroyRequest {
	return ApiDcimDeviceRolesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceRolesDestroyExecute(r ApiDcimDeviceRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	vmRole *bool
}

func (r ApiDcimDeviceRolesListRequest) Color(color []string) ApiDcimDeviceRolesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIc(colorIc []string) ApiDcimDeviceRolesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIe(colorIe []string) ApiDcimDeviceRolesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIew(colorIew []string) ApiDcimDeviceRolesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIre(colorIre []string) ApiDcimDeviceRolesListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorIsw(colorIsw []string) ApiDcimDeviceRolesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorN(colorN []string) ApiDcimDeviceRolesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNic(colorNic []string) ApiDcimDeviceRolesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNie(colorNie []string) ApiDcimDeviceRolesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNiew(colorNiew []string) ApiDcimDeviceRolesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNire(colorNire []string) ApiDcimDeviceRolesListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNisw(colorNisw []string) ApiDcimDeviceRolesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorNre(colorNre []string) ApiDcimDeviceRolesListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiDcimDeviceRolesListRequest) ColorRe(colorRe []string) ApiDcimDeviceRolesListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiDcimDeviceRolesListRequest) Created(created string) ApiDcimDeviceRolesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedGte(createdGte string) ApiDcimDeviceRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDeviceRolesListRequest) CreatedLte(createdLte string) ApiDcimDeviceRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimDeviceRolesListRequest) Id(id []string) ApiDcimDeviceRolesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdIc(idIc []string) ApiDcimDeviceRolesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdIe(idIe []string) ApiDcimDeviceRolesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdIew(idIew []string) ApiDcimDeviceRolesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdIre(idIre []string) ApiDcimDeviceRolesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdIsw(idIsw []string) ApiDcimDeviceRolesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdN(idN []string) ApiDcimDeviceRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdNic(idNic []string) ApiDcimDeviceRolesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdNie(idNie []string) ApiDcimDeviceRolesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdNiew(idNiew []string) ApiDcimDeviceRolesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdNire(idNire []string) ApiDcimDeviceRolesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdNisw(idNisw []string) ApiDcimDeviceRolesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdNre(idNre []string) ApiDcimDeviceRolesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimDeviceRolesListRequest) IdRe(idRe []string) ApiDcimDeviceRolesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdated(lastUpdated time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDeviceRolesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimDeviceRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceRolesListRequest) Limit(limit int32) ApiDcimDeviceRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimDeviceRolesListRequest) Name(name []string) ApiDcimDeviceRolesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIc(nameIc []string) ApiDcimDeviceRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIe(nameIe []string) ApiDcimDeviceRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIew(nameIew []string) ApiDcimDeviceRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIre(nameIre []string) ApiDcimDeviceRolesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameIsw(nameIsw []string) ApiDcimDeviceRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameN(nameN []string) ApiDcimDeviceRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNic(nameNic []string) ApiDcimDeviceRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNie(nameNie []string) ApiDcimDeviceRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNiew(nameNiew []string) ApiDcimDeviceRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNire(nameNire []string) ApiDcimDeviceRolesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNisw(nameNisw []string) ApiDcimDeviceRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameNre(nameNre []string) ApiDcimDeviceRolesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimDeviceRolesListRequest) NameRe(nameRe []string) ApiDcimDeviceRolesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceRolesListRequest) Offset(offset int32) ApiDcimDeviceRolesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimDeviceRolesListRequest) Q(q string) ApiDcimDeviceRolesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimDeviceRolesListRequest) Slug(slug []string) ApiDcimDeviceRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIc(slugIc []string) ApiDcimDeviceRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIe(slugIe []string) ApiDcimDeviceRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIew(slugIew []string) ApiDcimDeviceRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIre(slugIre []string) ApiDcimDeviceRolesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugIsw(slugIsw []string) ApiDcimDeviceRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugN(slugN []string) ApiDcimDeviceRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNic(slugNic []string) ApiDcimDeviceRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNie(slugNie []string) ApiDcimDeviceRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNiew(slugNiew []string) ApiDcimDeviceRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNire(slugNire []string) ApiDcimDeviceRolesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNisw(slugNisw []string) ApiDcimDeviceRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugNre(slugNre []string) ApiDcimDeviceRolesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimDeviceRolesListRequest) SlugRe(slugRe []string) ApiDcimDeviceRolesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimDeviceRolesListRequest) VmRole(vmRole bool) ApiDcimDeviceRolesListRequest {
	r.vmRole = &vmRole
	return r
}

func (r ApiDcimDeviceRolesListRequest) Execute() (*PaginatedDeviceRoleList, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesListExecute(r)
}

/*
DcimDeviceRolesList Method for DcimDeviceRolesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceRolesListRequest
*/
func (a *DcimApiService) DcimDeviceRolesList(ctx context.Context) ApiDcimDeviceRolesListRequest {
	return ApiDcimDeviceRolesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDeviceRoleList
func (a *DcimApiService) DcimDeviceRolesListExecute(r ApiDcimDeviceRolesListRequest) (*PaginatedDeviceRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeviceRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ic", parameterToString(t, "multi"))
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ie", parameterToString(t, "multi"))
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__iew", parameterToString(t, "multi"))
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ire", parameterToString(t, "multi"))
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__isw", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nic", parameterToString(t, "multi"))
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nie", parameterToString(t, "multi"))
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__niew", parameterToString(t, "multi"))
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nire", parameterToString(t, "multi"))
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nisw", parameterToString(t, "multi"))
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nre", parameterToString(t, "multi"))
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	if r.vmRole != nil {
		localVarQueryParams.Add("vm_role", parameterToString(*r.vmRole, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedDeviceRole *PatchedDeviceRole
}

func (r ApiDcimDeviceRolesPartialUpdateRequest) PatchedDeviceRole(patchedDeviceRole PatchedDeviceRole) ApiDcimDeviceRolesPartialUpdateRequest {
	r.patchedDeviceRole = &patchedDeviceRole
	return r
}

func (r ApiDcimDeviceRolesPartialUpdateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesPartialUpdateExecute(r)
}

/*
DcimDeviceRolesPartialUpdate Method for DcimDeviceRolesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device role.
 @return ApiDcimDeviceRolesPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceRolesPartialUpdate(ctx context.Context, id string) ApiDcimDeviceRolesPartialUpdateRequest {
	return ApiDcimDeviceRolesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceRole
func (a *DcimApiService) DcimDeviceRolesPartialUpdateExecute(r ApiDcimDeviceRolesPartialUpdateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDeviceRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceRolesRetrieveRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesRetrieveExecute(r)
}

/*
DcimDeviceRolesRetrieve Method for DcimDeviceRolesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device role.
 @return ApiDcimDeviceRolesRetrieveRequest
*/
func (a *DcimApiService) DcimDeviceRolesRetrieve(ctx context.Context, id string) ApiDcimDeviceRolesRetrieveRequest {
	return ApiDcimDeviceRolesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceRole
func (a *DcimApiService) DcimDeviceRolesRetrieveExecute(r ApiDcimDeviceRolesRetrieveRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceRolesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	deviceRole *DeviceRole
}

func (r ApiDcimDeviceRolesUpdateRequest) DeviceRole(deviceRole DeviceRole) ApiDcimDeviceRolesUpdateRequest {
	r.deviceRole = &deviceRole
	return r
}

func (r ApiDcimDeviceRolesUpdateRequest) Execute() (*DeviceRole, *http.Response, error) {
	return r.ApiService.DcimDeviceRolesUpdateExecute(r)
}

/*
DcimDeviceRolesUpdate Method for DcimDeviceRolesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device role.
 @return ApiDcimDeviceRolesUpdateRequest
*/
func (a *DcimApiService) DcimDeviceRolesUpdate(ctx context.Context, id string) ApiDcimDeviceRolesUpdateRequest {
	return ApiDcimDeviceRolesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceRole
func (a *DcimApiService) DcimDeviceRolesUpdateExecute(r ApiDcimDeviceRolesUpdateRequest) (*DeviceRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deviceRole == nil {
		return localVarReturnValue, nil, reportError("deviceRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deviceRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimDeviceTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceTypesBulkDestroyExecute(r)
}

/*
DcimDeviceTypesBulkDestroy Method for DcimDeviceTypesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceTypesBulkDestroyRequest
*/
func (a *DcimApiService) DcimDeviceTypesBulkDestroy(ctx context.Context) ApiDcimDeviceTypesBulkDestroyRequest {
	return ApiDcimDeviceTypesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceTypesBulkDestroyExecute(r ApiDcimDeviceTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableDeviceType *PatchedWritableDeviceType
}

func (r ApiDcimDeviceTypesBulkPartialUpdateRequest) PatchedWritableDeviceType(patchedWritableDeviceType PatchedWritableDeviceType) ApiDcimDeviceTypesBulkPartialUpdateRequest {
	r.patchedWritableDeviceType = &patchedWritableDeviceType
	return r
}

func (r ApiDcimDeviceTypesBulkPartialUpdateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesBulkPartialUpdateExecute(r)
}

/*
DcimDeviceTypesBulkPartialUpdate Method for DcimDeviceTypesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceTypesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceTypesBulkPartialUpdate(ctx context.Context) ApiDcimDeviceTypesBulkPartialUpdateRequest {
	return ApiDcimDeviceTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceType
func (a *DcimApiService) DcimDeviceTypesBulkPartialUpdateExecute(r ApiDcimDeviceTypesBulkPartialUpdateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceType *WritableDeviceType
}

func (r ApiDcimDeviceTypesBulkUpdateRequest) WritableDeviceType(writableDeviceType WritableDeviceType) ApiDcimDeviceTypesBulkUpdateRequest {
	r.writableDeviceType = &writableDeviceType
	return r
}

func (r ApiDcimDeviceTypesBulkUpdateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesBulkUpdateExecute(r)
}

/*
DcimDeviceTypesBulkUpdate Method for DcimDeviceTypesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceTypesBulkUpdateRequest
*/
func (a *DcimApiService) DcimDeviceTypesBulkUpdate(ctx context.Context) ApiDcimDeviceTypesBulkUpdateRequest {
	return ApiDcimDeviceTypesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceType
func (a *DcimApiService) DcimDeviceTypesBulkUpdateExecute(r ApiDcimDeviceTypesBulkUpdateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceType == nil {
		return localVarReturnValue, nil, reportError("writableDeviceType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceType *WritableDeviceType
}

func (r ApiDcimDeviceTypesCreateRequest) WritableDeviceType(writableDeviceType WritableDeviceType) ApiDcimDeviceTypesCreateRequest {
	r.writableDeviceType = &writableDeviceType
	return r
}

func (r ApiDcimDeviceTypesCreateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesCreateExecute(r)
}

/*
DcimDeviceTypesCreate Method for DcimDeviceTypesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceTypesCreateRequest
*/
func (a *DcimApiService) DcimDeviceTypesCreate(ctx context.Context) ApiDcimDeviceTypesCreateRequest {
	return ApiDcimDeviceTypesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceType
func (a *DcimApiService) DcimDeviceTypesCreateExecute(r ApiDcimDeviceTypesCreateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceType == nil {
		return localVarReturnValue, nil, reportError("writableDeviceType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDeviceTypesDestroyExecute(r)
}

/*
DcimDeviceTypesDestroy Method for DcimDeviceTypesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device type.
 @return ApiDcimDeviceTypesDestroyRequest
*/
func (a *DcimApiService) DcimDeviceTypesDestroy(ctx context.Context, id string) ApiDcimDeviceTypesDestroyRequest {
	return ApiDcimDeviceTypesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDeviceTypesDestroyExecute(r ApiDcimDeviceTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	consolePorts *bool
	consoleServerPorts *bool
	created *string
	createdGte *string
	createdLte *string
	deviceBays *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	interfaces *bool
	isFullDepth *bool
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	manufacturer *[]string
	manufacturerN *[]string
	manufacturerId *[]string
	manufacturerIdN *[]string
	model *[]string
	modelIc *[]string
	modelIe *[]string
	modelIew *[]string
	modelIre *[]string
	modelIsw *[]string
	modelN *[]string
	modelNic *[]string
	modelNie *[]string
	modelNiew *[]string
	modelNire *[]string
	modelNisw *[]string
	modelNre *[]string
	modelRe *[]string
	offset *int32
	partNumber *[]string
	partNumberIc *[]string
	partNumberIe *[]string
	partNumberIew *[]string
	partNumberIre *[]string
	partNumberIsw *[]string
	partNumberN *[]string
	partNumberNic *[]string
	partNumberNie *[]string
	partNumberNiew *[]string
	partNumberNire *[]string
	partNumberNisw *[]string
	partNumberNre *[]string
	partNumberRe *[]string
	passThroughPorts *bool
	powerOutlets *bool
	powerPorts *bool
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	subdeviceRole *string
	subdeviceRoleN *string
	tag *[]string
	tagN *[]string
	uHeight *[]int32
	uHeightGt *[]int32
	uHeightGte *[]int32
	uHeightLt *[]int32
	uHeightLte *[]int32
	uHeightN *[]int32
}

// Has console ports
func (r ApiDcimDeviceTypesListRequest) ConsolePorts(consolePorts bool) ApiDcimDeviceTypesListRequest {
	r.consolePorts = &consolePorts
	return r
}

// Has console server ports
func (r ApiDcimDeviceTypesListRequest) ConsoleServerPorts(consoleServerPorts bool) ApiDcimDeviceTypesListRequest {
	r.consoleServerPorts = &consoleServerPorts
	return r
}

func (r ApiDcimDeviceTypesListRequest) Created(created string) ApiDcimDeviceTypesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedGte(createdGte string) ApiDcimDeviceTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) CreatedLte(createdLte string) ApiDcimDeviceTypesListRequest {
	r.createdLte = &createdLte
	return r
}

// Has device bays
func (r ApiDcimDeviceTypesListRequest) DeviceBays(deviceBays bool) ApiDcimDeviceTypesListRequest {
	r.deviceBays = &deviceBays
	return r
}

func (r ApiDcimDeviceTypesListRequest) Id(id []string) ApiDcimDeviceTypesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdIc(idIc []string) ApiDcimDeviceTypesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdIe(idIe []string) ApiDcimDeviceTypesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdIew(idIew []string) ApiDcimDeviceTypesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdIre(idIre []string) ApiDcimDeviceTypesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdIsw(idIsw []string) ApiDcimDeviceTypesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdN(idN []string) ApiDcimDeviceTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdNic(idNic []string) ApiDcimDeviceTypesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdNie(idNie []string) ApiDcimDeviceTypesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdNiew(idNiew []string) ApiDcimDeviceTypesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdNire(idNire []string) ApiDcimDeviceTypesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdNisw(idNisw []string) ApiDcimDeviceTypesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdNre(idNre []string) ApiDcimDeviceTypesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimDeviceTypesListRequest) IdRe(idRe []string) ApiDcimDeviceTypesListRequest {
	r.idRe = &idRe
	return r
}

// Has interfaces
func (r ApiDcimDeviceTypesListRequest) Interfaces(interfaces bool) ApiDcimDeviceTypesListRequest {
	r.interfaces = &interfaces
	return r
}

func (r ApiDcimDeviceTypesListRequest) IsFullDepth(isFullDepth bool) ApiDcimDeviceTypesListRequest {
	r.isFullDepth = &isFullDepth
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdated(lastUpdated time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimDeviceTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimDeviceTypesListRequest) Limit(limit int32) ApiDcimDeviceTypesListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimDeviceTypesListRequest) Manufacturer(manufacturer []string) ApiDcimDeviceTypesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimDeviceTypesListRequest) ManufacturerN(manufacturerN []string) ApiDcimDeviceTypesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimDeviceTypesListRequest) ManufacturerId(manufacturerId []string) ApiDcimDeviceTypesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimDeviceTypesListRequest) ManufacturerIdN(manufacturerIdN []string) ApiDcimDeviceTypesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Model(model []string) ApiDcimDeviceTypesListRequest {
	r.model = &model
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIc(modelIc []string) ApiDcimDeviceTypesListRequest {
	r.modelIc = &modelIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIe(modelIe []string) ApiDcimDeviceTypesListRequest {
	r.modelIe = &modelIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIew(modelIew []string) ApiDcimDeviceTypesListRequest {
	r.modelIew = &modelIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIre(modelIre []string) ApiDcimDeviceTypesListRequest {
	r.modelIre = &modelIre
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelIsw(modelIsw []string) ApiDcimDeviceTypesListRequest {
	r.modelIsw = &modelIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelN(modelN []string) ApiDcimDeviceTypesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNic(modelNic []string) ApiDcimDeviceTypesListRequest {
	r.modelNic = &modelNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNie(modelNie []string) ApiDcimDeviceTypesListRequest {
	r.modelNie = &modelNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNiew(modelNiew []string) ApiDcimDeviceTypesListRequest {
	r.modelNiew = &modelNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNire(modelNire []string) ApiDcimDeviceTypesListRequest {
	r.modelNire = &modelNire
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNisw(modelNisw []string) ApiDcimDeviceTypesListRequest {
	r.modelNisw = &modelNisw
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelNre(modelNre []string) ApiDcimDeviceTypesListRequest {
	r.modelNre = &modelNre
	return r
}

func (r ApiDcimDeviceTypesListRequest) ModelRe(modelRe []string) ApiDcimDeviceTypesListRequest {
	r.modelRe = &modelRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDeviceTypesListRequest) Offset(offset int32) ApiDcimDeviceTypesListRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumber(partNumber []string) ApiDcimDeviceTypesListRequest {
	r.partNumber = &partNumber
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIc(partNumberIc []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIc = &partNumberIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIe(partNumberIe []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIe = &partNumberIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIew(partNumberIew []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIew = &partNumberIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIre(partNumberIre []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIre = &partNumberIre
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberIsw(partNumberIsw []string) ApiDcimDeviceTypesListRequest {
	r.partNumberIsw = &partNumberIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberN(partNumberN []string) ApiDcimDeviceTypesListRequest {
	r.partNumberN = &partNumberN
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNic(partNumberNic []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNic = &partNumberNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNie(partNumberNie []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNie = &partNumberNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNiew(partNumberNiew []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNiew = &partNumberNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNire(partNumberNire []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNire = &partNumberNire
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNisw(partNumberNisw []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNisw = &partNumberNisw
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberNre(partNumberNre []string) ApiDcimDeviceTypesListRequest {
	r.partNumberNre = &partNumberNre
	return r
}

func (r ApiDcimDeviceTypesListRequest) PartNumberRe(partNumberRe []string) ApiDcimDeviceTypesListRequest {
	r.partNumberRe = &partNumberRe
	return r
}

// Has pass-through ports
func (r ApiDcimDeviceTypesListRequest) PassThroughPorts(passThroughPorts bool) ApiDcimDeviceTypesListRequest {
	r.passThroughPorts = &passThroughPorts
	return r
}

// Has power outlets
func (r ApiDcimDeviceTypesListRequest) PowerOutlets(powerOutlets bool) ApiDcimDeviceTypesListRequest {
	r.powerOutlets = &powerOutlets
	return r
}

// Has power ports
func (r ApiDcimDeviceTypesListRequest) PowerPorts(powerPorts bool) ApiDcimDeviceTypesListRequest {
	r.powerPorts = &powerPorts
	return r
}

// Search
func (r ApiDcimDeviceTypesListRequest) Q(q string) ApiDcimDeviceTypesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimDeviceTypesListRequest) Slug(slug []string) ApiDcimDeviceTypesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIc(slugIc []string) ApiDcimDeviceTypesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIe(slugIe []string) ApiDcimDeviceTypesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIew(slugIew []string) ApiDcimDeviceTypesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIre(slugIre []string) ApiDcimDeviceTypesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugIsw(slugIsw []string) ApiDcimDeviceTypesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugN(slugN []string) ApiDcimDeviceTypesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNic(slugNic []string) ApiDcimDeviceTypesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNie(slugNie []string) ApiDcimDeviceTypesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNiew(slugNiew []string) ApiDcimDeviceTypesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNire(slugNire []string) ApiDcimDeviceTypesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNisw(slugNisw []string) ApiDcimDeviceTypesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugNre(slugNre []string) ApiDcimDeviceTypesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimDeviceTypesListRequest) SlugRe(slugRe []string) ApiDcimDeviceTypesListRequest {
	r.slugRe = &slugRe
	return r
}

// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
func (r ApiDcimDeviceTypesListRequest) SubdeviceRole(subdeviceRole string) ApiDcimDeviceTypesListRequest {
	r.subdeviceRole = &subdeviceRole
	return r
}

// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.
func (r ApiDcimDeviceTypesListRequest) SubdeviceRoleN(subdeviceRoleN string) ApiDcimDeviceTypesListRequest {
	r.subdeviceRoleN = &subdeviceRoleN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Tag(tag []string) ApiDcimDeviceTypesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDeviceTypesListRequest) TagN(tagN []string) ApiDcimDeviceTypesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeight(uHeight []int32) ApiDcimDeviceTypesListRequest {
	r.uHeight = &uHeight
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightGt(uHeightGt []int32) ApiDcimDeviceTypesListRequest {
	r.uHeightGt = &uHeightGt
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightGte(uHeightGte []int32) ApiDcimDeviceTypesListRequest {
	r.uHeightGte = &uHeightGte
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightLt(uHeightLt []int32) ApiDcimDeviceTypesListRequest {
	r.uHeightLt = &uHeightLt
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightLte(uHeightLte []int32) ApiDcimDeviceTypesListRequest {
	r.uHeightLte = &uHeightLte
	return r
}

func (r ApiDcimDeviceTypesListRequest) UHeightN(uHeightN []int32) ApiDcimDeviceTypesListRequest {
	r.uHeightN = &uHeightN
	return r
}

func (r ApiDcimDeviceTypesListRequest) Execute() (*PaginatedDeviceTypeList, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesListExecute(r)
}

/*
DcimDeviceTypesList Method for DcimDeviceTypesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDeviceTypesListRequest
*/
func (a *DcimApiService) DcimDeviceTypesList(ctx context.Context) ApiDcimDeviceTypesListRequest {
	return ApiDcimDeviceTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDeviceTypeList
func (a *DcimApiService) DcimDeviceTypesListExecute(r ApiDcimDeviceTypesListRequest) (*PaginatedDeviceTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeviceTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.consolePorts != nil {
		localVarQueryParams.Add("console_ports", parameterToString(*r.consolePorts, ""))
	}
	if r.consoleServerPorts != nil {
		localVarQueryParams.Add("console_server_ports", parameterToString(*r.consoleServerPorts, ""))
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.deviceBays != nil {
		localVarQueryParams.Add("device_bays", parameterToString(*r.deviceBays, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.interfaces != nil {
		localVarQueryParams.Add("interfaces", parameterToString(*r.interfaces, ""))
	}
	if r.isFullDepth != nil {
		localVarQueryParams.Add("is_full_depth", parameterToString(*r.isFullDepth, ""))
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer__n", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id__n", parameterToString(t, "multi"))
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model", parameterToString(t, "multi"))
		}
	}
	if r.modelIc != nil {
		t := *r.modelIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__ic", parameterToString(t, "multi"))
		}
	}
	if r.modelIe != nil {
		t := *r.modelIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__ie", parameterToString(t, "multi"))
		}
	}
	if r.modelIew != nil {
		t := *r.modelIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__iew", parameterToString(t, "multi"))
		}
	}
	if r.modelIre != nil {
		t := *r.modelIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__ire", parameterToString(t, "multi"))
		}
	}
	if r.modelIsw != nil {
		t := *r.modelIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__isw", parameterToString(t, "multi"))
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__n", parameterToString(t, "multi"))
		}
	}
	if r.modelNic != nil {
		t := *r.modelNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__nic", parameterToString(t, "multi"))
		}
	}
	if r.modelNie != nil {
		t := *r.modelNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__nie", parameterToString(t, "multi"))
		}
	}
	if r.modelNiew != nil {
		t := *r.modelNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__niew", parameterToString(t, "multi"))
		}
	}
	if r.modelNire != nil {
		t := *r.modelNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__nire", parameterToString(t, "multi"))
		}
	}
	if r.modelNisw != nil {
		t := *r.modelNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__nisw", parameterToString(t, "multi"))
		}
	}
	if r.modelNre != nil {
		t := *r.modelNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__nre", parameterToString(t, "multi"))
		}
	}
	if r.modelRe != nil {
		t := *r.modelRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.partNumber != nil {
		t := *r.partNumber
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number", parameterToString(t, "multi"))
		}
	}
	if r.partNumberIc != nil {
		t := *r.partNumberIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__ic", parameterToString(t, "multi"))
		}
	}
	if r.partNumberIe != nil {
		t := *r.partNumberIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__ie", parameterToString(t, "multi"))
		}
	}
	if r.partNumberIew != nil {
		t := *r.partNumberIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__iew", parameterToString(t, "multi"))
		}
	}
	if r.partNumberIre != nil {
		t := *r.partNumberIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__ire", parameterToString(t, "multi"))
		}
	}
	if r.partNumberIsw != nil {
		t := *r.partNumberIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__isw", parameterToString(t, "multi"))
		}
	}
	if r.partNumberN != nil {
		t := *r.partNumberN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__n", parameterToString(t, "multi"))
		}
	}
	if r.partNumberNic != nil {
		t := *r.partNumberNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__nic", parameterToString(t, "multi"))
		}
	}
	if r.partNumberNie != nil {
		t := *r.partNumberNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__nie", parameterToString(t, "multi"))
		}
	}
	if r.partNumberNiew != nil {
		t := *r.partNumberNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__niew", parameterToString(t, "multi"))
		}
	}
	if r.partNumberNire != nil {
		t := *r.partNumberNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__nire", parameterToString(t, "multi"))
		}
	}
	if r.partNumberNisw != nil {
		t := *r.partNumberNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__nisw", parameterToString(t, "multi"))
		}
	}
	if r.partNumberNre != nil {
		t := *r.partNumberNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__nre", parameterToString(t, "multi"))
		}
	}
	if r.partNumberRe != nil {
		t := *r.partNumberRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_number__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_number__re", parameterToString(t, "multi"))
		}
	}
	if r.passThroughPorts != nil {
		localVarQueryParams.Add("pass_through_ports", parameterToString(*r.passThroughPorts, ""))
	}
	if r.powerOutlets != nil {
		localVarQueryParams.Add("power_outlets", parameterToString(*r.powerOutlets, ""))
	}
	if r.powerPorts != nil {
		localVarQueryParams.Add("power_ports", parameterToString(*r.powerPorts, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	if r.subdeviceRole != nil {
		localVarQueryParams.Add("subdevice_role", parameterToString(*r.subdeviceRole, ""))
	}
	if r.subdeviceRoleN != nil {
		localVarQueryParams.Add("subdevice_role__n", parameterToString(*r.subdeviceRoleN, ""))
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.uHeight != nil {
		t := *r.uHeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height", parameterToString(t, "multi"))
		}
	}
	if r.uHeightGt != nil {
		t := *r.uHeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__gt", parameterToString(t, "multi"))
		}
	}
	if r.uHeightGte != nil {
		t := *r.uHeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__gte", parameterToString(t, "multi"))
		}
	}
	if r.uHeightLt != nil {
		t := *r.uHeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__lt", parameterToString(t, "multi"))
		}
	}
	if r.uHeightLte != nil {
		t := *r.uHeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__lte", parameterToString(t, "multi"))
		}
	}
	if r.uHeightN != nil {
		t := *r.uHeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableDeviceType *PatchedWritableDeviceType
}

func (r ApiDcimDeviceTypesPartialUpdateRequest) PatchedWritableDeviceType(patchedWritableDeviceType PatchedWritableDeviceType) ApiDcimDeviceTypesPartialUpdateRequest {
	r.patchedWritableDeviceType = &patchedWritableDeviceType
	return r
}

func (r ApiDcimDeviceTypesPartialUpdateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesPartialUpdateExecute(r)
}

/*
DcimDeviceTypesPartialUpdate Method for DcimDeviceTypesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device type.
 @return ApiDcimDeviceTypesPartialUpdateRequest
*/
func (a *DcimApiService) DcimDeviceTypesPartialUpdate(ctx context.Context, id string) ApiDcimDeviceTypesPartialUpdateRequest {
	return ApiDcimDeviceTypesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceType
func (a *DcimApiService) DcimDeviceTypesPartialUpdateExecute(r ApiDcimDeviceTypesPartialUpdateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDeviceTypesRetrieveRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesRetrieveExecute(r)
}

/*
DcimDeviceTypesRetrieve Method for DcimDeviceTypesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device type.
 @return ApiDcimDeviceTypesRetrieveRequest
*/
func (a *DcimApiService) DcimDeviceTypesRetrieve(ctx context.Context, id string) ApiDcimDeviceTypesRetrieveRequest {
	return ApiDcimDeviceTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceType
func (a *DcimApiService) DcimDeviceTypesRetrieveExecute(r ApiDcimDeviceTypesRetrieveRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDeviceTypesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableDeviceType *WritableDeviceType
}

func (r ApiDcimDeviceTypesUpdateRequest) WritableDeviceType(writableDeviceType WritableDeviceType) ApiDcimDeviceTypesUpdateRequest {
	r.writableDeviceType = &writableDeviceType
	return r
}

func (r ApiDcimDeviceTypesUpdateRequest) Execute() (*DeviceType, *http.Response, error) {
	return r.ApiService.DcimDeviceTypesUpdateExecute(r)
}

/*
DcimDeviceTypesUpdate Method for DcimDeviceTypesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device type.
 @return ApiDcimDeviceTypesUpdateRequest
*/
func (a *DcimApiService) DcimDeviceTypesUpdate(ctx context.Context, id string) ApiDcimDeviceTypesUpdateRequest {
	return ApiDcimDeviceTypesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceType
func (a *DcimApiService) DcimDeviceTypesUpdateExecute(r ApiDcimDeviceTypesUpdateRequest) (*DeviceType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDeviceTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/device-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceType == nil {
		return localVarReturnValue, nil, reportError("writableDeviceType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimDevicesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDevicesBulkDestroyExecute(r)
}

/*
DcimDevicesBulkDestroy Method for DcimDevicesBulkDestroy

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDevicesBulkDestroyRequest
*/
func (a *DcimApiService) DcimDevicesBulkDestroy(ctx context.Context) ApiDcimDevicesBulkDestroyRequest {
	return ApiDcimDevicesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDevicesBulkDestroyExecute(r ApiDcimDevicesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDevicesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableDeviceWithConfigContext *PatchedWritableDeviceWithConfigContext
}

func (r ApiDcimDevicesBulkPartialUpdateRequest) PatchedWritableDeviceWithConfigContext(patchedWritableDeviceWithConfigContext PatchedWritableDeviceWithConfigContext) ApiDcimDevicesBulkPartialUpdateRequest {
	r.patchedWritableDeviceWithConfigContext = &patchedWritableDeviceWithConfigContext
	return r
}

func (r ApiDcimDevicesBulkPartialUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesBulkPartialUpdateExecute(r)
}

/*
DcimDevicesBulkPartialUpdate Method for DcimDevicesBulkPartialUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDevicesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimDevicesBulkPartialUpdate(ctx context.Context) ApiDcimDevicesBulkPartialUpdateRequest {
	return ApiDcimDevicesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceWithConfigContext
func (a *DcimApiService) DcimDevicesBulkPartialUpdateExecute(r ApiDcimDevicesBulkPartialUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceWithConfigContext *WritableDeviceWithConfigContext
}

func (r ApiDcimDevicesBulkUpdateRequest) WritableDeviceWithConfigContext(writableDeviceWithConfigContext WritableDeviceWithConfigContext) ApiDcimDevicesBulkUpdateRequest {
	r.writableDeviceWithConfigContext = &writableDeviceWithConfigContext
	return r
}

func (r ApiDcimDevicesBulkUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesBulkUpdateExecute(r)
}

/*
DcimDevicesBulkUpdate Method for DcimDevicesBulkUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDevicesBulkUpdateRequest
*/
func (a *DcimApiService) DcimDevicesBulkUpdate(ctx context.Context) ApiDcimDevicesBulkUpdateRequest {
	return ApiDcimDevicesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceWithConfigContext
func (a *DcimApiService) DcimDevicesBulkUpdateExecute(r ApiDcimDevicesBulkUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableDeviceWithConfigContext *WritableDeviceWithConfigContext
}

func (r ApiDcimDevicesCreateRequest) WritableDeviceWithConfigContext(writableDeviceWithConfigContext WritableDeviceWithConfigContext) ApiDcimDevicesCreateRequest {
	r.writableDeviceWithConfigContext = &writableDeviceWithConfigContext
	return r
}

func (r ApiDcimDevicesCreateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesCreateExecute(r)
}

/*
DcimDevicesCreate Method for DcimDevicesCreate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDevicesCreateRequest
*/
func (a *DcimApiService) DcimDevicesCreate(ctx context.Context) ApiDcimDevicesCreateRequest {
	return ApiDcimDevicesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DeviceWithConfigContext
func (a *DcimApiService) DcimDevicesCreateExecute(r ApiDcimDevicesCreateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDevicesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimDevicesDestroyExecute(r)
}

/*
DcimDevicesDestroy Method for DcimDevicesDestroy

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device.
 @return ApiDcimDevicesDestroyRequest
*/
func (a *DcimApiService) DcimDevicesDestroy(ctx context.Context, id string) ApiDcimDevicesDestroyRequest {
	return ApiDcimDevicesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimDevicesDestroyExecute(r ApiDcimDevicesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimDevicesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	assetTag *[]string
	assetTagIc *[]string
	assetTagIe *[]string
	assetTagIew *[]string
	assetTagIre *[]string
	assetTagIsw *[]string
	assetTagN *[]string
	assetTagNic *[]string
	assetTagNie *[]string
	assetTagNiew *[]string
	assetTagNire *[]string
	assetTagNisw *[]string
	assetTagNre *[]string
	assetTagRe *[]string
	clusterId *[]*string
	clusterIdN *[]*string
	consolePorts *bool
	consoleServerPorts *bool
	created *string
	createdGte *string
	createdLte *string
	deviceBays *bool
	deviceTypeId *[]string
	deviceTypeIdN *[]string
	face *string
	faceN *string
	hasConsolePorts *bool
	hasConsoleServerPorts *bool
	hasDeviceBays *bool
	hasFrontPorts *bool
	hasInterfaces *bool
	hasPowerOutlets *bool
	hasPowerPorts *bool
	hasPrimaryIp *bool
	hasRearPorts *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	interfaces *bool
	isFullDepth *bool
	isVirtualChassisMember *bool
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	localContextData *bool
	localContextSchema *[]string
	localContextSchemaN *[]string
	localContextSchemaId *[]*string
	localContextSchemaIdN *[]*string
	macAddress *[]*string
	macAddressIc *[]*string
	macAddressIe *[]*string
	macAddressIew *[]*string
	macAddressIre *[]*string
	macAddressIsw *[]*string
	macAddressN *[]*string
	macAddressNic *[]*string
	macAddressNie *[]*string
	macAddressNiew *[]*string
	macAddressNire *[]*string
	macAddressNisw *[]*string
	macAddressNre *[]*string
	macAddressRe *[]*string
	manufacturer *[]string
	manufacturerN *[]string
	manufacturerId *[]string
	manufacturerIdN *[]string
	model *[]string
	modelN *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	passThroughPorts *bool
	platform *[]string
	platformN *[]string
	platformId *[]*string
	platformIdN *[]*string
	position *[]int32
	positionGt *[]int32
	positionGte *[]int32
	positionLt *[]int32
	positionLte *[]int32
	positionN *[]int32
	powerOutlets *bool
	powerPorts *bool
	q *string
	rackGroupId *[]string
	rackGroupIdN *[]string
	rackId *[]string
	rackIdN *[]string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	role *[]string
	roleN *[]string
	roleId *[]string
	roleIdN *[]string
	secretsGroup *[]string
	secretsGroupN *[]string
	secretsGroupId *[]string
	secretsGroupIdN *[]string
	serial *string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	status *[]string
	statusN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
	vcPosition *[]int32
	vcPositionGt *[]int32
	vcPositionGte *[]int32
	vcPositionLt *[]int32
	vcPositionLte *[]int32
	vcPositionN *[]int32
	vcPriority *[]int32
	vcPriorityGt *[]int32
	vcPriorityGte *[]int32
	vcPriorityLt *[]int32
	vcPriorityLte *[]int32
	vcPriorityN *[]int32
	virtualChassisId *[]string
	virtualChassisIdN *[]string
	virtualChassisMember *bool
}

func (r ApiDcimDevicesListRequest) AssetTag(assetTag []string) ApiDcimDevicesListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIc(assetTagIc []string) ApiDcimDevicesListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIe(assetTagIe []string) ApiDcimDevicesListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIew(assetTagIew []string) ApiDcimDevicesListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIre(assetTagIre []string) ApiDcimDevicesListRequest {
	r.assetTagIre = &assetTagIre
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimDevicesListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagN(assetTagN []string) ApiDcimDevicesListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNic(assetTagNic []string) ApiDcimDevicesListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNie(assetTagNie []string) ApiDcimDevicesListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimDevicesListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNire(assetTagNire []string) ApiDcimDevicesListRequest {
	r.assetTagNire = &assetTagNire
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimDevicesListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagNre(assetTagNre []string) ApiDcimDevicesListRequest {
	r.assetTagNre = &assetTagNre
	return r
}

func (r ApiDcimDevicesListRequest) AssetTagRe(assetTagRe []string) ApiDcimDevicesListRequest {
	r.assetTagRe = &assetTagRe
	return r
}

// VM cluster (ID)
func (r ApiDcimDevicesListRequest) ClusterId(clusterId []*string) ApiDcimDevicesListRequest {
	r.clusterId = &clusterId
	return r
}

// VM cluster (ID)
func (r ApiDcimDevicesListRequest) ClusterIdN(clusterIdN []*string) ApiDcimDevicesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

// Has console ports
func (r ApiDcimDevicesListRequest) ConsolePorts(consolePorts bool) ApiDcimDevicesListRequest {
	r.consolePorts = &consolePorts
	return r
}

// Has console server ports
func (r ApiDcimDevicesListRequest) ConsoleServerPorts(consoleServerPorts bool) ApiDcimDevicesListRequest {
	r.consoleServerPorts = &consoleServerPorts
	return r
}

func (r ApiDcimDevicesListRequest) Created(created string) ApiDcimDevicesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimDevicesListRequest) CreatedGte(createdGte string) ApiDcimDevicesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimDevicesListRequest) CreatedLte(createdLte string) ApiDcimDevicesListRequest {
	r.createdLte = &createdLte
	return r
}

// Has device bays
func (r ApiDcimDevicesListRequest) DeviceBays(deviceBays bool) ApiDcimDevicesListRequest {
	r.deviceBays = &deviceBays
	return r
}

// Device type (ID)
func (r ApiDcimDevicesListRequest) DeviceTypeId(deviceTypeId []string) ApiDcimDevicesListRequest {
	r.deviceTypeId = &deviceTypeId
	return r
}

// Device type (ID)
func (r ApiDcimDevicesListRequest) DeviceTypeIdN(deviceTypeIdN []string) ApiDcimDevicesListRequest {
	r.deviceTypeIdN = &deviceTypeIdN
	return r
}

func (r ApiDcimDevicesListRequest) Face(face string) ApiDcimDevicesListRequest {
	r.face = &face
	return r
}

func (r ApiDcimDevicesListRequest) FaceN(faceN string) ApiDcimDevicesListRequest {
	r.faceN = &faceN
	return r
}

// Has console ports
func (r ApiDcimDevicesListRequest) HasConsolePorts(hasConsolePorts bool) ApiDcimDevicesListRequest {
	r.hasConsolePorts = &hasConsolePorts
	return r
}

// Has console server ports
func (r ApiDcimDevicesListRequest) HasConsoleServerPorts(hasConsoleServerPorts bool) ApiDcimDevicesListRequest {
	r.hasConsoleServerPorts = &hasConsoleServerPorts
	return r
}

// Has device bays
func (r ApiDcimDevicesListRequest) HasDeviceBays(hasDeviceBays bool) ApiDcimDevicesListRequest {
	r.hasDeviceBays = &hasDeviceBays
	return r
}

// Has front ports
func (r ApiDcimDevicesListRequest) HasFrontPorts(hasFrontPorts bool) ApiDcimDevicesListRequest {
	r.hasFrontPorts = &hasFrontPorts
	return r
}

// Has interfaces
func (r ApiDcimDevicesListRequest) HasInterfaces(hasInterfaces bool) ApiDcimDevicesListRequest {
	r.hasInterfaces = &hasInterfaces
	return r
}

// Has power outlets
func (r ApiDcimDevicesListRequest) HasPowerOutlets(hasPowerOutlets bool) ApiDcimDevicesListRequest {
	r.hasPowerOutlets = &hasPowerOutlets
	return r
}

// Has power ports
func (r ApiDcimDevicesListRequest) HasPowerPorts(hasPowerPorts bool) ApiDcimDevicesListRequest {
	r.hasPowerPorts = &hasPowerPorts
	return r
}

// Has a primary IP
func (r ApiDcimDevicesListRequest) HasPrimaryIp(hasPrimaryIp bool) ApiDcimDevicesListRequest {
	r.hasPrimaryIp = &hasPrimaryIp
	return r
}

// Has rear ports
func (r ApiDcimDevicesListRequest) HasRearPorts(hasRearPorts bool) ApiDcimDevicesListRequest {
	r.hasRearPorts = &hasRearPorts
	return r
}

func (r ApiDcimDevicesListRequest) Id(id []string) ApiDcimDevicesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimDevicesListRequest) IdIc(idIc []string) ApiDcimDevicesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimDevicesListRequest) IdIe(idIe []string) ApiDcimDevicesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimDevicesListRequest) IdIew(idIew []string) ApiDcimDevicesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimDevicesListRequest) IdIre(idIre []string) ApiDcimDevicesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimDevicesListRequest) IdIsw(idIsw []string) ApiDcimDevicesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimDevicesListRequest) IdN(idN []string) ApiDcimDevicesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimDevicesListRequest) IdNic(idNic []string) ApiDcimDevicesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimDevicesListRequest) IdNie(idNie []string) ApiDcimDevicesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimDevicesListRequest) IdNiew(idNiew []string) ApiDcimDevicesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimDevicesListRequest) IdNire(idNire []string) ApiDcimDevicesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimDevicesListRequest) IdNisw(idNisw []string) ApiDcimDevicesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimDevicesListRequest) IdNre(idNre []string) ApiDcimDevicesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimDevicesListRequest) IdRe(idRe []string) ApiDcimDevicesListRequest {
	r.idRe = &idRe
	return r
}

// Has interfaces
func (r ApiDcimDevicesListRequest) Interfaces(interfaces bool) ApiDcimDevicesListRequest {
	r.interfaces = &interfaces
	return r
}

// Is full depth
func (r ApiDcimDevicesListRequest) IsFullDepth(isFullDepth bool) ApiDcimDevicesListRequest {
	r.isFullDepth = &isFullDepth
	return r
}

// Is a virtual chassis member
func (r ApiDcimDevicesListRequest) IsVirtualChassisMember(isVirtualChassisMember bool) ApiDcimDevicesListRequest {
	r.isVirtualChassisMember = &isVirtualChassisMember
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdated(lastUpdated time.Time) ApiDcimDevicesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimDevicesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimDevicesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimDevicesListRequest) Limit(limit int32) ApiDcimDevicesListRequest {
	r.limit = &limit
	return r
}

// Has local config context data
func (r ApiDcimDevicesListRequest) LocalContextData(localContextData bool) ApiDcimDevicesListRequest {
	r.localContextData = &localContextData
	return r
}

// Schema (slug)
func (r ApiDcimDevicesListRequest) LocalContextSchema(localContextSchema []string) ApiDcimDevicesListRequest {
	r.localContextSchema = &localContextSchema
	return r
}

// Schema (slug)
func (r ApiDcimDevicesListRequest) LocalContextSchemaN(localContextSchemaN []string) ApiDcimDevicesListRequest {
	r.localContextSchemaN = &localContextSchemaN
	return r
}

// Schema (ID)
func (r ApiDcimDevicesListRequest) LocalContextSchemaId(localContextSchemaId []*string) ApiDcimDevicesListRequest {
	r.localContextSchemaId = &localContextSchemaId
	return r
}

// Schema (ID)
func (r ApiDcimDevicesListRequest) LocalContextSchemaIdN(localContextSchemaIdN []*string) ApiDcimDevicesListRequest {
	r.localContextSchemaIdN = &localContextSchemaIdN
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddress(macAddress []*string) ApiDcimDevicesListRequest {
	r.macAddress = &macAddress
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressIc(macAddressIc []*string) ApiDcimDevicesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressIe(macAddressIe []*string) ApiDcimDevicesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressIew(macAddressIew []*string) ApiDcimDevicesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressIre(macAddressIre []*string) ApiDcimDevicesListRequest {
	r.macAddressIre = &macAddressIre
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressIsw(macAddressIsw []*string) ApiDcimDevicesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressN(macAddressN []*string) ApiDcimDevicesListRequest {
	r.macAddressN = &macAddressN
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressNic(macAddressNic []*string) ApiDcimDevicesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressNie(macAddressNie []*string) ApiDcimDevicesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressNiew(macAddressNiew []*string) ApiDcimDevicesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressNire(macAddressNire []*string) ApiDcimDevicesListRequest {
	r.macAddressNire = &macAddressNire
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressNisw(macAddressNisw []*string) ApiDcimDevicesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressNre(macAddressNre []*string) ApiDcimDevicesListRequest {
	r.macAddressNre = &macAddressNre
	return r
}

// MAC address
func (r ApiDcimDevicesListRequest) MacAddressRe(macAddressRe []*string) ApiDcimDevicesListRequest {
	r.macAddressRe = &macAddressRe
	return r
}

// Manufacturer (slug)
func (r ApiDcimDevicesListRequest) Manufacturer(manufacturer []string) ApiDcimDevicesListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimDevicesListRequest) ManufacturerN(manufacturerN []string) ApiDcimDevicesListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimDevicesListRequest) ManufacturerId(manufacturerId []string) ApiDcimDevicesListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimDevicesListRequest) ManufacturerIdN(manufacturerIdN []string) ApiDcimDevicesListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

// Device model (slug)
func (r ApiDcimDevicesListRequest) Model(model []string) ApiDcimDevicesListRequest {
	r.model = &model
	return r
}

// Device model (slug)
func (r ApiDcimDevicesListRequest) ModelN(modelN []string) ApiDcimDevicesListRequest {
	r.modelN = &modelN
	return r
}

func (r ApiDcimDevicesListRequest) Name(name []string) ApiDcimDevicesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimDevicesListRequest) NameIc(nameIc []string) ApiDcimDevicesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimDevicesListRequest) NameIe(nameIe []string) ApiDcimDevicesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimDevicesListRequest) NameIew(nameIew []string) ApiDcimDevicesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimDevicesListRequest) NameIre(nameIre []string) ApiDcimDevicesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimDevicesListRequest) NameIsw(nameIsw []string) ApiDcimDevicesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimDevicesListRequest) NameN(nameN []string) ApiDcimDevicesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimDevicesListRequest) NameNic(nameNic []string) ApiDcimDevicesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimDevicesListRequest) NameNie(nameNie []string) ApiDcimDevicesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimDevicesListRequest) NameNiew(nameNiew []string) ApiDcimDevicesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimDevicesListRequest) NameNire(nameNire []string) ApiDcimDevicesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimDevicesListRequest) NameNisw(nameNisw []string) ApiDcimDevicesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimDevicesListRequest) NameNre(nameNre []string) ApiDcimDevicesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimDevicesListRequest) NameRe(nameRe []string) ApiDcimDevicesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimDevicesListRequest) Offset(offset int32) ApiDcimDevicesListRequest {
	r.offset = &offset
	return r
}

// Has pass-through ports
func (r ApiDcimDevicesListRequest) PassThroughPorts(passThroughPorts bool) ApiDcimDevicesListRequest {
	r.passThroughPorts = &passThroughPorts
	return r
}

// Platform (slug)
func (r ApiDcimDevicesListRequest) Platform(platform []string) ApiDcimDevicesListRequest {
	r.platform = &platform
	return r
}

// Platform (slug)
func (r ApiDcimDevicesListRequest) PlatformN(platformN []string) ApiDcimDevicesListRequest {
	r.platformN = &platformN
	return r
}

// Platform (ID)
func (r ApiDcimDevicesListRequest) PlatformId(platformId []*string) ApiDcimDevicesListRequest {
	r.platformId = &platformId
	return r
}

// Platform (ID)
func (r ApiDcimDevicesListRequest) PlatformIdN(platformIdN []*string) ApiDcimDevicesListRequest {
	r.platformIdN = &platformIdN
	return r
}

func (r ApiDcimDevicesListRequest) Position(position []int32) ApiDcimDevicesListRequest {
	r.position = &position
	return r
}

func (r ApiDcimDevicesListRequest) PositionGt(positionGt []int32) ApiDcimDevicesListRequest {
	r.positionGt = &positionGt
	return r
}

func (r ApiDcimDevicesListRequest) PositionGte(positionGte []int32) ApiDcimDevicesListRequest {
	r.positionGte = &positionGte
	return r
}

func (r ApiDcimDevicesListRequest) PositionLt(positionLt []int32) ApiDcimDevicesListRequest {
	r.positionLt = &positionLt
	return r
}

func (r ApiDcimDevicesListRequest) PositionLte(positionLte []int32) ApiDcimDevicesListRequest {
	r.positionLte = &positionLte
	return r
}

func (r ApiDcimDevicesListRequest) PositionN(positionN []int32) ApiDcimDevicesListRequest {
	r.positionN = &positionN
	return r
}

// Has power outlets
func (r ApiDcimDevicesListRequest) PowerOutlets(powerOutlets bool) ApiDcimDevicesListRequest {
	r.powerOutlets = &powerOutlets
	return r
}

// Has power ports
func (r ApiDcimDevicesListRequest) PowerPorts(powerPorts bool) ApiDcimDevicesListRequest {
	r.powerPorts = &powerPorts
	return r
}

// Search
func (r ApiDcimDevicesListRequest) Q(q string) ApiDcimDevicesListRequest {
	r.q = &q
	return r
}

// Rack group (ID)
func (r ApiDcimDevicesListRequest) RackGroupId(rackGroupId []string) ApiDcimDevicesListRequest {
	r.rackGroupId = &rackGroupId
	return r
}

// Rack group (ID)
func (r ApiDcimDevicesListRequest) RackGroupIdN(rackGroupIdN []string) ApiDcimDevicesListRequest {
	r.rackGroupIdN = &rackGroupIdN
	return r
}

// Rack (ID)
func (r ApiDcimDevicesListRequest) RackId(rackId []string) ApiDcimDevicesListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimDevicesListRequest) RackIdN(rackIdN []string) ApiDcimDevicesListRequest {
	r.rackIdN = &rackIdN
	return r
}

// Region (slug)
func (r ApiDcimDevicesListRequest) Region(region []string) ApiDcimDevicesListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimDevicesListRequest) RegionN(regionN []string) ApiDcimDevicesListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimDevicesListRequest) RegionId(regionId []string) ApiDcimDevicesListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimDevicesListRequest) RegionIdN(regionIdN []string) ApiDcimDevicesListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiDcimDevicesListRequest) Role(role []string) ApiDcimDevicesListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimDevicesListRequest) RoleN(roleN []string) ApiDcimDevicesListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimDevicesListRequest) RoleId(roleId []string) ApiDcimDevicesListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimDevicesListRequest) RoleIdN(roleIdN []string) ApiDcimDevicesListRequest {
	r.roleIdN = &roleIdN
	return r
}

// Secrets group (slug)
func (r ApiDcimDevicesListRequest) SecretsGroup(secretsGroup []string) ApiDcimDevicesListRequest {
	r.secretsGroup = &secretsGroup
	return r
}

// Secrets group (slug)
func (r ApiDcimDevicesListRequest) SecretsGroupN(secretsGroupN []string) ApiDcimDevicesListRequest {
	r.secretsGroupN = &secretsGroupN
	return r
}

// Secrets group (ID)
func (r ApiDcimDevicesListRequest) SecretsGroupId(secretsGroupId []string) ApiDcimDevicesListRequest {
	r.secretsGroupId = &secretsGroupId
	return r
}

// Secrets group (ID)
func (r ApiDcimDevicesListRequest) SecretsGroupIdN(secretsGroupIdN []string) ApiDcimDevicesListRequest {
	r.secretsGroupIdN = &secretsGroupIdN
	return r
}

func (r ApiDcimDevicesListRequest) Serial(serial string) ApiDcimDevicesListRequest {
	r.serial = &serial
	return r
}

// Site name (slug)
func (r ApiDcimDevicesListRequest) Site(site []string) ApiDcimDevicesListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimDevicesListRequest) SiteN(siteN []string) ApiDcimDevicesListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimDevicesListRequest) SiteId(siteId []string) ApiDcimDevicesListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimDevicesListRequest) SiteIdN(siteIdN []string) ApiDcimDevicesListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimDevicesListRequest) Status(status []string) ApiDcimDevicesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimDevicesListRequest) StatusN(statusN []string) ApiDcimDevicesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimDevicesListRequest) Tag(tag []string) ApiDcimDevicesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimDevicesListRequest) TagN(tagN []string) ApiDcimDevicesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimDevicesListRequest) Tenant(tenant []string) ApiDcimDevicesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimDevicesListRequest) TenantN(tenantN []string) ApiDcimDevicesListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiDcimDevicesListRequest) TenantGroup(tenantGroup []string) ApiDcimDevicesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiDcimDevicesListRequest) TenantGroupN(tenantGroupN []string) ApiDcimDevicesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiDcimDevicesListRequest) TenantGroupId(tenantGroupId []string) ApiDcimDevicesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiDcimDevicesListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimDevicesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimDevicesListRequest) TenantId(tenantId []*string) ApiDcimDevicesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimDevicesListRequest) TenantIdN(tenantIdN []*string) ApiDcimDevicesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimDevicesListRequest) VcPosition(vcPosition []int32) ApiDcimDevicesListRequest {
	r.vcPosition = &vcPosition
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionGt(vcPositionGt []int32) ApiDcimDevicesListRequest {
	r.vcPositionGt = &vcPositionGt
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionGte(vcPositionGte []int32) ApiDcimDevicesListRequest {
	r.vcPositionGte = &vcPositionGte
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionLt(vcPositionLt []int32) ApiDcimDevicesListRequest {
	r.vcPositionLt = &vcPositionLt
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionLte(vcPositionLte []int32) ApiDcimDevicesListRequest {
	r.vcPositionLte = &vcPositionLte
	return r
}

func (r ApiDcimDevicesListRequest) VcPositionN(vcPositionN []int32) ApiDcimDevicesListRequest {
	r.vcPositionN = &vcPositionN
	return r
}

func (r ApiDcimDevicesListRequest) VcPriority(vcPriority []int32) ApiDcimDevicesListRequest {
	r.vcPriority = &vcPriority
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityGt(vcPriorityGt []int32) ApiDcimDevicesListRequest {
	r.vcPriorityGt = &vcPriorityGt
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityGte(vcPriorityGte []int32) ApiDcimDevicesListRequest {
	r.vcPriorityGte = &vcPriorityGte
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityLt(vcPriorityLt []int32) ApiDcimDevicesListRequest {
	r.vcPriorityLt = &vcPriorityLt
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityLte(vcPriorityLte []int32) ApiDcimDevicesListRequest {
	r.vcPriorityLte = &vcPriorityLte
	return r
}

func (r ApiDcimDevicesListRequest) VcPriorityN(vcPriorityN []int32) ApiDcimDevicesListRequest {
	r.vcPriorityN = &vcPriorityN
	return r
}

// Virtual chassis (ID)
func (r ApiDcimDevicesListRequest) VirtualChassisId(virtualChassisId []string) ApiDcimDevicesListRequest {
	r.virtualChassisId = &virtualChassisId
	return r
}

// Virtual chassis (ID)
func (r ApiDcimDevicesListRequest) VirtualChassisIdN(virtualChassisIdN []string) ApiDcimDevicesListRequest {
	r.virtualChassisIdN = &virtualChassisIdN
	return r
}

// Is a virtual chassis member
func (r ApiDcimDevicesListRequest) VirtualChassisMember(virtualChassisMember bool) ApiDcimDevicesListRequest {
	r.virtualChassisMember = &virtualChassisMember
	return r
}

func (r ApiDcimDevicesListRequest) Execute() (*PaginatedDeviceWithConfigContextList, *http.Response, error) {
	return r.ApiService.DcimDevicesListExecute(r)
}

/*
DcimDevicesList Method for DcimDevicesList

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimDevicesListRequest
*/
func (a *DcimApiService) DcimDevicesList(ctx context.Context) ApiDcimDevicesListRequest {
	return ApiDcimDevicesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDeviceWithConfigContextList
func (a *DcimApiService) DcimDevicesListExecute(r ApiDcimDevicesListRequest) (*PaginatedDeviceWithConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeviceWithConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__iew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIre != nil {
		t := *r.assetTagIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__isw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__n", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__niew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNire != nil {
		t := *r.assetTagNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nisw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNre != nil {
		t := *r.assetTagNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nre", parameterToString(t, "multi"))
		}
	}
	if r.assetTagRe != nil {
		t := *r.assetTagRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__re", parameterToString(t, "multi"))
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id__n", parameterToString(t, "multi"))
		}
	}
	if r.consolePorts != nil {
		localVarQueryParams.Add("console_ports", parameterToString(*r.consolePorts, ""))
	}
	if r.consoleServerPorts != nil {
		localVarQueryParams.Add("console_server_ports", parameterToString(*r.consoleServerPorts, ""))
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.deviceBays != nil {
		localVarQueryParams.Add("device_bays", parameterToString(*r.deviceBays, ""))
	}
	if r.deviceTypeId != nil {
		t := *r.deviceTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_type_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_type_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceTypeIdN != nil {
		t := *r.deviceTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_type_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_type_id__n", parameterToString(t, "multi"))
		}
	}
	if r.face != nil {
		localVarQueryParams.Add("face", parameterToString(*r.face, ""))
	}
	if r.faceN != nil {
		localVarQueryParams.Add("face__n", parameterToString(*r.faceN, ""))
	}
	if r.hasConsolePorts != nil {
		localVarQueryParams.Add("has_console_ports", parameterToString(*r.hasConsolePorts, ""))
	}
	if r.hasConsoleServerPorts != nil {
		localVarQueryParams.Add("has_console_server_ports", parameterToString(*r.hasConsoleServerPorts, ""))
	}
	if r.hasDeviceBays != nil {
		localVarQueryParams.Add("has_device_bays", parameterToString(*r.hasDeviceBays, ""))
	}
	if r.hasFrontPorts != nil {
		localVarQueryParams.Add("has_front_ports", parameterToString(*r.hasFrontPorts, ""))
	}
	if r.hasInterfaces != nil {
		localVarQueryParams.Add("has_interfaces", parameterToString(*r.hasInterfaces, ""))
	}
	if r.hasPowerOutlets != nil {
		localVarQueryParams.Add("has_power_outlets", parameterToString(*r.hasPowerOutlets, ""))
	}
	if r.hasPowerPorts != nil {
		localVarQueryParams.Add("has_power_ports", parameterToString(*r.hasPowerPorts, ""))
	}
	if r.hasPrimaryIp != nil {
		localVarQueryParams.Add("has_primary_ip", parameterToString(*r.hasPrimaryIp, ""))
	}
	if r.hasRearPorts != nil {
		localVarQueryParams.Add("has_rear_ports", parameterToString(*r.hasRearPorts, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.interfaces != nil {
		localVarQueryParams.Add("interfaces", parameterToString(*r.interfaces, ""))
	}
	if r.isFullDepth != nil {
		localVarQueryParams.Add("is_full_depth", parameterToString(*r.isFullDepth, ""))
	}
	if r.isVirtualChassisMember != nil {
		localVarQueryParams.Add("is_virtual_chassis_member", parameterToString(*r.isVirtualChassisMember, ""))
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.localContextData != nil {
		localVarQueryParams.Add("local_context_data", parameterToString(*r.localContextData, ""))
	}
	if r.localContextSchema != nil {
		t := *r.localContextSchema
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema", parameterToString(t, "multi"))
		}
	}
	if r.localContextSchemaN != nil {
		t := *r.localContextSchemaN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema__n", parameterToString(t, "multi"))
		}
	}
	if r.localContextSchemaId != nil {
		t := *r.localContextSchemaId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema_id", parameterToString(t, "multi"))
		}
	}
	if r.localContextSchemaIdN != nil {
		t := *r.localContextSchemaIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema_id__n", parameterToString(t, "multi"))
		}
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__iew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIre != nil {
		t := *r.macAddressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__isw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__n", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__niew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNire != nil {
		t := *r.macAddressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nisw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNre != nil {
		t := *r.macAddressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nre", parameterToString(t, "multi"))
		}
	}
	if r.macAddressRe != nil {
		t := *r.macAddressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__re", parameterToString(t, "multi"))
		}
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer__n", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id__n", parameterToString(t, "multi"))
		}
	}
	if r.model != nil {
		t := *r.model
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model", parameterToString(t, "multi"))
		}
	}
	if r.modelN != nil {
		t := *r.modelN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("model__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("model__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.passThroughPorts != nil {
		localVarQueryParams.Add("pass_through_ports", parameterToString(*r.passThroughPorts, ""))
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform", parameterToString(t, "multi"))
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform__n", parameterToString(t, "multi"))
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform_id", parameterToString(t, "multi"))
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform_id__n", parameterToString(t, "multi"))
		}
	}
	if r.position != nil {
		t := *r.position
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("position", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("position", parameterToString(t, "multi"))
		}
	}
	if r.positionGt != nil {
		t := *r.positionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("position__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("position__gt", parameterToString(t, "multi"))
		}
	}
	if r.positionGte != nil {
		t := *r.positionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("position__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("position__gte", parameterToString(t, "multi"))
		}
	}
	if r.positionLt != nil {
		t := *r.positionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("position__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("position__lt", parameterToString(t, "multi"))
		}
	}
	if r.positionLte != nil {
		t := *r.positionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("position__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("position__lte", parameterToString(t, "multi"))
		}
	}
	if r.positionN != nil {
		t := *r.positionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("position__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("position__n", parameterToString(t, "multi"))
		}
	}
	if r.powerOutlets != nil {
		localVarQueryParams.Add("power_outlets", parameterToString(*r.powerOutlets, ""))
	}
	if r.powerPorts != nil {
		localVarQueryParams.Add("power_ports", parameterToString(*r.powerPorts, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.rackGroupId != nil {
		t := *r.rackGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_group_id", parameterToString(t, "multi"))
		}
	}
	if r.rackGroupIdN != nil {
		t := *r.rackGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id", parameterToString(t, "multi"))
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id__n", parameterToString(t, "multi"))
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role", parameterToString(t, "multi"))
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role__n", parameterToString(t, "multi"))
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id", parameterToString(t, "multi"))
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id__n", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroup != nil {
		t := *r.secretsGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroupN != nil {
		t := *r.secretsGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group__n", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroupId != nil {
		t := *r.secretsGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group_id", parameterToString(t, "multi"))
		}
	}
	if r.secretsGroupIdN != nil {
		t := *r.secretsGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("secrets_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("secrets_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	if r.vcPosition != nil {
		t := *r.vcPosition
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_position", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_position", parameterToString(t, "multi"))
		}
	}
	if r.vcPositionGt != nil {
		t := *r.vcPositionGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_position__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_position__gt", parameterToString(t, "multi"))
		}
	}
	if r.vcPositionGte != nil {
		t := *r.vcPositionGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_position__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_position__gte", parameterToString(t, "multi"))
		}
	}
	if r.vcPositionLt != nil {
		t := *r.vcPositionLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_position__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_position__lt", parameterToString(t, "multi"))
		}
	}
	if r.vcPositionLte != nil {
		t := *r.vcPositionLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_position__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_position__lte", parameterToString(t, "multi"))
		}
	}
	if r.vcPositionN != nil {
		t := *r.vcPositionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_position__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_position__n", parameterToString(t, "multi"))
		}
	}
	if r.vcPriority != nil {
		t := *r.vcPriority
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_priority", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_priority", parameterToString(t, "multi"))
		}
	}
	if r.vcPriorityGt != nil {
		t := *r.vcPriorityGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_priority__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_priority__gt", parameterToString(t, "multi"))
		}
	}
	if r.vcPriorityGte != nil {
		t := *r.vcPriorityGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_priority__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_priority__gte", parameterToString(t, "multi"))
		}
	}
	if r.vcPriorityLt != nil {
		t := *r.vcPriorityLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_priority__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_priority__lt", parameterToString(t, "multi"))
		}
	}
	if r.vcPriorityLte != nil {
		t := *r.vcPriorityLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_priority__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_priority__lte", parameterToString(t, "multi"))
		}
	}
	if r.vcPriorityN != nil {
		t := *r.vcPriorityN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vc_priority__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vc_priority__n", parameterToString(t, "multi"))
		}
	}
	if r.virtualChassisId != nil {
		t := *r.virtualChassisId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("virtual_chassis_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("virtual_chassis_id", parameterToString(t, "multi"))
		}
	}
	if r.virtualChassisIdN != nil {
		t := *r.virtualChassisIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("virtual_chassis_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("virtual_chassis_id__n", parameterToString(t, "multi"))
		}
	}
	if r.virtualChassisMember != nil {
		localVarQueryParams.Add("virtual_chassis_member", parameterToString(*r.virtualChassisMember, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesNapalmRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	method *string
}

func (r ApiDcimDevicesNapalmRetrieveRequest) Method(method string) ApiDcimDevicesNapalmRetrieveRequest {
	r.method = &method
	return r
}

func (r ApiDcimDevicesNapalmRetrieveRequest) Execute() (*DeviceNAPALM, *http.Response, error) {
	return r.ApiService.DcimDevicesNapalmRetrieveExecute(r)
}

/*
DcimDevicesNapalmRetrieve Method for DcimDevicesNapalmRetrieve

Execute a NAPALM method on a Device

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device.
 @return ApiDcimDevicesNapalmRetrieveRequest
*/
func (a *DcimApiService) DcimDevicesNapalmRetrieve(ctx context.Context, id string) ApiDcimDevicesNapalmRetrieveRequest {
	return ApiDcimDevicesNapalmRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceNAPALM
func (a *DcimApiService) DcimDevicesNapalmRetrieveExecute(r ApiDcimDevicesNapalmRetrieveRequest) (*DeviceNAPALM, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceNAPALM
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesNapalmRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/{id}/napalm/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.method == nil {
		return localVarReturnValue, nil, reportError("method is required and must be specified")
	}

	localVarQueryParams.Add("method", parameterToString(*r.method, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableDeviceWithConfigContext *PatchedWritableDeviceWithConfigContext
}

func (r ApiDcimDevicesPartialUpdateRequest) PatchedWritableDeviceWithConfigContext(patchedWritableDeviceWithConfigContext PatchedWritableDeviceWithConfigContext) ApiDcimDevicesPartialUpdateRequest {
	r.patchedWritableDeviceWithConfigContext = &patchedWritableDeviceWithConfigContext
	return r
}

func (r ApiDcimDevicesPartialUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesPartialUpdateExecute(r)
}

/*
DcimDevicesPartialUpdate Method for DcimDevicesPartialUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device.
 @return ApiDcimDevicesPartialUpdateRequest
*/
func (a *DcimApiService) DcimDevicesPartialUpdate(ctx context.Context, id string) ApiDcimDevicesPartialUpdateRequest {
	return ApiDcimDevicesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceWithConfigContext
func (a *DcimApiService) DcimDevicesPartialUpdateExecute(r ApiDcimDevicesPartialUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableDeviceWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimDevicesRetrieveRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesRetrieveExecute(r)
}

/*
DcimDevicesRetrieve Method for DcimDevicesRetrieve

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device.
 @return ApiDcimDevicesRetrieveRequest
*/
func (a *DcimApiService) DcimDevicesRetrieve(ctx context.Context, id string) ApiDcimDevicesRetrieveRequest {
	return ApiDcimDevicesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceWithConfigContext
func (a *DcimApiService) DcimDevicesRetrieveExecute(r ApiDcimDevicesRetrieveRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimDevicesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableDeviceWithConfigContext *WritableDeviceWithConfigContext
}

func (r ApiDcimDevicesUpdateRequest) WritableDeviceWithConfigContext(writableDeviceWithConfigContext WritableDeviceWithConfigContext) ApiDcimDevicesUpdateRequest {
	r.writableDeviceWithConfigContext = &writableDeviceWithConfigContext
	return r
}

func (r ApiDcimDevicesUpdateRequest) Execute() (*DeviceWithConfigContext, *http.Response, error) {
	return r.ApiService.DcimDevicesUpdateExecute(r)
}

/*
DcimDevicesUpdate Method for DcimDevicesUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this device.
 @return ApiDcimDevicesUpdateRequest
*/
func (a *DcimApiService) DcimDevicesUpdate(ctx context.Context, id string) ApiDcimDevicesUpdateRequest {
	return ApiDcimDevicesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DeviceWithConfigContext
func (a *DcimApiService) DcimDevicesUpdateExecute(r ApiDcimDevicesUpdateRequest) (*DeviceWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeviceWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimDevicesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/devices/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableDeviceWithConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableDeviceWithConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableDeviceWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimFrontPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesBulkDestroyExecute(r)
}

/*
DcimFrontPortTemplatesBulkDestroy Method for DcimFrontPortTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesBulkDestroy(ctx context.Context) ApiDcimFrontPortTemplatesBulkDestroyRequest {
	return ApiDcimFrontPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimFrontPortTemplatesBulkDestroyExecute(r ApiDcimFrontPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableFrontPortTemplate *PatchedWritableFrontPortTemplate
}

func (r ApiDcimFrontPortTemplatesBulkPartialUpdateRequest) PatchedWritableFrontPortTemplate(patchedWritableFrontPortTemplate PatchedWritableFrontPortTemplate) ApiDcimFrontPortTemplatesBulkPartialUpdateRequest {
	r.patchedWritableFrontPortTemplate = &patchedWritableFrontPortTemplate
	return r
}

func (r ApiDcimFrontPortTemplatesBulkPartialUpdateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimFrontPortTemplatesBulkPartialUpdate Method for DcimFrontPortTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimFrontPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimFrontPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrontPortTemplate
func (a *DcimApiService) DcimFrontPortTemplatesBulkPartialUpdateExecute(r ApiDcimFrontPortTemplatesBulkPartialUpdateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableFrontPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableFrontPortTemplate *WritableFrontPortTemplate
}

func (r ApiDcimFrontPortTemplatesBulkUpdateRequest) WritableFrontPortTemplate(writableFrontPortTemplate WritableFrontPortTemplate) ApiDcimFrontPortTemplatesBulkUpdateRequest {
	r.writableFrontPortTemplate = &writableFrontPortTemplate
	return r
}

func (r ApiDcimFrontPortTemplatesBulkUpdateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesBulkUpdateExecute(r)
}

/*
DcimFrontPortTemplatesBulkUpdate Method for DcimFrontPortTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesBulkUpdate(ctx context.Context) ApiDcimFrontPortTemplatesBulkUpdateRequest {
	return ApiDcimFrontPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrontPortTemplate
func (a *DcimApiService) DcimFrontPortTemplatesBulkUpdateExecute(r ApiDcimFrontPortTemplatesBulkUpdateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableFrontPortTemplate *WritableFrontPortTemplate
}

func (r ApiDcimFrontPortTemplatesCreateRequest) WritableFrontPortTemplate(writableFrontPortTemplate WritableFrontPortTemplate) ApiDcimFrontPortTemplatesCreateRequest {
	r.writableFrontPortTemplate = &writableFrontPortTemplate
	return r
}

func (r ApiDcimFrontPortTemplatesCreateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesCreateExecute(r)
}

/*
DcimFrontPortTemplatesCreate Method for DcimFrontPortTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortTemplatesCreateRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesCreate(ctx context.Context) ApiDcimFrontPortTemplatesCreateRequest {
	return ApiDcimFrontPortTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrontPortTemplate
func (a *DcimApiService) DcimFrontPortTemplatesCreateExecute(r ApiDcimFrontPortTemplatesCreateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimFrontPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesDestroyExecute(r)
}

/*
DcimFrontPortTemplatesDestroy Method for DcimFrontPortTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port template.
 @return ApiDcimFrontPortTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesDestroy(ctx context.Context, id string) ApiDcimFrontPortTemplatesDestroyRequest {
	return ApiDcimFrontPortTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimFrontPortTemplatesDestroyExecute(r ApiDcimFrontPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	type_ *string
	typeN *string
}

// Device type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimFrontPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimFrontPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimFrontPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Id(id []string) ApiDcimFrontPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdIc(idIc []string) ApiDcimFrontPortTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdIe(idIe []string) ApiDcimFrontPortTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdIew(idIew []string) ApiDcimFrontPortTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdIre(idIre []string) ApiDcimFrontPortTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdIsw(idIsw []string) ApiDcimFrontPortTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdN(idN []string) ApiDcimFrontPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdNic(idNic []string) ApiDcimFrontPortTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdNie(idNie []string) ApiDcimFrontPortTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdNiew(idNiew []string) ApiDcimFrontPortTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdNire(idNire []string) ApiDcimFrontPortTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdNisw(idNisw []string) ApiDcimFrontPortTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdNre(idNre []string) ApiDcimFrontPortTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) IdRe(idRe []string) ApiDcimFrontPortTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimFrontPortTemplatesListRequest) Limit(limit int32) ApiDcimFrontPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Name(name []string) ApiDcimFrontPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIre(nameIre []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameN(nameN []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNire(nameNire []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameNre(nameNre []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) NameRe(nameRe []string) ApiDcimFrontPortTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimFrontPortTemplatesListRequest) Offset(offset int32) ApiDcimFrontPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimFrontPortTemplatesListRequest) Q(q string) ApiDcimFrontPortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Type_(type_ string) ApiDcimFrontPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) TypeN(typeN string) ApiDcimFrontPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimFrontPortTemplatesListRequest) Execute() (*PaginatedFrontPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesListExecute(r)
}

/*
DcimFrontPortTemplatesList Method for DcimFrontPortTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortTemplatesListRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesList(ctx context.Context) ApiDcimFrontPortTemplatesListRequest {
	return ApiDcimFrontPortTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedFrontPortTemplateList
func (a *DcimApiService) DcimFrontPortTemplatesListExecute(r ApiDcimFrontPortTemplatesListRequest) (*PaginatedFrontPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedFrontPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableFrontPortTemplate *PatchedWritableFrontPortTemplate
}

func (r ApiDcimFrontPortTemplatesPartialUpdateRequest) PatchedWritableFrontPortTemplate(patchedWritableFrontPortTemplate PatchedWritableFrontPortTemplate) ApiDcimFrontPortTemplatesPartialUpdateRequest {
	r.patchedWritableFrontPortTemplate = &patchedWritableFrontPortTemplate
	return r
}

func (r ApiDcimFrontPortTemplatesPartialUpdateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesPartialUpdateExecute(r)
}

/*
DcimFrontPortTemplatesPartialUpdate Method for DcimFrontPortTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port template.
 @return ApiDcimFrontPortTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimFrontPortTemplatesPartialUpdateRequest {
	return ApiDcimFrontPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPortTemplate
func (a *DcimApiService) DcimFrontPortTemplatesPartialUpdateExecute(r ApiDcimFrontPortTemplatesPartialUpdateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableFrontPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimFrontPortTemplatesRetrieveRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesRetrieveExecute(r)
}

/*
DcimFrontPortTemplatesRetrieve Method for DcimFrontPortTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port template.
 @return ApiDcimFrontPortTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesRetrieve(ctx context.Context, id string) ApiDcimFrontPortTemplatesRetrieveRequest {
	return ApiDcimFrontPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPortTemplate
func (a *DcimApiService) DcimFrontPortTemplatesRetrieveExecute(r ApiDcimFrontPortTemplatesRetrieveRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableFrontPortTemplate *WritableFrontPortTemplate
}

func (r ApiDcimFrontPortTemplatesUpdateRequest) WritableFrontPortTemplate(writableFrontPortTemplate WritableFrontPortTemplate) ApiDcimFrontPortTemplatesUpdateRequest {
	r.writableFrontPortTemplate = &writableFrontPortTemplate
	return r
}

func (r ApiDcimFrontPortTemplatesUpdateRequest) Execute() (*FrontPortTemplate, *http.Response, error) {
	return r.ApiService.DcimFrontPortTemplatesUpdateExecute(r)
}

/*
DcimFrontPortTemplatesUpdate Method for DcimFrontPortTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port template.
 @return ApiDcimFrontPortTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortTemplatesUpdate(ctx context.Context, id string) ApiDcimFrontPortTemplatesUpdateRequest {
	return ApiDcimFrontPortTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPortTemplate
func (a *DcimApiService) DcimFrontPortTemplatesUpdateExecute(r ApiDcimFrontPortTemplatesUpdateRequest) (*FrontPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableFrontPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimFrontPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortsBulkDestroyExecute(r)
}

/*
DcimFrontPortsBulkDestroy Method for DcimFrontPortsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortsBulkDestroyRequest
*/
func (a *DcimApiService) DcimFrontPortsBulkDestroy(ctx context.Context) ApiDcimFrontPortsBulkDestroyRequest {
	return ApiDcimFrontPortsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimFrontPortsBulkDestroyExecute(r ApiDcimFrontPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableFrontPort *PatchedWritableFrontPort
}

func (r ApiDcimFrontPortsBulkPartialUpdateRequest) PatchedWritableFrontPort(patchedWritableFrontPort PatchedWritableFrontPort) ApiDcimFrontPortsBulkPartialUpdateRequest {
	r.patchedWritableFrontPort = &patchedWritableFrontPort
	return r
}

func (r ApiDcimFrontPortsBulkPartialUpdateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsBulkPartialUpdateExecute(r)
}

/*
DcimFrontPortsBulkPartialUpdate Method for DcimFrontPortsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortsBulkPartialUpdate(ctx context.Context) ApiDcimFrontPortsBulkPartialUpdateRequest {
	return ApiDcimFrontPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsBulkPartialUpdateExecute(r ApiDcimFrontPortsBulkPartialUpdateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableFrontPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableFrontPort *WritableFrontPort
}

func (r ApiDcimFrontPortsBulkUpdateRequest) WritableFrontPort(writableFrontPort WritableFrontPort) ApiDcimFrontPortsBulkUpdateRequest {
	r.writableFrontPort = &writableFrontPort
	return r
}

func (r ApiDcimFrontPortsBulkUpdateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsBulkUpdateExecute(r)
}

/*
DcimFrontPortsBulkUpdate Method for DcimFrontPortsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortsBulkUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortsBulkUpdate(ctx context.Context) ApiDcimFrontPortsBulkUpdateRequest {
	return ApiDcimFrontPortsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsBulkUpdateExecute(r ApiDcimFrontPortsBulkUpdateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPort == nil {
		return localVarReturnValue, nil, reportError("writableFrontPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableFrontPort *WritableFrontPort
}

func (r ApiDcimFrontPortsCreateRequest) WritableFrontPort(writableFrontPort WritableFrontPort) ApiDcimFrontPortsCreateRequest {
	r.writableFrontPort = &writableFrontPort
	return r
}

func (r ApiDcimFrontPortsCreateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsCreateExecute(r)
}

/*
DcimFrontPortsCreate Method for DcimFrontPortsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortsCreateRequest
*/
func (a *DcimApiService) DcimFrontPortsCreate(ctx context.Context) ApiDcimFrontPortsCreateRequest {
	return ApiDcimFrontPortsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsCreateExecute(r ApiDcimFrontPortsCreateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPort == nil {
		return localVarReturnValue, nil, reportError("writableFrontPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimFrontPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimFrontPortsDestroyExecute(r)
}

/*
DcimFrontPortsDestroy Method for DcimFrontPortsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port.
 @return ApiDcimFrontPortsDestroyRequest
*/
func (a *DcimApiService) DcimFrontPortsDestroy(ctx context.Context, id string) ApiDcimFrontPortsDestroyRequest {
	return ApiDcimFrontPortsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimFrontPortsDestroyExecute(r ApiDcimFrontPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimFrontPortsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	cabled *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *string
	typeN *string
}

func (r ApiDcimFrontPortsListRequest) Cabled(cabled bool) ApiDcimFrontPortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimFrontPortsListRequest) Description(description []string) ApiDcimFrontPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimFrontPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimFrontPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimFrontPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIre(descriptionIre []string) ApiDcimFrontPortsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimFrontPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionN(descriptionN []string) ApiDcimFrontPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimFrontPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimFrontPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimFrontPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNire(descriptionNire []string) ApiDcimFrontPortsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimFrontPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionNre(descriptionNre []string) ApiDcimFrontPortsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimFrontPortsListRequest) DescriptionRe(descriptionRe []string) ApiDcimFrontPortsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimFrontPortsListRequest) Device(device []*string) ApiDcimFrontPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimFrontPortsListRequest) DeviceN(deviceN []*string) ApiDcimFrontPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimFrontPortsListRequest) DeviceId(deviceId []string) ApiDcimFrontPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimFrontPortsListRequest) DeviceIdN(deviceIdN []string) ApiDcimFrontPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Id(id []string) ApiDcimFrontPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimFrontPortsListRequest) IdIc(idIc []string) ApiDcimFrontPortsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimFrontPortsListRequest) IdIe(idIe []string) ApiDcimFrontPortsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimFrontPortsListRequest) IdIew(idIew []string) ApiDcimFrontPortsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimFrontPortsListRequest) IdIre(idIre []string) ApiDcimFrontPortsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimFrontPortsListRequest) IdIsw(idIsw []string) ApiDcimFrontPortsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) IdN(idN []string) ApiDcimFrontPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimFrontPortsListRequest) IdNic(idNic []string) ApiDcimFrontPortsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimFrontPortsListRequest) IdNie(idNie []string) ApiDcimFrontPortsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimFrontPortsListRequest) IdNiew(idNiew []string) ApiDcimFrontPortsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) IdNire(idNire []string) ApiDcimFrontPortsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimFrontPortsListRequest) IdNisw(idNisw []string) ApiDcimFrontPortsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimFrontPortsListRequest) IdNre(idNre []string) ApiDcimFrontPortsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimFrontPortsListRequest) IdRe(idRe []string) ApiDcimFrontPortsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimFrontPortsListRequest) Limit(limit int32) ApiDcimFrontPortsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimFrontPortsListRequest) Name(name []string) ApiDcimFrontPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIc(nameIc []string) ApiDcimFrontPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIe(nameIe []string) ApiDcimFrontPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIew(nameIew []string) ApiDcimFrontPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIre(nameIre []string) ApiDcimFrontPortsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimFrontPortsListRequest) NameIsw(nameIsw []string) ApiDcimFrontPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimFrontPortsListRequest) NameN(nameN []string) ApiDcimFrontPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNic(nameNic []string) ApiDcimFrontPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNie(nameNie []string) ApiDcimFrontPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNiew(nameNiew []string) ApiDcimFrontPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNire(nameNire []string) ApiDcimFrontPortsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNisw(nameNisw []string) ApiDcimFrontPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimFrontPortsListRequest) NameNre(nameNre []string) ApiDcimFrontPortsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimFrontPortsListRequest) NameRe(nameRe []string) ApiDcimFrontPortsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimFrontPortsListRequest) Offset(offset int32) ApiDcimFrontPortsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimFrontPortsListRequest) Q(q string) ApiDcimFrontPortsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimFrontPortsListRequest) Region(region []string) ApiDcimFrontPortsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimFrontPortsListRequest) RegionN(regionN []string) ApiDcimFrontPortsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimFrontPortsListRequest) RegionId(regionId []string) ApiDcimFrontPortsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimFrontPortsListRequest) RegionIdN(regionIdN []string) ApiDcimFrontPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimFrontPortsListRequest) Site(site []string) ApiDcimFrontPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimFrontPortsListRequest) SiteN(siteN []string) ApiDcimFrontPortsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimFrontPortsListRequest) SiteId(siteId []string) ApiDcimFrontPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimFrontPortsListRequest) SiteIdN(siteIdN []string) ApiDcimFrontPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimFrontPortsListRequest) Tag(tag []string) ApiDcimFrontPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimFrontPortsListRequest) TagN(tagN []string) ApiDcimFrontPortsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimFrontPortsListRequest) Type_(type_ string) ApiDcimFrontPortsListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimFrontPortsListRequest) TypeN(typeN string) ApiDcimFrontPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimFrontPortsListRequest) Execute() (*PaginatedFrontPortList, *http.Response, error) {
	return r.ApiService.DcimFrontPortsListExecute(r)
}

/*
DcimFrontPortsList Method for DcimFrontPortsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimFrontPortsListRequest
*/
func (a *DcimApiService) DcimFrontPortsList(ctx context.Context) ApiDcimFrontPortsListRequest {
	return ApiDcimFrontPortsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedFrontPortList
func (a *DcimApiService) DcimFrontPortsListExecute(r ApiDcimFrontPortsListRequest) (*PaginatedFrontPortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedFrontPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableFrontPort *PatchedWritableFrontPort
}

func (r ApiDcimFrontPortsPartialUpdateRequest) PatchedWritableFrontPort(patchedWritableFrontPort PatchedWritableFrontPort) ApiDcimFrontPortsPartialUpdateRequest {
	r.patchedWritableFrontPort = &patchedWritableFrontPort
	return r
}

func (r ApiDcimFrontPortsPartialUpdateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsPartialUpdateExecute(r)
}

/*
DcimFrontPortsPartialUpdate Method for DcimFrontPortsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port.
 @return ApiDcimFrontPortsPartialUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortsPartialUpdate(ctx context.Context, id string) ApiDcimFrontPortsPartialUpdateRequest {
	return ApiDcimFrontPortsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsPartialUpdateExecute(r ApiDcimFrontPortsPartialUpdateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableFrontPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsPathsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimFrontPortsPathsRetrieveRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsPathsRetrieveExecute(r)
}

/*
DcimFrontPortsPathsRetrieve Method for DcimFrontPortsPathsRetrieve

Return all CablePaths which traverse a given pass-through port.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port.
 @return ApiDcimFrontPortsPathsRetrieveRequest
*/
func (a *DcimApiService) DcimFrontPortsPathsRetrieve(ctx context.Context, id string) ApiDcimFrontPortsPathsRetrieveRequest {
	return ApiDcimFrontPortsPathsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsPathsRetrieveExecute(r ApiDcimFrontPortsPathsRetrieveRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsPathsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/{id}/paths/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimFrontPortsRetrieveRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsRetrieveExecute(r)
}

/*
DcimFrontPortsRetrieve Method for DcimFrontPortsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port.
 @return ApiDcimFrontPortsRetrieveRequest
*/
func (a *DcimApiService) DcimFrontPortsRetrieve(ctx context.Context, id string) ApiDcimFrontPortsRetrieveRequest {
	return ApiDcimFrontPortsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsRetrieveExecute(r ApiDcimFrontPortsRetrieveRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimFrontPortsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableFrontPort *WritableFrontPort
}

func (r ApiDcimFrontPortsUpdateRequest) WritableFrontPort(writableFrontPort WritableFrontPort) ApiDcimFrontPortsUpdateRequest {
	r.writableFrontPort = &writableFrontPort
	return r
}

func (r ApiDcimFrontPortsUpdateRequest) Execute() (*FrontPort, *http.Response, error) {
	return r.ApiService.DcimFrontPortsUpdateExecute(r)
}

/*
DcimFrontPortsUpdate Method for DcimFrontPortsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this front port.
 @return ApiDcimFrontPortsUpdateRequest
*/
func (a *DcimApiService) DcimFrontPortsUpdate(ctx context.Context, id string) ApiDcimFrontPortsUpdateRequest {
	return ApiDcimFrontPortsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return FrontPort
func (a *DcimApiService) DcimFrontPortsUpdateExecute(r ApiDcimFrontPortsUpdateRequest) (*FrontPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FrontPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimFrontPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/front-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableFrontPort == nil {
		return localVarReturnValue, nil, reportError("writableFrontPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableFrontPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceConnectionsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	device *[]string
	deviceId *[]string
	limit *int32
	offset *int32
	site *string
}

// Device (name)
func (r ApiDcimInterfaceConnectionsListRequest) Device(device []string) ApiDcimInterfaceConnectionsListRequest {
	r.device = &device
	return r
}

// Device (ID)
func (r ApiDcimInterfaceConnectionsListRequest) DeviceId(deviceId []string) ApiDcimInterfaceConnectionsListRequest {
	r.deviceId = &deviceId
	return r
}

// Number of results to return per page.
func (r ApiDcimInterfaceConnectionsListRequest) Limit(limit int32) ApiDcimInterfaceConnectionsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInterfaceConnectionsListRequest) Offset(offset int32) ApiDcimInterfaceConnectionsListRequest {
	r.offset = &offset
	return r
}

// Site (slug)
func (r ApiDcimInterfaceConnectionsListRequest) Site(site string) ApiDcimInterfaceConnectionsListRequest {
	r.site = &site
	return r
}

func (r ApiDcimInterfaceConnectionsListRequest) Execute() (*PaginatedInterfaceConnectionList, *http.Response, error) {
	return r.ApiService.DcimInterfaceConnectionsListExecute(r)
}

/*
DcimInterfaceConnectionsList Method for DcimInterfaceConnectionsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfaceConnectionsListRequest
*/
func (a *DcimApiService) DcimInterfaceConnectionsList(ctx context.Context) ApiDcimInterfaceConnectionsListRequest {
	return ApiDcimInterfaceConnectionsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedInterfaceConnectionList
func (a *DcimApiService) DcimInterfaceConnectionsListExecute(r ApiDcimInterfaceConnectionsListRequest) (*PaginatedInterfaceConnectionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedInterfaceConnectionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceConnectionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-connections/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.site != nil {
		localVarQueryParams.Add("site", parameterToString(*r.site, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimInterfaceTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesBulkDestroyExecute(r)
}

/*
DcimInterfaceTemplatesBulkDestroy Method for DcimInterfaceTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfaceTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesBulkDestroy(ctx context.Context) ApiDcimInterfaceTemplatesBulkDestroyRequest {
	return ApiDcimInterfaceTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimInterfaceTemplatesBulkDestroyExecute(r ApiDcimInterfaceTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableInterfaceTemplate *PatchedWritableInterfaceTemplate
}

func (r ApiDcimInterfaceTemplatesBulkPartialUpdateRequest) PatchedWritableInterfaceTemplate(patchedWritableInterfaceTemplate PatchedWritableInterfaceTemplate) ApiDcimInterfaceTemplatesBulkPartialUpdateRequest {
	r.patchedWritableInterfaceTemplate = &patchedWritableInterfaceTemplate
	return r
}

func (r ApiDcimInterfaceTemplatesBulkPartialUpdateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimInterfaceTemplatesBulkPartialUpdate Method for DcimInterfaceTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfaceTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimInterfaceTemplatesBulkPartialUpdateRequest {
	return ApiDcimInterfaceTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InterfaceTemplate
func (a *DcimApiService) DcimInterfaceTemplatesBulkPartialUpdateExecute(r ApiDcimInterfaceTemplatesBulkPartialUpdateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInterfaceTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableInterfaceTemplate *WritableInterfaceTemplate
}

func (r ApiDcimInterfaceTemplatesBulkUpdateRequest) WritableInterfaceTemplate(writableInterfaceTemplate WritableInterfaceTemplate) ApiDcimInterfaceTemplatesBulkUpdateRequest {
	r.writableInterfaceTemplate = &writableInterfaceTemplate
	return r
}

func (r ApiDcimInterfaceTemplatesBulkUpdateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesBulkUpdateExecute(r)
}

/*
DcimInterfaceTemplatesBulkUpdate Method for DcimInterfaceTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfaceTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesBulkUpdate(ctx context.Context) ApiDcimInterfaceTemplatesBulkUpdateRequest {
	return ApiDcimInterfaceTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InterfaceTemplate
func (a *DcimApiService) DcimInterfaceTemplatesBulkUpdateExecute(r ApiDcimInterfaceTemplatesBulkUpdateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceTemplate == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableInterfaceTemplate *WritableInterfaceTemplate
}

func (r ApiDcimInterfaceTemplatesCreateRequest) WritableInterfaceTemplate(writableInterfaceTemplate WritableInterfaceTemplate) ApiDcimInterfaceTemplatesCreateRequest {
	r.writableInterfaceTemplate = &writableInterfaceTemplate
	return r
}

func (r ApiDcimInterfaceTemplatesCreateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesCreateExecute(r)
}

/*
DcimInterfaceTemplatesCreate Method for DcimInterfaceTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfaceTemplatesCreateRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesCreate(ctx context.Context) ApiDcimInterfaceTemplatesCreateRequest {
	return ApiDcimInterfaceTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InterfaceTemplate
func (a *DcimApiService) DcimInterfaceTemplatesCreateExecute(r ApiDcimInterfaceTemplatesCreateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceTemplate == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInterfaceTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesDestroyExecute(r)
}

/*
DcimInterfaceTemplatesDestroy Method for DcimInterfaceTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface template.
 @return ApiDcimInterfaceTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesDestroy(ctx context.Context, id string) ApiDcimInterfaceTemplatesDestroyRequest {
	return ApiDcimInterfaceTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimInterfaceTemplatesDestroyExecute(r ApiDcimInterfaceTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	mgmtOnly *bool
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	type_ *string
	typeN *string
}

// Device type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimInterfaceTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimInterfaceTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimInterfaceTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Id(id []string) ApiDcimInterfaceTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdIc(idIc []string) ApiDcimInterfaceTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdIe(idIe []string) ApiDcimInterfaceTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdIew(idIew []string) ApiDcimInterfaceTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdIre(idIre []string) ApiDcimInterfaceTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdIsw(idIsw []string) ApiDcimInterfaceTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdN(idN []string) ApiDcimInterfaceTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdNic(idNic []string) ApiDcimInterfaceTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdNie(idNie []string) ApiDcimInterfaceTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdNiew(idNiew []string) ApiDcimInterfaceTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdNire(idNire []string) ApiDcimInterfaceTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdNisw(idNisw []string) ApiDcimInterfaceTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdNre(idNre []string) ApiDcimInterfaceTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) IdRe(idRe []string) ApiDcimInterfaceTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimInterfaceTemplatesListRequest) Limit(limit int32) ApiDcimInterfaceTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) MgmtOnly(mgmtOnly bool) ApiDcimInterfaceTemplatesListRequest {
	r.mgmtOnly = &mgmtOnly
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Name(name []string) ApiDcimInterfaceTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIc(nameIc []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIe(nameIe []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIew(nameIew []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIre(nameIre []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameN(nameN []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNic(nameNic []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNie(nameNie []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNire(nameNire []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameNre(nameNre []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) NameRe(nameRe []string) ApiDcimInterfaceTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInterfaceTemplatesListRequest) Offset(offset int32) ApiDcimInterfaceTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimInterfaceTemplatesListRequest) Q(q string) ApiDcimInterfaceTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Type_(type_ string) ApiDcimInterfaceTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) TypeN(typeN string) ApiDcimInterfaceTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimInterfaceTemplatesListRequest) Execute() (*PaginatedInterfaceTemplateList, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesListExecute(r)
}

/*
DcimInterfaceTemplatesList Method for DcimInterfaceTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfaceTemplatesListRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesList(ctx context.Context) ApiDcimInterfaceTemplatesListRequest {
	return ApiDcimInterfaceTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedInterfaceTemplateList
func (a *DcimApiService) DcimInterfaceTemplatesListExecute(r ApiDcimInterfaceTemplatesListRequest) (*PaginatedInterfaceTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedInterfaceTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.mgmtOnly != nil {
		localVarQueryParams.Add("mgmt_only", parameterToString(*r.mgmtOnly, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableInterfaceTemplate *PatchedWritableInterfaceTemplate
}

func (r ApiDcimInterfaceTemplatesPartialUpdateRequest) PatchedWritableInterfaceTemplate(patchedWritableInterfaceTemplate PatchedWritableInterfaceTemplate) ApiDcimInterfaceTemplatesPartialUpdateRequest {
	r.patchedWritableInterfaceTemplate = &patchedWritableInterfaceTemplate
	return r
}

func (r ApiDcimInterfaceTemplatesPartialUpdateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesPartialUpdateExecute(r)
}

/*
DcimInterfaceTemplatesPartialUpdate Method for DcimInterfaceTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface template.
 @return ApiDcimInterfaceTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimInterfaceTemplatesPartialUpdateRequest {
	return ApiDcimInterfaceTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InterfaceTemplate
func (a *DcimApiService) DcimInterfaceTemplatesPartialUpdateExecute(r ApiDcimInterfaceTemplatesPartialUpdateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInterfaceTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInterfaceTemplatesRetrieveRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesRetrieveExecute(r)
}

/*
DcimInterfaceTemplatesRetrieve Method for DcimInterfaceTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface template.
 @return ApiDcimInterfaceTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesRetrieve(ctx context.Context, id string) ApiDcimInterfaceTemplatesRetrieveRequest {
	return ApiDcimInterfaceTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InterfaceTemplate
func (a *DcimApiService) DcimInterfaceTemplatesRetrieveExecute(r ApiDcimInterfaceTemplatesRetrieveRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfaceTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableInterfaceTemplate *WritableInterfaceTemplate
}

func (r ApiDcimInterfaceTemplatesUpdateRequest) WritableInterfaceTemplate(writableInterfaceTemplate WritableInterfaceTemplate) ApiDcimInterfaceTemplatesUpdateRequest {
	r.writableInterfaceTemplate = &writableInterfaceTemplate
	return r
}

func (r ApiDcimInterfaceTemplatesUpdateRequest) Execute() (*InterfaceTemplate, *http.Response, error) {
	return r.ApiService.DcimInterfaceTemplatesUpdateExecute(r)
}

/*
DcimInterfaceTemplatesUpdate Method for DcimInterfaceTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface template.
 @return ApiDcimInterfaceTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimInterfaceTemplatesUpdate(ctx context.Context, id string) ApiDcimInterfaceTemplatesUpdateRequest {
	return ApiDcimInterfaceTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InterfaceTemplate
func (a *DcimApiService) DcimInterfaceTemplatesUpdateExecute(r ApiDcimInterfaceTemplatesUpdateRequest) (*InterfaceTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InterfaceTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfaceTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interface-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterfaceTemplate == nil {
		return localVarReturnValue, nil, reportError("writableInterfaceTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterfaceTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimInterfacesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfacesBulkDestroyExecute(r)
}

/*
DcimInterfacesBulkDestroy Method for DcimInterfacesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfacesBulkDestroyRequest
*/
func (a *DcimApiService) DcimInterfacesBulkDestroy(ctx context.Context) ApiDcimInterfacesBulkDestroyRequest {
	return ApiDcimInterfacesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimInterfacesBulkDestroyExecute(r ApiDcimInterfacesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfacesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableInterface *PatchedWritableInterface
}

func (r ApiDcimInterfacesBulkPartialUpdateRequest) PatchedWritableInterface(patchedWritableInterface PatchedWritableInterface) ApiDcimInterfacesBulkPartialUpdateRequest {
	r.patchedWritableInterface = &patchedWritableInterface
	return r
}

func (r ApiDcimInterfacesBulkPartialUpdateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesBulkPartialUpdateExecute(r)
}

/*
DcimInterfacesBulkPartialUpdate Method for DcimInterfacesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfacesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimInterfacesBulkPartialUpdate(ctx context.Context) ApiDcimInterfacesBulkPartialUpdateRequest {
	return ApiDcimInterfacesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesBulkPartialUpdateExecute(r ApiDcimInterfacesBulkPartialUpdateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableInterface *WritableInterface
}

func (r ApiDcimInterfacesBulkUpdateRequest) WritableInterface(writableInterface WritableInterface) ApiDcimInterfacesBulkUpdateRequest {
	r.writableInterface = &writableInterface
	return r
}

func (r ApiDcimInterfacesBulkUpdateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesBulkUpdateExecute(r)
}

/*
DcimInterfacesBulkUpdate Method for DcimInterfacesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfacesBulkUpdateRequest
*/
func (a *DcimApiService) DcimInterfacesBulkUpdate(ctx context.Context) ApiDcimInterfacesBulkUpdateRequest {
	return ApiDcimInterfacesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesBulkUpdateExecute(r ApiDcimInterfacesBulkUpdateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterface == nil {
		return localVarReturnValue, nil, reportError("writableInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableInterface *WritableInterface
}

func (r ApiDcimInterfacesCreateRequest) WritableInterface(writableInterface WritableInterface) ApiDcimInterfacesCreateRequest {
	r.writableInterface = &writableInterface
	return r
}

func (r ApiDcimInterfacesCreateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesCreateExecute(r)
}

/*
DcimInterfacesCreate Method for DcimInterfacesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfacesCreateRequest
*/
func (a *DcimApiService) DcimInterfacesCreate(ctx context.Context) ApiDcimInterfacesCreateRequest {
	return ApiDcimInterfacesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesCreateExecute(r ApiDcimInterfacesCreateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterface == nil {
		return localVarReturnValue, nil, reportError("writableInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInterfacesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInterfacesDestroyExecute(r)
}

/*
DcimInterfacesDestroy Method for DcimInterfacesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface.
 @return ApiDcimInterfacesDestroyRequest
*/
func (a *DcimApiService) DcimInterfacesDestroy(ctx context.Context, id string) ApiDcimInterfacesDestroyRequest {
	return ApiDcimInterfacesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimInterfacesDestroyExecute(r ApiDcimInterfacesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInterfacesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	cabled *bool
	connected *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]string
	deviceId *[]string
	enabled *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	kind *string
	lagId *[]string
	lagIdN *[]string
	limit *int32
	macAddress *[]*string
	macAddressIc *[]*string
	macAddressIe *[]*string
	macAddressIew *[]*string
	macAddressIre *[]*string
	macAddressIsw *[]*string
	macAddressN *[]*string
	macAddressNic *[]*string
	macAddressNie *[]*string
	macAddressNiew *[]*string
	macAddressNire *[]*string
	macAddressNisw *[]*string
	macAddressNre *[]*string
	macAddressRe *[]*string
	mgmtOnly *bool
	mode *string
	modeN *string
	mtu *[]int32
	mtuGt *[]int32
	mtuGte *[]int32
	mtuLt *[]int32
	mtuLte *[]int32
	mtuN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *[]string
	typeN *[]string
	vlan *float32
	vlanId *string
}

func (r ApiDcimInterfacesListRequest) Cabled(cabled bool) ApiDcimInterfacesListRequest {
	r.cabled = &cabled
	return r
}

// Connected status (bool)
func (r ApiDcimInterfacesListRequest) Connected(connected bool) ApiDcimInterfacesListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimInterfacesListRequest) Description(description []string) ApiDcimInterfacesListRequest {
	r.description = &description
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIc(descriptionIc []string) ApiDcimInterfacesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIe(descriptionIe []string) ApiDcimInterfacesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIew(descriptionIew []string) ApiDcimInterfacesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIre(descriptionIre []string) ApiDcimInterfacesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimInterfacesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionN(descriptionN []string) ApiDcimInterfacesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNic(descriptionNic []string) ApiDcimInterfacesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNie(descriptionNie []string) ApiDcimInterfacesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimInterfacesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNire(descriptionNire []string) ApiDcimInterfacesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimInterfacesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionNre(descriptionNre []string) ApiDcimInterfacesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimInterfacesListRequest) DescriptionRe(descriptionRe []string) ApiDcimInterfacesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimInterfacesListRequest) Device(device []string) ApiDcimInterfacesListRequest {
	r.device = &device
	return r
}

// Device (ID)
func (r ApiDcimInterfacesListRequest) DeviceId(deviceId []string) ApiDcimInterfacesListRequest {
	r.deviceId = &deviceId
	return r
}

func (r ApiDcimInterfacesListRequest) Enabled(enabled bool) ApiDcimInterfacesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiDcimInterfacesListRequest) Id(id []string) ApiDcimInterfacesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInterfacesListRequest) IdIc(idIc []string) ApiDcimInterfacesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimInterfacesListRequest) IdIe(idIe []string) ApiDcimInterfacesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimInterfacesListRequest) IdIew(idIew []string) ApiDcimInterfacesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimInterfacesListRequest) IdIre(idIre []string) ApiDcimInterfacesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimInterfacesListRequest) IdIsw(idIsw []string) ApiDcimInterfacesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimInterfacesListRequest) IdN(idN []string) ApiDcimInterfacesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInterfacesListRequest) IdNic(idNic []string) ApiDcimInterfacesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimInterfacesListRequest) IdNie(idNie []string) ApiDcimInterfacesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimInterfacesListRequest) IdNiew(idNiew []string) ApiDcimInterfacesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimInterfacesListRequest) IdNire(idNire []string) ApiDcimInterfacesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimInterfacesListRequest) IdNisw(idNisw []string) ApiDcimInterfacesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimInterfacesListRequest) IdNre(idNre []string) ApiDcimInterfacesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimInterfacesListRequest) IdRe(idRe []string) ApiDcimInterfacesListRequest {
	r.idRe = &idRe
	return r
}

// Kind of interface
func (r ApiDcimInterfacesListRequest) Kind(kind string) ApiDcimInterfacesListRequest {
	r.kind = &kind
	return r
}

// LAG interface (ID)
func (r ApiDcimInterfacesListRequest) LagId(lagId []string) ApiDcimInterfacesListRequest {
	r.lagId = &lagId
	return r
}

// LAG interface (ID)
func (r ApiDcimInterfacesListRequest) LagIdN(lagIdN []string) ApiDcimInterfacesListRequest {
	r.lagIdN = &lagIdN
	return r
}

// Number of results to return per page.
func (r ApiDcimInterfacesListRequest) Limit(limit int32) ApiDcimInterfacesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddress(macAddress []*string) ApiDcimInterfacesListRequest {
	r.macAddress = &macAddress
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIc(macAddressIc []*string) ApiDcimInterfacesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIe(macAddressIe []*string) ApiDcimInterfacesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIew(macAddressIew []*string) ApiDcimInterfacesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIre(macAddressIre []*string) ApiDcimInterfacesListRequest {
	r.macAddressIre = &macAddressIre
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressIsw(macAddressIsw []*string) ApiDcimInterfacesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressN(macAddressN []*string) ApiDcimInterfacesListRequest {
	r.macAddressN = &macAddressN
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNic(macAddressNic []*string) ApiDcimInterfacesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNie(macAddressNie []*string) ApiDcimInterfacesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNiew(macAddressNiew []*string) ApiDcimInterfacesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNire(macAddressNire []*string) ApiDcimInterfacesListRequest {
	r.macAddressNire = &macAddressNire
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNisw(macAddressNisw []*string) ApiDcimInterfacesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressNre(macAddressNre []*string) ApiDcimInterfacesListRequest {
	r.macAddressNre = &macAddressNre
	return r
}

func (r ApiDcimInterfacesListRequest) MacAddressRe(macAddressRe []*string) ApiDcimInterfacesListRequest {
	r.macAddressRe = &macAddressRe
	return r
}

func (r ApiDcimInterfacesListRequest) MgmtOnly(mgmtOnly bool) ApiDcimInterfacesListRequest {
	r.mgmtOnly = &mgmtOnly
	return r
}

func (r ApiDcimInterfacesListRequest) Mode(mode string) ApiDcimInterfacesListRequest {
	r.mode = &mode
	return r
}

func (r ApiDcimInterfacesListRequest) ModeN(modeN string) ApiDcimInterfacesListRequest {
	r.modeN = &modeN
	return r
}

func (r ApiDcimInterfacesListRequest) Mtu(mtu []int32) ApiDcimInterfacesListRequest {
	r.mtu = &mtu
	return r
}

func (r ApiDcimInterfacesListRequest) MtuGt(mtuGt []int32) ApiDcimInterfacesListRequest {
	r.mtuGt = &mtuGt
	return r
}

func (r ApiDcimInterfacesListRequest) MtuGte(mtuGte []int32) ApiDcimInterfacesListRequest {
	r.mtuGte = &mtuGte
	return r
}

func (r ApiDcimInterfacesListRequest) MtuLt(mtuLt []int32) ApiDcimInterfacesListRequest {
	r.mtuLt = &mtuLt
	return r
}

func (r ApiDcimInterfacesListRequest) MtuLte(mtuLte []int32) ApiDcimInterfacesListRequest {
	r.mtuLte = &mtuLte
	return r
}

func (r ApiDcimInterfacesListRequest) MtuN(mtuN []int32) ApiDcimInterfacesListRequest {
	r.mtuN = &mtuN
	return r
}

func (r ApiDcimInterfacesListRequest) Name(name []string) ApiDcimInterfacesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInterfacesListRequest) NameIc(nameIc []string) ApiDcimInterfacesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInterfacesListRequest) NameIe(nameIe []string) ApiDcimInterfacesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInterfacesListRequest) NameIew(nameIew []string) ApiDcimInterfacesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInterfacesListRequest) NameIre(nameIre []string) ApiDcimInterfacesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimInterfacesListRequest) NameIsw(nameIsw []string) ApiDcimInterfacesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInterfacesListRequest) NameN(nameN []string) ApiDcimInterfacesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInterfacesListRequest) NameNic(nameNic []string) ApiDcimInterfacesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInterfacesListRequest) NameNie(nameNie []string) ApiDcimInterfacesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInterfacesListRequest) NameNiew(nameNiew []string) ApiDcimInterfacesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInterfacesListRequest) NameNire(nameNire []string) ApiDcimInterfacesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimInterfacesListRequest) NameNisw(nameNisw []string) ApiDcimInterfacesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimInterfacesListRequest) NameNre(nameNre []string) ApiDcimInterfacesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimInterfacesListRequest) NameRe(nameRe []string) ApiDcimInterfacesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInterfacesListRequest) Offset(offset int32) ApiDcimInterfacesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimInterfacesListRequest) Q(q string) ApiDcimInterfacesListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimInterfacesListRequest) Region(region []string) ApiDcimInterfacesListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimInterfacesListRequest) RegionN(regionN []string) ApiDcimInterfacesListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimInterfacesListRequest) RegionId(regionId []string) ApiDcimInterfacesListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimInterfacesListRequest) RegionIdN(regionIdN []string) ApiDcimInterfacesListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimInterfacesListRequest) Site(site []string) ApiDcimInterfacesListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimInterfacesListRequest) SiteN(siteN []string) ApiDcimInterfacesListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimInterfacesListRequest) SiteId(siteId []string) ApiDcimInterfacesListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimInterfacesListRequest) SiteIdN(siteIdN []string) ApiDcimInterfacesListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimInterfacesListRequest) Tag(tag []string) ApiDcimInterfacesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimInterfacesListRequest) TagN(tagN []string) ApiDcimInterfacesListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimInterfacesListRequest) Type_(type_ []string) ApiDcimInterfacesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimInterfacesListRequest) TypeN(typeN []string) ApiDcimInterfacesListRequest {
	r.typeN = &typeN
	return r
}

// Assigned VID
func (r ApiDcimInterfacesListRequest) Vlan(vlan float32) ApiDcimInterfacesListRequest {
	r.vlan = &vlan
	return r
}

// Assigned VLAN
func (r ApiDcimInterfacesListRequest) VlanId(vlanId string) ApiDcimInterfacesListRequest {
	r.vlanId = &vlanId
	return r
}

func (r ApiDcimInterfacesListRequest) Execute() (*PaginatedInterfaceList, *http.Response, error) {
	return r.ApiService.DcimInterfacesListExecute(r)
}

/*
DcimInterfacesList Method for DcimInterfacesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInterfacesListRequest
*/
func (a *DcimApiService) DcimInterfacesList(ctx context.Context) ApiDcimInterfacesListRequest {
	return ApiDcimInterfacesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedInterfaceList
func (a *DcimApiService) DcimInterfacesListExecute(r ApiDcimInterfacesListRequest) (*PaginatedInterfaceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedInterfaceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.enabled != nil {
		localVarQueryParams.Add("enabled", parameterToString(*r.enabled, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.kind != nil {
		localVarQueryParams.Add("kind", parameterToString(*r.kind, ""))
	}
	if r.lagId != nil {
		t := *r.lagId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("lag_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("lag_id", parameterToString(t, "multi"))
		}
	}
	if r.lagIdN != nil {
		t := *r.lagIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("lag_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("lag_id__n", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__iew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIre != nil {
		t := *r.macAddressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__isw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__n", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__niew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNire != nil {
		t := *r.macAddressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nisw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNre != nil {
		t := *r.macAddressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nre", parameterToString(t, "multi"))
		}
	}
	if r.macAddressRe != nil {
		t := *r.macAddressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__re", parameterToString(t, "multi"))
		}
	}
	if r.mgmtOnly != nil {
		localVarQueryParams.Add("mgmt_only", parameterToString(*r.mgmtOnly, ""))
	}
	if r.mode != nil {
		localVarQueryParams.Add("mode", parameterToString(*r.mode, ""))
	}
	if r.modeN != nil {
		localVarQueryParams.Add("mode__n", parameterToString(*r.modeN, ""))
	}
	if r.mtu != nil {
		t := *r.mtu
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu", parameterToString(t, "multi"))
		}
	}
	if r.mtuGt != nil {
		t := *r.mtuGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__gt", parameterToString(t, "multi"))
		}
	}
	if r.mtuGte != nil {
		t := *r.mtuGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__gte", parameterToString(t, "multi"))
		}
	}
	if r.mtuLt != nil {
		t := *r.mtuLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__lt", parameterToString(t, "multi"))
		}
	}
	if r.mtuLte != nil {
		t := *r.mtuLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__lte", parameterToString(t, "multi"))
		}
	}
	if r.mtuN != nil {
		t := *r.mtuN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	if r.vlan != nil {
		localVarQueryParams.Add("vlan", parameterToString(*r.vlan, ""))
	}
	if r.vlanId != nil {
		localVarQueryParams.Add("vlan_id", parameterToString(*r.vlanId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableInterface *PatchedWritableInterface
}

func (r ApiDcimInterfacesPartialUpdateRequest) PatchedWritableInterface(patchedWritableInterface PatchedWritableInterface) ApiDcimInterfacesPartialUpdateRequest {
	r.patchedWritableInterface = &patchedWritableInterface
	return r
}

func (r ApiDcimInterfacesPartialUpdateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesPartialUpdateExecute(r)
}

/*
DcimInterfacesPartialUpdate Method for DcimInterfacesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface.
 @return ApiDcimInterfacesPartialUpdateRequest
*/
func (a *DcimApiService) DcimInterfacesPartialUpdate(ctx context.Context, id string) ApiDcimInterfacesPartialUpdateRequest {
	return ApiDcimInterfacesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesPartialUpdateExecute(r ApiDcimInterfacesPartialUpdateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInterfacesRetrieveRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesRetrieveExecute(r)
}

/*
DcimInterfacesRetrieve Method for DcimInterfacesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface.
 @return ApiDcimInterfacesRetrieveRequest
*/
func (a *DcimApiService) DcimInterfacesRetrieve(ctx context.Context, id string) ApiDcimInterfacesRetrieveRequest {
	return ApiDcimInterfacesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesRetrieveExecute(r ApiDcimInterfacesRetrieveRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInterfacesTraceRetrieveRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesTraceRetrieveExecute(r)
}

/*
DcimInterfacesTraceRetrieve Method for DcimInterfacesTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface.
 @return ApiDcimInterfacesTraceRetrieveRequest
*/
func (a *DcimApiService) DcimInterfacesTraceRetrieve(ctx context.Context, id string) ApiDcimInterfacesTraceRetrieveRequest {
	return ApiDcimInterfacesTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesTraceRetrieveExecute(r ApiDcimInterfacesTraceRetrieveRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInterfacesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableInterface *WritableInterface
}

func (r ApiDcimInterfacesUpdateRequest) WritableInterface(writableInterface WritableInterface) ApiDcimInterfacesUpdateRequest {
	r.writableInterface = &writableInterface
	return r
}

func (r ApiDcimInterfacesUpdateRequest) Execute() (*Interface, *http.Response, error) {
	return r.ApiService.DcimInterfacesUpdateExecute(r)
}

/*
DcimInterfacesUpdate Method for DcimInterfacesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this interface.
 @return ApiDcimInterfacesUpdateRequest
*/
func (a *DcimApiService) DcimInterfacesUpdate(ctx context.Context, id string) ApiDcimInterfacesUpdateRequest {
	return ApiDcimInterfacesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Interface
func (a *DcimApiService) DcimInterfacesUpdateExecute(r ApiDcimInterfacesUpdateRequest) (*Interface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Interface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInterfacesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInterface == nil {
		return localVarReturnValue, nil, reportError("writableInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimInventoryItemsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemsBulkDestroyExecute(r)
}

/*
DcimInventoryItemsBulkDestroy Method for DcimInventoryItemsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInventoryItemsBulkDestroyRequest
*/
func (a *DcimApiService) DcimInventoryItemsBulkDestroy(ctx context.Context) ApiDcimInventoryItemsBulkDestroyRequest {
	return ApiDcimInventoryItemsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimInventoryItemsBulkDestroyExecute(r ApiDcimInventoryItemsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableInventoryItem *PatchedWritableInventoryItem
}

func (r ApiDcimInventoryItemsBulkPartialUpdateRequest) PatchedWritableInventoryItem(patchedWritableInventoryItem PatchedWritableInventoryItem) ApiDcimInventoryItemsBulkPartialUpdateRequest {
	r.patchedWritableInventoryItem = &patchedWritableInventoryItem
	return r
}

func (r ApiDcimInventoryItemsBulkPartialUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsBulkPartialUpdateExecute(r)
}

/*
DcimInventoryItemsBulkPartialUpdate Method for DcimInventoryItemsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInventoryItemsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimInventoryItemsBulkPartialUpdate(ctx context.Context) ApiDcimInventoryItemsBulkPartialUpdateRequest {
	return ApiDcimInventoryItemsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InventoryItem
func (a *DcimApiService) DcimInventoryItemsBulkPartialUpdateExecute(r ApiDcimInventoryItemsBulkPartialUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInventoryItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableInventoryItem *WritableInventoryItem
}

func (r ApiDcimInventoryItemsBulkUpdateRequest) WritableInventoryItem(writableInventoryItem WritableInventoryItem) ApiDcimInventoryItemsBulkUpdateRequest {
	r.writableInventoryItem = &writableInventoryItem
	return r
}

func (r ApiDcimInventoryItemsBulkUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsBulkUpdateExecute(r)
}

/*
DcimInventoryItemsBulkUpdate Method for DcimInventoryItemsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInventoryItemsBulkUpdateRequest
*/
func (a *DcimApiService) DcimInventoryItemsBulkUpdate(ctx context.Context) ApiDcimInventoryItemsBulkUpdateRequest {
	return ApiDcimInventoryItemsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InventoryItem
func (a *DcimApiService) DcimInventoryItemsBulkUpdateExecute(r ApiDcimInventoryItemsBulkUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItem == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableInventoryItem *WritableInventoryItem
}

func (r ApiDcimInventoryItemsCreateRequest) WritableInventoryItem(writableInventoryItem WritableInventoryItem) ApiDcimInventoryItemsCreateRequest {
	r.writableInventoryItem = &writableInventoryItem
	return r
}

func (r ApiDcimInventoryItemsCreateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsCreateExecute(r)
}

/*
DcimInventoryItemsCreate Method for DcimInventoryItemsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInventoryItemsCreateRequest
*/
func (a *DcimApiService) DcimInventoryItemsCreate(ctx context.Context) ApiDcimInventoryItemsCreateRequest {
	return ApiDcimInventoryItemsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InventoryItem
func (a *DcimApiService) DcimInventoryItemsCreateExecute(r ApiDcimInventoryItemsCreateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItem == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInventoryItemsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimInventoryItemsDestroyExecute(r)
}

/*
DcimInventoryItemsDestroy Method for DcimInventoryItemsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this inventory item.
 @return ApiDcimInventoryItemsDestroyRequest
*/
func (a *DcimApiService) DcimInventoryItemsDestroy(ctx context.Context, id string) ApiDcimInventoryItemsDestroyRequest {
	return ApiDcimInventoryItemsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimInventoryItemsDestroyExecute(r ApiDcimInventoryItemsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	assetTag *[]string
	assetTagIc *[]string
	assetTagIe *[]string
	assetTagIew *[]string
	assetTagIre *[]string
	assetTagIsw *[]string
	assetTagN *[]string
	assetTagNic *[]string
	assetTagNie *[]string
	assetTagNiew *[]string
	assetTagNire *[]string
	assetTagNisw *[]string
	assetTagNre *[]string
	assetTagRe *[]string
	device *string
	deviceN *string
	deviceId *string
	deviceIdN *string
	discovered *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	manufacturer *[]string
	manufacturerN *[]string
	manufacturerId *[]*string
	manufacturerIdN *[]*string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	parentId *[]*string
	parentIdN *[]*string
	partId *[]string
	partIdIc *[]string
	partIdIe *[]string
	partIdIew *[]string
	partIdIre *[]string
	partIdIsw *[]string
	partIdN *[]string
	partIdNic *[]string
	partIdNie *[]string
	partIdNiew *[]string
	partIdNire *[]string
	partIdNisw *[]string
	partIdNre *[]string
	partIdRe *[]string
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	serial *string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
}

func (r ApiDcimInventoryItemsListRequest) AssetTag(assetTag []string) ApiDcimInventoryItemsListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIc(assetTagIc []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIe(assetTagIe []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIew(assetTagIew []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIre(assetTagIre []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIre = &assetTagIre
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimInventoryItemsListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagN(assetTagN []string) ApiDcimInventoryItemsListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNic(assetTagNic []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNie(assetTagNie []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNire(assetTagNire []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNire = &assetTagNire
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagNre(assetTagNre []string) ApiDcimInventoryItemsListRequest {
	r.assetTagNre = &assetTagNre
	return r
}

func (r ApiDcimInventoryItemsListRequest) AssetTagRe(assetTagRe []string) ApiDcimInventoryItemsListRequest {
	r.assetTagRe = &assetTagRe
	return r
}

// Device (name)
func (r ApiDcimInventoryItemsListRequest) Device(device string) ApiDcimInventoryItemsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimInventoryItemsListRequest) DeviceN(deviceN string) ApiDcimInventoryItemsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceId(deviceId string) ApiDcimInventoryItemsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimInventoryItemsListRequest) DeviceIdN(deviceIdN string) ApiDcimInventoryItemsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Discovered(discovered bool) ApiDcimInventoryItemsListRequest {
	r.discovered = &discovered
	return r
}

func (r ApiDcimInventoryItemsListRequest) Id(id []string) ApiDcimInventoryItemsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdIc(idIc []string) ApiDcimInventoryItemsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdIe(idIe []string) ApiDcimInventoryItemsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdIew(idIew []string) ApiDcimInventoryItemsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdIre(idIre []string) ApiDcimInventoryItemsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdIsw(idIsw []string) ApiDcimInventoryItemsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdN(idN []string) ApiDcimInventoryItemsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdNic(idNic []string) ApiDcimInventoryItemsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdNie(idNie []string) ApiDcimInventoryItemsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdNiew(idNiew []string) ApiDcimInventoryItemsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdNire(idNire []string) ApiDcimInventoryItemsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdNisw(idNisw []string) ApiDcimInventoryItemsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdNre(idNre []string) ApiDcimInventoryItemsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimInventoryItemsListRequest) IdRe(idRe []string) ApiDcimInventoryItemsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimInventoryItemsListRequest) Limit(limit int32) ApiDcimInventoryItemsListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimInventoryItemsListRequest) Manufacturer(manufacturer []string) ApiDcimInventoryItemsListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimInventoryItemsListRequest) ManufacturerN(manufacturerN []string) ApiDcimInventoryItemsListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimInventoryItemsListRequest) ManufacturerId(manufacturerId []*string) ApiDcimInventoryItemsListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimInventoryItemsListRequest) ManufacturerIdN(manufacturerIdN []*string) ApiDcimInventoryItemsListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Name(name []string) ApiDcimInventoryItemsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIc(nameIc []string) ApiDcimInventoryItemsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIe(nameIe []string) ApiDcimInventoryItemsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIew(nameIew []string) ApiDcimInventoryItemsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIre(nameIre []string) ApiDcimInventoryItemsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameIsw(nameIsw []string) ApiDcimInventoryItemsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameN(nameN []string) ApiDcimInventoryItemsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNic(nameNic []string) ApiDcimInventoryItemsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNie(nameNie []string) ApiDcimInventoryItemsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNiew(nameNiew []string) ApiDcimInventoryItemsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNire(nameNire []string) ApiDcimInventoryItemsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNisw(nameNisw []string) ApiDcimInventoryItemsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameNre(nameNre []string) ApiDcimInventoryItemsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimInventoryItemsListRequest) NameRe(nameRe []string) ApiDcimInventoryItemsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimInventoryItemsListRequest) Offset(offset int32) ApiDcimInventoryItemsListRequest {
	r.offset = &offset
	return r
}

// Parent inventory item (ID)
func (r ApiDcimInventoryItemsListRequest) ParentId(parentId []*string) ApiDcimInventoryItemsListRequest {
	r.parentId = &parentId
	return r
}

// Parent inventory item (ID)
func (r ApiDcimInventoryItemsListRequest) ParentIdN(parentIdN []*string) ApiDcimInventoryItemsListRequest {
	r.parentIdN = &parentIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartId(partId []string) ApiDcimInventoryItemsListRequest {
	r.partId = &partId
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIc(partIdIc []string) ApiDcimInventoryItemsListRequest {
	r.partIdIc = &partIdIc
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIe(partIdIe []string) ApiDcimInventoryItemsListRequest {
	r.partIdIe = &partIdIe
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIew(partIdIew []string) ApiDcimInventoryItemsListRequest {
	r.partIdIew = &partIdIew
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIre(partIdIre []string) ApiDcimInventoryItemsListRequest {
	r.partIdIre = &partIdIre
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdIsw(partIdIsw []string) ApiDcimInventoryItemsListRequest {
	r.partIdIsw = &partIdIsw
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdN(partIdN []string) ApiDcimInventoryItemsListRequest {
	r.partIdN = &partIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNic(partIdNic []string) ApiDcimInventoryItemsListRequest {
	r.partIdNic = &partIdNic
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNie(partIdNie []string) ApiDcimInventoryItemsListRequest {
	r.partIdNie = &partIdNie
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNiew(partIdNiew []string) ApiDcimInventoryItemsListRequest {
	r.partIdNiew = &partIdNiew
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNire(partIdNire []string) ApiDcimInventoryItemsListRequest {
	r.partIdNire = &partIdNire
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNisw(partIdNisw []string) ApiDcimInventoryItemsListRequest {
	r.partIdNisw = &partIdNisw
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdNre(partIdNre []string) ApiDcimInventoryItemsListRequest {
	r.partIdNre = &partIdNre
	return r
}

func (r ApiDcimInventoryItemsListRequest) PartIdRe(partIdRe []string) ApiDcimInventoryItemsListRequest {
	r.partIdRe = &partIdRe
	return r
}

// Search
func (r ApiDcimInventoryItemsListRequest) Q(q string) ApiDcimInventoryItemsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimInventoryItemsListRequest) Region(region []string) ApiDcimInventoryItemsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimInventoryItemsListRequest) RegionN(regionN []string) ApiDcimInventoryItemsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimInventoryItemsListRequest) RegionId(regionId []string) ApiDcimInventoryItemsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimInventoryItemsListRequest) RegionIdN(regionIdN []string) ApiDcimInventoryItemsListRequest {
	r.regionIdN = &regionIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Serial(serial string) ApiDcimInventoryItemsListRequest {
	r.serial = &serial
	return r
}

// Site name (slug)
func (r ApiDcimInventoryItemsListRequest) Site(site []string) ApiDcimInventoryItemsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimInventoryItemsListRequest) SiteN(siteN []string) ApiDcimInventoryItemsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimInventoryItemsListRequest) SiteId(siteId []string) ApiDcimInventoryItemsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimInventoryItemsListRequest) SiteIdN(siteIdN []string) ApiDcimInventoryItemsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Tag(tag []string) ApiDcimInventoryItemsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimInventoryItemsListRequest) TagN(tagN []string) ApiDcimInventoryItemsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimInventoryItemsListRequest) Execute() (*PaginatedInventoryItemList, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsListExecute(r)
}

/*
DcimInventoryItemsList Method for DcimInventoryItemsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimInventoryItemsListRequest
*/
func (a *DcimApiService) DcimInventoryItemsList(ctx context.Context) ApiDcimInventoryItemsListRequest {
	return ApiDcimInventoryItemsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedInventoryItemList
func (a *DcimApiService) DcimInventoryItemsListExecute(r ApiDcimInventoryItemsListRequest) (*PaginatedInventoryItemList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedInventoryItemList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__iew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIre != nil {
		t := *r.assetTagIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__isw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__n", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__niew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNire != nil {
		t := *r.assetTagNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nisw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNre != nil {
		t := *r.assetTagNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nre", parameterToString(t, "multi"))
		}
	}
	if r.assetTagRe != nil {
		t := *r.assetTagRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		localVarQueryParams.Add("device", parameterToString(*r.device, ""))
	}
	if r.deviceN != nil {
		localVarQueryParams.Add("device__n", parameterToString(*r.deviceN, ""))
	}
	if r.deviceId != nil {
		localVarQueryParams.Add("device_id", parameterToString(*r.deviceId, ""))
	}
	if r.deviceIdN != nil {
		localVarQueryParams.Add("device_id__n", parameterToString(*r.deviceIdN, ""))
	}
	if r.discovered != nil {
		localVarQueryParams.Add("discovered", parameterToString(*r.discovered, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer__n", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_id", parameterToString(t, "multi"))
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_id__n", parameterToString(t, "multi"))
		}
	}
	if r.partId != nil {
		t := *r.partId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id", parameterToString(t, "multi"))
		}
	}
	if r.partIdIc != nil {
		t := *r.partIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.partIdIe != nil {
		t := *r.partIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.partIdIew != nil {
		t := *r.partIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.partIdIre != nil {
		t := *r.partIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.partIdIsw != nil {
		t := *r.partIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.partIdN != nil {
		t := *r.partIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__n", parameterToString(t, "multi"))
		}
	}
	if r.partIdNic != nil {
		t := *r.partIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.partIdNie != nil {
		t := *r.partIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.partIdNiew != nil {
		t := *r.partIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.partIdNire != nil {
		t := *r.partIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.partIdNisw != nil {
		t := *r.partIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.partIdNre != nil {
		t := *r.partIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.partIdRe != nil {
		t := *r.partIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("part_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("part_id__re", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableInventoryItem *PatchedWritableInventoryItem
}

func (r ApiDcimInventoryItemsPartialUpdateRequest) PatchedWritableInventoryItem(patchedWritableInventoryItem PatchedWritableInventoryItem) ApiDcimInventoryItemsPartialUpdateRequest {
	r.patchedWritableInventoryItem = &patchedWritableInventoryItem
	return r
}

func (r ApiDcimInventoryItemsPartialUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsPartialUpdateExecute(r)
}

/*
DcimInventoryItemsPartialUpdate Method for DcimInventoryItemsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this inventory item.
 @return ApiDcimInventoryItemsPartialUpdateRequest
*/
func (a *DcimApiService) DcimInventoryItemsPartialUpdate(ctx context.Context, id string) ApiDcimInventoryItemsPartialUpdateRequest {
	return ApiDcimInventoryItemsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InventoryItem
func (a *DcimApiService) DcimInventoryItemsPartialUpdateExecute(r ApiDcimInventoryItemsPartialUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableInventoryItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimInventoryItemsRetrieveRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsRetrieveExecute(r)
}

/*
DcimInventoryItemsRetrieve Method for DcimInventoryItemsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this inventory item.
 @return ApiDcimInventoryItemsRetrieveRequest
*/
func (a *DcimApiService) DcimInventoryItemsRetrieve(ctx context.Context, id string) ApiDcimInventoryItemsRetrieveRequest {
	return ApiDcimInventoryItemsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InventoryItem
func (a *DcimApiService) DcimInventoryItemsRetrieveExecute(r ApiDcimInventoryItemsRetrieveRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimInventoryItemsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableInventoryItem *WritableInventoryItem
}

func (r ApiDcimInventoryItemsUpdateRequest) WritableInventoryItem(writableInventoryItem WritableInventoryItem) ApiDcimInventoryItemsUpdateRequest {
	r.writableInventoryItem = &writableInventoryItem
	return r
}

func (r ApiDcimInventoryItemsUpdateRequest) Execute() (*InventoryItem, *http.Response, error) {
	return r.ApiService.DcimInventoryItemsUpdateExecute(r)
}

/*
DcimInventoryItemsUpdate Method for DcimInventoryItemsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this inventory item.
 @return ApiDcimInventoryItemsUpdateRequest
*/
func (a *DcimApiService) DcimInventoryItemsUpdate(ctx context.Context, id string) ApiDcimInventoryItemsUpdateRequest {
	return ApiDcimInventoryItemsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return InventoryItem
func (a *DcimApiService) DcimInventoryItemsUpdateExecute(r ApiDcimInventoryItemsUpdateRequest) (*InventoryItem, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InventoryItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimInventoryItemsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/inventory-items/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableInventoryItem == nil {
		return localVarReturnValue, nil, reportError("writableInventoryItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableInventoryItem
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimManufacturersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimManufacturersBulkDestroyExecute(r)
}

/*
DcimManufacturersBulkDestroy Method for DcimManufacturersBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimManufacturersBulkDestroyRequest
*/
func (a *DcimApiService) DcimManufacturersBulkDestroy(ctx context.Context) ApiDcimManufacturersBulkDestroyRequest {
	return ApiDcimManufacturersBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimManufacturersBulkDestroyExecute(r ApiDcimManufacturersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimManufacturersBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedManufacturer *PatchedManufacturer
}

func (r ApiDcimManufacturersBulkPartialUpdateRequest) PatchedManufacturer(patchedManufacturer PatchedManufacturer) ApiDcimManufacturersBulkPartialUpdateRequest {
	r.patchedManufacturer = &patchedManufacturer
	return r
}

func (r ApiDcimManufacturersBulkPartialUpdateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersBulkPartialUpdateExecute(r)
}

/*
DcimManufacturersBulkPartialUpdate Method for DcimManufacturersBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimManufacturersBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimManufacturersBulkPartialUpdate(ctx context.Context) ApiDcimManufacturersBulkPartialUpdateRequest {
	return ApiDcimManufacturersBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DcimApiService) DcimManufacturersBulkPartialUpdateExecute(r ApiDcimManufacturersBulkPartialUpdateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedManufacturer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	manufacturer *Manufacturer
}

func (r ApiDcimManufacturersBulkUpdateRequest) Manufacturer(manufacturer Manufacturer) ApiDcimManufacturersBulkUpdateRequest {
	r.manufacturer = &manufacturer
	return r
}

func (r ApiDcimManufacturersBulkUpdateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersBulkUpdateExecute(r)
}

/*
DcimManufacturersBulkUpdate Method for DcimManufacturersBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimManufacturersBulkUpdateRequest
*/
func (a *DcimApiService) DcimManufacturersBulkUpdate(ctx context.Context) ApiDcimManufacturersBulkUpdateRequest {
	return ApiDcimManufacturersBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DcimApiService) DcimManufacturersBulkUpdateExecute(r ApiDcimManufacturersBulkUpdateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturer == nil {
		return localVarReturnValue, nil, reportError("manufacturer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	manufacturer *Manufacturer
}

func (r ApiDcimManufacturersCreateRequest) Manufacturer(manufacturer Manufacturer) ApiDcimManufacturersCreateRequest {
	r.manufacturer = &manufacturer
	return r
}

func (r ApiDcimManufacturersCreateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersCreateExecute(r)
}

/*
DcimManufacturersCreate Method for DcimManufacturersCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimManufacturersCreateRequest
*/
func (a *DcimApiService) DcimManufacturersCreate(ctx context.Context) ApiDcimManufacturersCreateRequest {
	return ApiDcimManufacturersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DcimApiService) DcimManufacturersCreateExecute(r ApiDcimManufacturersCreateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturer == nil {
		return localVarReturnValue, nil, reportError("manufacturer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimManufacturersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimManufacturersDestroyExecute(r)
}

/*
DcimManufacturersDestroy Method for DcimManufacturersDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this manufacturer.
 @return ApiDcimManufacturersDestroyRequest
*/
func (a *DcimApiService) DcimManufacturersDestroy(ctx context.Context, id string) ApiDcimManufacturersDestroyRequest {
	return ApiDcimManufacturersDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimManufacturersDestroyExecute(r ApiDcimManufacturersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimManufacturersListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiDcimManufacturersListRequest) Created(created string) ApiDcimManufacturersListRequest {
	r.created = &created
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedGte(createdGte string) ApiDcimManufacturersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimManufacturersListRequest) CreatedLte(createdLte string) ApiDcimManufacturersListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimManufacturersListRequest) Description(description []string) ApiDcimManufacturersListRequest {
	r.description = &description
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIc(descriptionIc []string) ApiDcimManufacturersListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIe(descriptionIe []string) ApiDcimManufacturersListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIew(descriptionIew []string) ApiDcimManufacturersListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIre(descriptionIre []string) ApiDcimManufacturersListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimManufacturersListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionN(descriptionN []string) ApiDcimManufacturersListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNic(descriptionNic []string) ApiDcimManufacturersListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNie(descriptionNie []string) ApiDcimManufacturersListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimManufacturersListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNire(descriptionNire []string) ApiDcimManufacturersListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimManufacturersListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionNre(descriptionNre []string) ApiDcimManufacturersListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimManufacturersListRequest) DescriptionRe(descriptionRe []string) ApiDcimManufacturersListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiDcimManufacturersListRequest) Id(id []string) ApiDcimManufacturersListRequest {
	r.id = &id
	return r
}

func (r ApiDcimManufacturersListRequest) IdIc(idIc []string) ApiDcimManufacturersListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimManufacturersListRequest) IdIe(idIe []string) ApiDcimManufacturersListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimManufacturersListRequest) IdIew(idIew []string) ApiDcimManufacturersListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimManufacturersListRequest) IdIre(idIre []string) ApiDcimManufacturersListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimManufacturersListRequest) IdIsw(idIsw []string) ApiDcimManufacturersListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimManufacturersListRequest) IdN(idN []string) ApiDcimManufacturersListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimManufacturersListRequest) IdNic(idNic []string) ApiDcimManufacturersListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimManufacturersListRequest) IdNie(idNie []string) ApiDcimManufacturersListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimManufacturersListRequest) IdNiew(idNiew []string) ApiDcimManufacturersListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimManufacturersListRequest) IdNire(idNire []string) ApiDcimManufacturersListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimManufacturersListRequest) IdNisw(idNisw []string) ApiDcimManufacturersListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimManufacturersListRequest) IdNre(idNre []string) ApiDcimManufacturersListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimManufacturersListRequest) IdRe(idRe []string) ApiDcimManufacturersListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdated(lastUpdated time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimManufacturersListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimManufacturersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimManufacturersListRequest) Limit(limit int32) ApiDcimManufacturersListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimManufacturersListRequest) Name(name []string) ApiDcimManufacturersListRequest {
	r.name = &name
	return r
}

func (r ApiDcimManufacturersListRequest) NameIc(nameIc []string) ApiDcimManufacturersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimManufacturersListRequest) NameIe(nameIe []string) ApiDcimManufacturersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimManufacturersListRequest) NameIew(nameIew []string) ApiDcimManufacturersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimManufacturersListRequest) NameIre(nameIre []string) ApiDcimManufacturersListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimManufacturersListRequest) NameIsw(nameIsw []string) ApiDcimManufacturersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimManufacturersListRequest) NameN(nameN []string) ApiDcimManufacturersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimManufacturersListRequest) NameNic(nameNic []string) ApiDcimManufacturersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimManufacturersListRequest) NameNie(nameNie []string) ApiDcimManufacturersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimManufacturersListRequest) NameNiew(nameNiew []string) ApiDcimManufacturersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimManufacturersListRequest) NameNire(nameNire []string) ApiDcimManufacturersListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimManufacturersListRequest) NameNisw(nameNisw []string) ApiDcimManufacturersListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimManufacturersListRequest) NameNre(nameNre []string) ApiDcimManufacturersListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimManufacturersListRequest) NameRe(nameRe []string) ApiDcimManufacturersListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimManufacturersListRequest) Offset(offset int32) ApiDcimManufacturersListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimManufacturersListRequest) Q(q string) ApiDcimManufacturersListRequest {
	r.q = &q
	return r
}

func (r ApiDcimManufacturersListRequest) Slug(slug []string) ApiDcimManufacturersListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIc(slugIc []string) ApiDcimManufacturersListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIe(slugIe []string) ApiDcimManufacturersListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIew(slugIew []string) ApiDcimManufacturersListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIre(slugIre []string) ApiDcimManufacturersListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimManufacturersListRequest) SlugIsw(slugIsw []string) ApiDcimManufacturersListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimManufacturersListRequest) SlugN(slugN []string) ApiDcimManufacturersListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNic(slugNic []string) ApiDcimManufacturersListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNie(slugNie []string) ApiDcimManufacturersListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNiew(slugNiew []string) ApiDcimManufacturersListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNire(slugNire []string) ApiDcimManufacturersListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNisw(slugNisw []string) ApiDcimManufacturersListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimManufacturersListRequest) SlugNre(slugNre []string) ApiDcimManufacturersListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimManufacturersListRequest) SlugRe(slugRe []string) ApiDcimManufacturersListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimManufacturersListRequest) Execute() (*PaginatedManufacturerList, *http.Response, error) {
	return r.ApiService.DcimManufacturersListExecute(r)
}

/*
DcimManufacturersList Method for DcimManufacturersList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimManufacturersListRequest
*/
func (a *DcimApiService) DcimManufacturersList(ctx context.Context) ApiDcimManufacturersListRequest {
	return ApiDcimManufacturersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedManufacturerList
func (a *DcimApiService) DcimManufacturersListExecute(r ApiDcimManufacturersListRequest) (*PaginatedManufacturerList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedManufacturerList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedManufacturer *PatchedManufacturer
}

func (r ApiDcimManufacturersPartialUpdateRequest) PatchedManufacturer(patchedManufacturer PatchedManufacturer) ApiDcimManufacturersPartialUpdateRequest {
	r.patchedManufacturer = &patchedManufacturer
	return r
}

func (r ApiDcimManufacturersPartialUpdateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersPartialUpdateExecute(r)
}

/*
DcimManufacturersPartialUpdate Method for DcimManufacturersPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this manufacturer.
 @return ApiDcimManufacturersPartialUpdateRequest
*/
func (a *DcimApiService) DcimManufacturersPartialUpdate(ctx context.Context, id string) ApiDcimManufacturersPartialUpdateRequest {
	return ApiDcimManufacturersPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DcimApiService) DcimManufacturersPartialUpdateExecute(r ApiDcimManufacturersPartialUpdateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedManufacturer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimManufacturersRetrieveRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersRetrieveExecute(r)
}

/*
DcimManufacturersRetrieve Method for DcimManufacturersRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this manufacturer.
 @return ApiDcimManufacturersRetrieveRequest
*/
func (a *DcimApiService) DcimManufacturersRetrieve(ctx context.Context, id string) ApiDcimManufacturersRetrieveRequest {
	return ApiDcimManufacturersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DcimApiService) DcimManufacturersRetrieveExecute(r ApiDcimManufacturersRetrieveRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimManufacturersUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	manufacturer *Manufacturer
}

func (r ApiDcimManufacturersUpdateRequest) Manufacturer(manufacturer Manufacturer) ApiDcimManufacturersUpdateRequest {
	r.manufacturer = &manufacturer
	return r
}

func (r ApiDcimManufacturersUpdateRequest) Execute() (*Manufacturer, *http.Response, error) {
	return r.ApiService.DcimManufacturersUpdateExecute(r)
}

/*
DcimManufacturersUpdate Method for DcimManufacturersUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this manufacturer.
 @return ApiDcimManufacturersUpdateRequest
*/
func (a *DcimApiService) DcimManufacturersUpdate(ctx context.Context, id string) ApiDcimManufacturersUpdateRequest {
	return ApiDcimManufacturersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Manufacturer
func (a *DcimApiService) DcimManufacturersUpdateExecute(r ApiDcimManufacturersUpdateRequest) (*Manufacturer, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Manufacturer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimManufacturersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/manufacturers/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.manufacturer == nil {
		return localVarReturnValue, nil, reportError("manufacturer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.manufacturer
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPlatformsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPlatformsBulkDestroyExecute(r)
}

/*
DcimPlatformsBulkDestroy Method for DcimPlatformsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPlatformsBulkDestroyRequest
*/
func (a *DcimApiService) DcimPlatformsBulkDestroy(ctx context.Context) ApiDcimPlatformsBulkDestroyRequest {
	return ApiDcimPlatformsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPlatformsBulkDestroyExecute(r ApiDcimPlatformsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPlatformsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePlatform *PatchedWritablePlatform
}

func (r ApiDcimPlatformsBulkPartialUpdateRequest) PatchedWritablePlatform(patchedWritablePlatform PatchedWritablePlatform) ApiDcimPlatformsBulkPartialUpdateRequest {
	r.patchedWritablePlatform = &patchedWritablePlatform
	return r
}

func (r ApiDcimPlatformsBulkPartialUpdateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsBulkPartialUpdateExecute(r)
}

/*
DcimPlatformsBulkPartialUpdate Method for DcimPlatformsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPlatformsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPlatformsBulkPartialUpdate(ctx context.Context) ApiDcimPlatformsBulkPartialUpdateRequest {
	return ApiDcimPlatformsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Platform
func (a *DcimApiService) DcimPlatformsBulkPartialUpdateExecute(r ApiDcimPlatformsBulkPartialUpdateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePlatform
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePlatform *WritablePlatform
}

func (r ApiDcimPlatformsBulkUpdateRequest) WritablePlatform(writablePlatform WritablePlatform) ApiDcimPlatformsBulkUpdateRequest {
	r.writablePlatform = &writablePlatform
	return r
}

func (r ApiDcimPlatformsBulkUpdateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsBulkUpdateExecute(r)
}

/*
DcimPlatformsBulkUpdate Method for DcimPlatformsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPlatformsBulkUpdateRequest
*/
func (a *DcimApiService) DcimPlatformsBulkUpdate(ctx context.Context) ApiDcimPlatformsBulkUpdateRequest {
	return ApiDcimPlatformsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Platform
func (a *DcimApiService) DcimPlatformsBulkUpdateExecute(r ApiDcimPlatformsBulkUpdateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePlatform == nil {
		return localVarReturnValue, nil, reportError("writablePlatform is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePlatform
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePlatform *WritablePlatform
}

func (r ApiDcimPlatformsCreateRequest) WritablePlatform(writablePlatform WritablePlatform) ApiDcimPlatformsCreateRequest {
	r.writablePlatform = &writablePlatform
	return r
}

func (r ApiDcimPlatformsCreateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsCreateExecute(r)
}

/*
DcimPlatformsCreate Method for DcimPlatformsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPlatformsCreateRequest
*/
func (a *DcimApiService) DcimPlatformsCreate(ctx context.Context) ApiDcimPlatformsCreateRequest {
	return ApiDcimPlatformsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Platform
func (a *DcimApiService) DcimPlatformsCreateExecute(r ApiDcimPlatformsCreateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePlatform == nil {
		return localVarReturnValue, nil, reportError("writablePlatform is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePlatform
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPlatformsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPlatformsDestroyExecute(r)
}

/*
DcimPlatformsDestroy Method for DcimPlatformsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this platform.
 @return ApiDcimPlatformsDestroyRequest
*/
func (a *DcimApiService) DcimPlatformsDestroy(ctx context.Context, id string) ApiDcimPlatformsDestroyRequest {
	return ApiDcimPlatformsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPlatformsDestroyExecute(r ApiDcimPlatformsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPlatformsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	manufacturer *[]string
	manufacturerN *[]string
	manufacturerId *[]string
	manufacturerIdN *[]string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	napalmDriver *[]string
	napalmDriverIc *[]string
	napalmDriverIe *[]string
	napalmDriverIew *[]string
	napalmDriverIre *[]string
	napalmDriverIsw *[]string
	napalmDriverN *[]string
	napalmDriverNic *[]string
	napalmDriverNie *[]string
	napalmDriverNiew *[]string
	napalmDriverNire *[]string
	napalmDriverNisw *[]string
	napalmDriverNre *[]string
	napalmDriverRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiDcimPlatformsListRequest) Created(created string) ApiDcimPlatformsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedGte(createdGte string) ApiDcimPlatformsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPlatformsListRequest) CreatedLte(createdLte string) ApiDcimPlatformsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPlatformsListRequest) Description(description []string) ApiDcimPlatformsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPlatformsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPlatformsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPlatformsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIre(descriptionIre []string) ApiDcimPlatformsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPlatformsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionN(descriptionN []string) ApiDcimPlatformsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPlatformsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPlatformsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPlatformsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNire(descriptionNire []string) ApiDcimPlatformsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPlatformsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionNre(descriptionNre []string) ApiDcimPlatformsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimPlatformsListRequest) DescriptionRe(descriptionRe []string) ApiDcimPlatformsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiDcimPlatformsListRequest) Id(id []string) ApiDcimPlatformsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPlatformsListRequest) IdIc(idIc []string) ApiDcimPlatformsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPlatformsListRequest) IdIe(idIe []string) ApiDcimPlatformsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPlatformsListRequest) IdIew(idIew []string) ApiDcimPlatformsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPlatformsListRequest) IdIre(idIre []string) ApiDcimPlatformsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPlatformsListRequest) IdIsw(idIsw []string) ApiDcimPlatformsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPlatformsListRequest) IdN(idN []string) ApiDcimPlatformsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPlatformsListRequest) IdNic(idNic []string) ApiDcimPlatformsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPlatformsListRequest) IdNie(idNie []string) ApiDcimPlatformsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPlatformsListRequest) IdNiew(idNiew []string) ApiDcimPlatformsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPlatformsListRequest) IdNire(idNire []string) ApiDcimPlatformsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPlatformsListRequest) IdNisw(idNisw []string) ApiDcimPlatformsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPlatformsListRequest) IdNre(idNre []string) ApiDcimPlatformsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPlatformsListRequest) IdRe(idRe []string) ApiDcimPlatformsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdated(lastUpdated time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPlatformsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimPlatformsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimPlatformsListRequest) Limit(limit int32) ApiDcimPlatformsListRequest {
	r.limit = &limit
	return r
}

// Manufacturer (slug)
func (r ApiDcimPlatformsListRequest) Manufacturer(manufacturer []string) ApiDcimPlatformsListRequest {
	r.manufacturer = &manufacturer
	return r
}

// Manufacturer (slug)
func (r ApiDcimPlatformsListRequest) ManufacturerN(manufacturerN []string) ApiDcimPlatformsListRequest {
	r.manufacturerN = &manufacturerN
	return r
}

// Manufacturer (ID)
func (r ApiDcimPlatformsListRequest) ManufacturerId(manufacturerId []string) ApiDcimPlatformsListRequest {
	r.manufacturerId = &manufacturerId
	return r
}

// Manufacturer (ID)
func (r ApiDcimPlatformsListRequest) ManufacturerIdN(manufacturerIdN []string) ApiDcimPlatformsListRequest {
	r.manufacturerIdN = &manufacturerIdN
	return r
}

func (r ApiDcimPlatformsListRequest) Name(name []string) ApiDcimPlatformsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPlatformsListRequest) NameIc(nameIc []string) ApiDcimPlatformsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPlatformsListRequest) NameIe(nameIe []string) ApiDcimPlatformsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPlatformsListRequest) NameIew(nameIew []string) ApiDcimPlatformsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPlatformsListRequest) NameIre(nameIre []string) ApiDcimPlatformsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPlatformsListRequest) NameIsw(nameIsw []string) ApiDcimPlatformsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPlatformsListRequest) NameN(nameN []string) ApiDcimPlatformsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPlatformsListRequest) NameNic(nameNic []string) ApiDcimPlatformsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPlatformsListRequest) NameNie(nameNie []string) ApiDcimPlatformsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPlatformsListRequest) NameNiew(nameNiew []string) ApiDcimPlatformsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPlatformsListRequest) NameNire(nameNire []string) ApiDcimPlatformsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPlatformsListRequest) NameNisw(nameNisw []string) ApiDcimPlatformsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPlatformsListRequest) NameNre(nameNre []string) ApiDcimPlatformsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPlatformsListRequest) NameRe(nameRe []string) ApiDcimPlatformsListRequest {
	r.nameRe = &nameRe
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriver(napalmDriver []string) ApiDcimPlatformsListRequest {
	r.napalmDriver = &napalmDriver
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverIc(napalmDriverIc []string) ApiDcimPlatformsListRequest {
	r.napalmDriverIc = &napalmDriverIc
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverIe(napalmDriverIe []string) ApiDcimPlatformsListRequest {
	r.napalmDriverIe = &napalmDriverIe
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverIew(napalmDriverIew []string) ApiDcimPlatformsListRequest {
	r.napalmDriverIew = &napalmDriverIew
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverIre(napalmDriverIre []string) ApiDcimPlatformsListRequest {
	r.napalmDriverIre = &napalmDriverIre
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverIsw(napalmDriverIsw []string) ApiDcimPlatformsListRequest {
	r.napalmDriverIsw = &napalmDriverIsw
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverN(napalmDriverN []string) ApiDcimPlatformsListRequest {
	r.napalmDriverN = &napalmDriverN
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverNic(napalmDriverNic []string) ApiDcimPlatformsListRequest {
	r.napalmDriverNic = &napalmDriverNic
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverNie(napalmDriverNie []string) ApiDcimPlatformsListRequest {
	r.napalmDriverNie = &napalmDriverNie
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverNiew(napalmDriverNiew []string) ApiDcimPlatformsListRequest {
	r.napalmDriverNiew = &napalmDriverNiew
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverNire(napalmDriverNire []string) ApiDcimPlatformsListRequest {
	r.napalmDriverNire = &napalmDriverNire
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverNisw(napalmDriverNisw []string) ApiDcimPlatformsListRequest {
	r.napalmDriverNisw = &napalmDriverNisw
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverNre(napalmDriverNre []string) ApiDcimPlatformsListRequest {
	r.napalmDriverNre = &napalmDriverNre
	return r
}

func (r ApiDcimPlatformsListRequest) NapalmDriverRe(napalmDriverRe []string) ApiDcimPlatformsListRequest {
	r.napalmDriverRe = &napalmDriverRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPlatformsListRequest) Offset(offset int32) ApiDcimPlatformsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimPlatformsListRequest) Q(q string) ApiDcimPlatformsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimPlatformsListRequest) Slug(slug []string) ApiDcimPlatformsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIc(slugIc []string) ApiDcimPlatformsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIe(slugIe []string) ApiDcimPlatformsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIew(slugIew []string) ApiDcimPlatformsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIre(slugIre []string) ApiDcimPlatformsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimPlatformsListRequest) SlugIsw(slugIsw []string) ApiDcimPlatformsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimPlatformsListRequest) SlugN(slugN []string) ApiDcimPlatformsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNic(slugNic []string) ApiDcimPlatformsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNie(slugNie []string) ApiDcimPlatformsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNiew(slugNiew []string) ApiDcimPlatformsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNire(slugNire []string) ApiDcimPlatformsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNisw(slugNisw []string) ApiDcimPlatformsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimPlatformsListRequest) SlugNre(slugNre []string) ApiDcimPlatformsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimPlatformsListRequest) SlugRe(slugRe []string) ApiDcimPlatformsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimPlatformsListRequest) Execute() (*PaginatedPlatformList, *http.Response, error) {
	return r.ApiService.DcimPlatformsListExecute(r)
}

/*
DcimPlatformsList Method for DcimPlatformsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPlatformsListRequest
*/
func (a *DcimApiService) DcimPlatformsList(ctx context.Context) ApiDcimPlatformsListRequest {
	return ApiDcimPlatformsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPlatformList
func (a *DcimApiService) DcimPlatformsListExecute(r ApiDcimPlatformsListRequest) (*PaginatedPlatformList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPlatformList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.manufacturer != nil {
		t := *r.manufacturer
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerN != nil {
		t := *r.manufacturerN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer__n", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerId != nil {
		t := *r.manufacturerId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id", parameterToString(t, "multi"))
		}
	}
	if r.manufacturerIdN != nil {
		t := *r.manufacturerIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("manufacturer_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("manufacturer_id__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriver != nil {
		t := *r.napalmDriver
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverIc != nil {
		t := *r.napalmDriverIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__ic", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverIe != nil {
		t := *r.napalmDriverIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__ie", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverIew != nil {
		t := *r.napalmDriverIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__iew", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverIre != nil {
		t := *r.napalmDriverIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__ire", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverIsw != nil {
		t := *r.napalmDriverIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__isw", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverN != nil {
		t := *r.napalmDriverN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__n", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverNic != nil {
		t := *r.napalmDriverNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__nic", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverNie != nil {
		t := *r.napalmDriverNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__nie", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverNiew != nil {
		t := *r.napalmDriverNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__niew", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverNire != nil {
		t := *r.napalmDriverNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__nire", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverNisw != nil {
		t := *r.napalmDriverNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__nisw", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverNre != nil {
		t := *r.napalmDriverNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__nre", parameterToString(t, "multi"))
		}
	}
	if r.napalmDriverRe != nil {
		t := *r.napalmDriverRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("napalm_driver__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("napalm_driver__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePlatform *PatchedWritablePlatform
}

func (r ApiDcimPlatformsPartialUpdateRequest) PatchedWritablePlatform(patchedWritablePlatform PatchedWritablePlatform) ApiDcimPlatformsPartialUpdateRequest {
	r.patchedWritablePlatform = &patchedWritablePlatform
	return r
}

func (r ApiDcimPlatformsPartialUpdateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsPartialUpdateExecute(r)
}

/*
DcimPlatformsPartialUpdate Method for DcimPlatformsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this platform.
 @return ApiDcimPlatformsPartialUpdateRequest
*/
func (a *DcimApiService) DcimPlatformsPartialUpdate(ctx context.Context, id string) ApiDcimPlatformsPartialUpdateRequest {
	return ApiDcimPlatformsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Platform
func (a *DcimApiService) DcimPlatformsPartialUpdateExecute(r ApiDcimPlatformsPartialUpdateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePlatform
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPlatformsRetrieveRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsRetrieveExecute(r)
}

/*
DcimPlatformsRetrieve Method for DcimPlatformsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this platform.
 @return ApiDcimPlatformsRetrieveRequest
*/
func (a *DcimApiService) DcimPlatformsRetrieve(ctx context.Context, id string) ApiDcimPlatformsRetrieveRequest {
	return ApiDcimPlatformsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Platform
func (a *DcimApiService) DcimPlatformsRetrieveExecute(r ApiDcimPlatformsRetrieveRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPlatformsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePlatform *WritablePlatform
}

func (r ApiDcimPlatformsUpdateRequest) WritablePlatform(writablePlatform WritablePlatform) ApiDcimPlatformsUpdateRequest {
	r.writablePlatform = &writablePlatform
	return r
}

func (r ApiDcimPlatformsUpdateRequest) Execute() (*Platform, *http.Response, error) {
	return r.ApiService.DcimPlatformsUpdateExecute(r)
}

/*
DcimPlatformsUpdate Method for DcimPlatformsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this platform.
 @return ApiDcimPlatformsUpdateRequest
*/
func (a *DcimApiService) DcimPlatformsUpdate(ctx context.Context, id string) ApiDcimPlatformsUpdateRequest {
	return ApiDcimPlatformsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Platform
func (a *DcimApiService) DcimPlatformsUpdateExecute(r ApiDcimPlatformsUpdateRequest) (*Platform, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Platform
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPlatformsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/platforms/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePlatform == nil {
		return localVarReturnValue, nil, reportError("writablePlatform is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePlatform
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerConnectionsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	device *[]string
	deviceId *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	site *string
}

// Device (name)
func (r ApiDcimPowerConnectionsListRequest) Device(device []string) ApiDcimPowerConnectionsListRequest {
	r.device = &device
	return r
}

// Device (ID)
func (r ApiDcimPowerConnectionsListRequest) DeviceId(deviceId []string) ApiDcimPowerConnectionsListRequest {
	r.deviceId = &deviceId
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerConnectionsListRequest) Limit(limit int32) ApiDcimPowerConnectionsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerConnectionsListRequest) Name(name []string) ApiDcimPowerConnectionsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameIc(nameIc []string) ApiDcimPowerConnectionsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameIe(nameIe []string) ApiDcimPowerConnectionsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameIew(nameIew []string) ApiDcimPowerConnectionsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameIre(nameIre []string) ApiDcimPowerConnectionsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameIsw(nameIsw []string) ApiDcimPowerConnectionsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameN(nameN []string) ApiDcimPowerConnectionsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameNic(nameNic []string) ApiDcimPowerConnectionsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameNie(nameNie []string) ApiDcimPowerConnectionsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameNiew(nameNiew []string) ApiDcimPowerConnectionsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameNire(nameNire []string) ApiDcimPowerConnectionsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameNisw(nameNisw []string) ApiDcimPowerConnectionsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameNre(nameNre []string) ApiDcimPowerConnectionsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerConnectionsListRequest) NameRe(nameRe []string) ApiDcimPowerConnectionsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerConnectionsListRequest) Offset(offset int32) ApiDcimPowerConnectionsListRequest {
	r.offset = &offset
	return r
}

// Site (slug)
func (r ApiDcimPowerConnectionsListRequest) Site(site string) ApiDcimPowerConnectionsListRequest {
	r.site = &site
	return r
}

func (r ApiDcimPowerConnectionsListRequest) Execute() (*PaginatedPowerPortList, *http.Response, error) {
	return r.ApiService.DcimPowerConnectionsListExecute(r)
}

/*
DcimPowerConnectionsList Method for DcimPowerConnectionsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerConnectionsListRequest
*/
func (a *DcimApiService) DcimPowerConnectionsList(ctx context.Context) ApiDcimPowerConnectionsListRequest {
	return ApiDcimPowerConnectionsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerPortList
func (a *DcimApiService) DcimPowerConnectionsListExecute(r ApiDcimPowerConnectionsListRequest) (*PaginatedPowerPortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerConnectionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-connections/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.site != nil {
		localVarQueryParams.Add("site", parameterToString(*r.site, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPowerFeedsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerFeedsBulkDestroyExecute(r)
}

/*
DcimPowerFeedsBulkDestroy Method for DcimPowerFeedsBulkDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerFeedsBulkDestroyRequest
*/
func (a *DcimApiService) DcimPowerFeedsBulkDestroy(ctx context.Context) ApiDcimPowerFeedsBulkDestroyRequest {
	return ApiDcimPowerFeedsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerFeedsBulkDestroyExecute(r ApiDcimPowerFeedsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePowerFeed *PatchedWritablePowerFeed
}

func (r ApiDcimPowerFeedsBulkPartialUpdateRequest) PatchedWritablePowerFeed(patchedWritablePowerFeed PatchedWritablePowerFeed) ApiDcimPowerFeedsBulkPartialUpdateRequest {
	r.patchedWritablePowerFeed = &patchedWritablePowerFeed
	return r
}

func (r ApiDcimPowerFeedsBulkPartialUpdateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsBulkPartialUpdateExecute(r)
}

/*
DcimPowerFeedsBulkPartialUpdate Method for DcimPowerFeedsBulkPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerFeedsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerFeedsBulkPartialUpdate(ctx context.Context) ApiDcimPowerFeedsBulkPartialUpdateRequest {
	return ApiDcimPowerFeedsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsBulkPartialUpdateExecute(r ApiDcimPowerFeedsBulkPartialUpdateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerFeed
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerFeed *WritablePowerFeed
}

func (r ApiDcimPowerFeedsBulkUpdateRequest) WritablePowerFeed(writablePowerFeed WritablePowerFeed) ApiDcimPowerFeedsBulkUpdateRequest {
	r.writablePowerFeed = &writablePowerFeed
	return r
}

func (r ApiDcimPowerFeedsBulkUpdateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsBulkUpdateExecute(r)
}

/*
DcimPowerFeedsBulkUpdate Method for DcimPowerFeedsBulkUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerFeedsBulkUpdateRequest
*/
func (a *DcimApiService) DcimPowerFeedsBulkUpdate(ctx context.Context) ApiDcimPowerFeedsBulkUpdateRequest {
	return ApiDcimPowerFeedsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsBulkUpdateExecute(r ApiDcimPowerFeedsBulkUpdateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerFeed == nil {
		return localVarReturnValue, nil, reportError("writablePowerFeed is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerFeed
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerFeed *WritablePowerFeed
}

func (r ApiDcimPowerFeedsCreateRequest) WritablePowerFeed(writablePowerFeed WritablePowerFeed) ApiDcimPowerFeedsCreateRequest {
	r.writablePowerFeed = &writablePowerFeed
	return r
}

func (r ApiDcimPowerFeedsCreateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsCreateExecute(r)
}

/*
DcimPowerFeedsCreate Method for DcimPowerFeedsCreate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerFeedsCreateRequest
*/
func (a *DcimApiService) DcimPowerFeedsCreate(ctx context.Context) ApiDcimPowerFeedsCreateRequest {
	return ApiDcimPowerFeedsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsCreateExecute(r ApiDcimPowerFeedsCreateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerFeed == nil {
		return localVarReturnValue, nil, reportError("writablePowerFeed is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerFeed
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerFeedsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerFeedsDestroyExecute(r)
}

/*
DcimPowerFeedsDestroy Method for DcimPowerFeedsDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power feed.
 @return ApiDcimPowerFeedsDestroyRequest
*/
func (a *DcimApiService) DcimPowerFeedsDestroy(ctx context.Context, id string) ApiDcimPowerFeedsDestroyRequest {
	return ApiDcimPowerFeedsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerFeedsDestroyExecute(r ApiDcimPowerFeedsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	amperage *[]int32
	amperageGt *[]int32
	amperageGte *[]int32
	amperageLt *[]int32
	amperageLte *[]int32
	amperageN *[]int32
	cabled *bool
	connected *bool
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	maxUtilization *[]int32
	maxUtilizationGt *[]int32
	maxUtilizationGte *[]int32
	maxUtilizationLt *[]int32
	maxUtilizationLte *[]int32
	maxUtilizationN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	phase *string
	phaseN *string
	powerPanelId *[]string
	powerPanelIdN *[]string
	q *string
	rackId *[]string
	rackIdN *[]string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	status *[]string
	statusN *[]string
	supply *string
	supplyN *string
	tag *[]string
	tagN *[]string
	type_ *string
	typeN *string
	voltage *[]int32
	voltageGt *[]int32
	voltageGte *[]int32
	voltageLt *[]int32
	voltageLte *[]int32
	voltageN *[]int32
}

func (r ApiDcimPowerFeedsListRequest) Amperage(amperage []int32) ApiDcimPowerFeedsListRequest {
	r.amperage = &amperage
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageGt(amperageGt []int32) ApiDcimPowerFeedsListRequest {
	r.amperageGt = &amperageGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageGte(amperageGte []int32) ApiDcimPowerFeedsListRequest {
	r.amperageGte = &amperageGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageLt(amperageLt []int32) ApiDcimPowerFeedsListRequest {
	r.amperageLt = &amperageLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageLte(amperageLte []int32) ApiDcimPowerFeedsListRequest {
	r.amperageLte = &amperageLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) AmperageN(amperageN []int32) ApiDcimPowerFeedsListRequest {
	r.amperageN = &amperageN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Cabled(cabled bool) ApiDcimPowerFeedsListRequest {
	r.cabled = &cabled
	return r
}

// Connected status (bool)
func (r ApiDcimPowerFeedsListRequest) Connected(connected bool) ApiDcimPowerFeedsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimPowerFeedsListRequest) Created(created string) ApiDcimPowerFeedsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedGte(createdGte string) ApiDcimPowerFeedsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) CreatedLte(createdLte string) ApiDcimPowerFeedsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) Id(id []string) ApiDcimPowerFeedsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdIc(idIc []string) ApiDcimPowerFeedsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdIe(idIe []string) ApiDcimPowerFeedsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdIew(idIew []string) ApiDcimPowerFeedsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdIre(idIre []string) ApiDcimPowerFeedsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdIsw(idIsw []string) ApiDcimPowerFeedsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdN(idN []string) ApiDcimPowerFeedsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdNic(idNic []string) ApiDcimPowerFeedsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdNie(idNie []string) ApiDcimPowerFeedsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdNiew(idNiew []string) ApiDcimPowerFeedsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdNire(idNire []string) ApiDcimPowerFeedsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdNisw(idNisw []string) ApiDcimPowerFeedsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdNre(idNre []string) ApiDcimPowerFeedsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPowerFeedsListRequest) IdRe(idRe []string) ApiDcimPowerFeedsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdated(lastUpdated time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimPowerFeedsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerFeedsListRequest) Limit(limit int32) ApiDcimPowerFeedsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilization(maxUtilization []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilization = &maxUtilization
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationGt(maxUtilizationGt []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationGt = &maxUtilizationGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationGte(maxUtilizationGte []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationGte = &maxUtilizationGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationLt(maxUtilizationLt []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationLt = &maxUtilizationLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationLte(maxUtilizationLte []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationLte = &maxUtilizationLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) MaxUtilizationN(maxUtilizationN []int32) ApiDcimPowerFeedsListRequest {
	r.maxUtilizationN = &maxUtilizationN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Name(name []string) ApiDcimPowerFeedsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIc(nameIc []string) ApiDcimPowerFeedsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIe(nameIe []string) ApiDcimPowerFeedsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIew(nameIew []string) ApiDcimPowerFeedsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIre(nameIre []string) ApiDcimPowerFeedsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameIsw(nameIsw []string) ApiDcimPowerFeedsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameN(nameN []string) ApiDcimPowerFeedsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNic(nameNic []string) ApiDcimPowerFeedsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNie(nameNie []string) ApiDcimPowerFeedsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNiew(nameNiew []string) ApiDcimPowerFeedsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNire(nameNire []string) ApiDcimPowerFeedsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNisw(nameNisw []string) ApiDcimPowerFeedsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameNre(nameNre []string) ApiDcimPowerFeedsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerFeedsListRequest) NameRe(nameRe []string) ApiDcimPowerFeedsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerFeedsListRequest) Offset(offset int32) ApiDcimPowerFeedsListRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimPowerFeedsListRequest) Phase(phase string) ApiDcimPowerFeedsListRequest {
	r.phase = &phase
	return r
}

func (r ApiDcimPowerFeedsListRequest) PhaseN(phaseN string) ApiDcimPowerFeedsListRequest {
	r.phaseN = &phaseN
	return r
}

// Power panel (ID)
func (r ApiDcimPowerFeedsListRequest) PowerPanelId(powerPanelId []string) ApiDcimPowerFeedsListRequest {
	r.powerPanelId = &powerPanelId
	return r
}

// Power panel (ID)
func (r ApiDcimPowerFeedsListRequest) PowerPanelIdN(powerPanelIdN []string) ApiDcimPowerFeedsListRequest {
	r.powerPanelIdN = &powerPanelIdN
	return r
}

// Search
func (r ApiDcimPowerFeedsListRequest) Q(q string) ApiDcimPowerFeedsListRequest {
	r.q = &q
	return r
}

// Rack (ID)
func (r ApiDcimPowerFeedsListRequest) RackId(rackId []string) ApiDcimPowerFeedsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimPowerFeedsListRequest) RackIdN(rackIdN []string) ApiDcimPowerFeedsListRequest {
	r.rackIdN = &rackIdN
	return r
}

// Region (slug)
func (r ApiDcimPowerFeedsListRequest) Region(region []string) ApiDcimPowerFeedsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimPowerFeedsListRequest) RegionN(regionN []string) ApiDcimPowerFeedsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimPowerFeedsListRequest) RegionId(regionId []string) ApiDcimPowerFeedsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimPowerFeedsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerFeedsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerFeedsListRequest) Site(site []string) ApiDcimPowerFeedsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerFeedsListRequest) SiteN(siteN []string) ApiDcimPowerFeedsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimPowerFeedsListRequest) SiteId(siteId []string) ApiDcimPowerFeedsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerFeedsListRequest) SiteIdN(siteIdN []string) ApiDcimPowerFeedsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Status(status []string) ApiDcimPowerFeedsListRequest {
	r.status = &status
	return r
}

func (r ApiDcimPowerFeedsListRequest) StatusN(statusN []string) ApiDcimPowerFeedsListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Supply(supply string) ApiDcimPowerFeedsListRequest {
	r.supply = &supply
	return r
}

func (r ApiDcimPowerFeedsListRequest) SupplyN(supplyN string) ApiDcimPowerFeedsListRequest {
	r.supplyN = &supplyN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Tag(tag []string) ApiDcimPowerFeedsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerFeedsListRequest) TagN(tagN []string) ApiDcimPowerFeedsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Type_(type_ string) ApiDcimPowerFeedsListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimPowerFeedsListRequest) TypeN(typeN string) ApiDcimPowerFeedsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Voltage(voltage []int32) ApiDcimPowerFeedsListRequest {
	r.voltage = &voltage
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageGt(voltageGt []int32) ApiDcimPowerFeedsListRequest {
	r.voltageGt = &voltageGt
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageGte(voltageGte []int32) ApiDcimPowerFeedsListRequest {
	r.voltageGte = &voltageGte
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageLt(voltageLt []int32) ApiDcimPowerFeedsListRequest {
	r.voltageLt = &voltageLt
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageLte(voltageLte []int32) ApiDcimPowerFeedsListRequest {
	r.voltageLte = &voltageLte
	return r
}

func (r ApiDcimPowerFeedsListRequest) VoltageN(voltageN []int32) ApiDcimPowerFeedsListRequest {
	r.voltageN = &voltageN
	return r
}

func (r ApiDcimPowerFeedsListRequest) Execute() (*PaginatedPowerFeedList, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsListExecute(r)
}

/*
DcimPowerFeedsList Method for DcimPowerFeedsList

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerFeedsListRequest
*/
func (a *DcimApiService) DcimPowerFeedsList(ctx context.Context) ApiDcimPowerFeedsListRequest {
	return ApiDcimPowerFeedsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerFeedList
func (a *DcimApiService) DcimPowerFeedsListExecute(r ApiDcimPowerFeedsListRequest) (*PaginatedPowerFeedList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerFeedList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.amperage != nil {
		t := *r.amperage
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("amperage", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("amperage", parameterToString(t, "multi"))
		}
	}
	if r.amperageGt != nil {
		t := *r.amperageGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("amperage__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("amperage__gt", parameterToString(t, "multi"))
		}
	}
	if r.amperageGte != nil {
		t := *r.amperageGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("amperage__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("amperage__gte", parameterToString(t, "multi"))
		}
	}
	if r.amperageLt != nil {
		t := *r.amperageLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("amperage__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("amperage__lt", parameterToString(t, "multi"))
		}
	}
	if r.amperageLte != nil {
		t := *r.amperageLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("amperage__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("amperage__lte", parameterToString(t, "multi"))
		}
	}
	if r.amperageN != nil {
		t := *r.amperageN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("amperage__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("amperage__n", parameterToString(t, "multi"))
		}
	}
	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.maxUtilization != nil {
		t := *r.maxUtilization
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("max_utilization", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("max_utilization", parameterToString(t, "multi"))
		}
	}
	if r.maxUtilizationGt != nil {
		t := *r.maxUtilizationGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("max_utilization__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("max_utilization__gt", parameterToString(t, "multi"))
		}
	}
	if r.maxUtilizationGte != nil {
		t := *r.maxUtilizationGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("max_utilization__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("max_utilization__gte", parameterToString(t, "multi"))
		}
	}
	if r.maxUtilizationLt != nil {
		t := *r.maxUtilizationLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("max_utilization__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("max_utilization__lt", parameterToString(t, "multi"))
		}
	}
	if r.maxUtilizationLte != nil {
		t := *r.maxUtilizationLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("max_utilization__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("max_utilization__lte", parameterToString(t, "multi"))
		}
	}
	if r.maxUtilizationN != nil {
		t := *r.maxUtilizationN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("max_utilization__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("max_utilization__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.phase != nil {
		localVarQueryParams.Add("phase", parameterToString(*r.phase, ""))
	}
	if r.phaseN != nil {
		localVarQueryParams.Add("phase__n", parameterToString(*r.phaseN, ""))
	}
	if r.powerPanelId != nil {
		t := *r.powerPanelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("power_panel_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("power_panel_id", parameterToString(t, "multi"))
		}
	}
	if r.powerPanelIdN != nil {
		t := *r.powerPanelIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("power_panel_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("power_panel_id__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id", parameterToString(t, "multi"))
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id__n", parameterToString(t, "multi"))
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.supply != nil {
		localVarQueryParams.Add("supply", parameterToString(*r.supply, ""))
	}
	if r.supplyN != nil {
		localVarQueryParams.Add("supply__n", parameterToString(*r.supplyN, ""))
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	if r.voltage != nil {
		t := *r.voltage
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("voltage", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("voltage", parameterToString(t, "multi"))
		}
	}
	if r.voltageGt != nil {
		t := *r.voltageGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("voltage__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("voltage__gt", parameterToString(t, "multi"))
		}
	}
	if r.voltageGte != nil {
		t := *r.voltageGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("voltage__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("voltage__gte", parameterToString(t, "multi"))
		}
	}
	if r.voltageLt != nil {
		t := *r.voltageLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("voltage__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("voltage__lt", parameterToString(t, "multi"))
		}
	}
	if r.voltageLte != nil {
		t := *r.voltageLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("voltage__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("voltage__lte", parameterToString(t, "multi"))
		}
	}
	if r.voltageN != nil {
		t := *r.voltageN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("voltage__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("voltage__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePowerFeed *PatchedWritablePowerFeed
}

func (r ApiDcimPowerFeedsPartialUpdateRequest) PatchedWritablePowerFeed(patchedWritablePowerFeed PatchedWritablePowerFeed) ApiDcimPowerFeedsPartialUpdateRequest {
	r.patchedWritablePowerFeed = &patchedWritablePowerFeed
	return r
}

func (r ApiDcimPowerFeedsPartialUpdateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsPartialUpdateExecute(r)
}

/*
DcimPowerFeedsPartialUpdate Method for DcimPowerFeedsPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power feed.
 @return ApiDcimPowerFeedsPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerFeedsPartialUpdate(ctx context.Context, id string) ApiDcimPowerFeedsPartialUpdateRequest {
	return ApiDcimPowerFeedsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsPartialUpdateExecute(r ApiDcimPowerFeedsPartialUpdateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerFeed
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerFeedsRetrieveRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsRetrieveExecute(r)
}

/*
DcimPowerFeedsRetrieve Method for DcimPowerFeedsRetrieve

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power feed.
 @return ApiDcimPowerFeedsRetrieveRequest
*/
func (a *DcimApiService) DcimPowerFeedsRetrieve(ctx context.Context, id string) ApiDcimPowerFeedsRetrieveRequest {
	return ApiDcimPowerFeedsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsRetrieveExecute(r ApiDcimPowerFeedsRetrieveRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerFeedsTraceRetrieveRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsTraceRetrieveExecute(r)
}

/*
DcimPowerFeedsTraceRetrieve Method for DcimPowerFeedsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power feed.
 @return ApiDcimPowerFeedsTraceRetrieveRequest
*/
func (a *DcimApiService) DcimPowerFeedsTraceRetrieve(ctx context.Context, id string) ApiDcimPowerFeedsTraceRetrieveRequest {
	return ApiDcimPowerFeedsTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsTraceRetrieveExecute(r ApiDcimPowerFeedsTraceRetrieveRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerFeedsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePowerFeed *WritablePowerFeed
}

func (r ApiDcimPowerFeedsUpdateRequest) WritablePowerFeed(writablePowerFeed WritablePowerFeed) ApiDcimPowerFeedsUpdateRequest {
	r.writablePowerFeed = &writablePowerFeed
	return r
}

func (r ApiDcimPowerFeedsUpdateRequest) Execute() (*PowerFeed, *http.Response, error) {
	return r.ApiService.DcimPowerFeedsUpdateExecute(r)
}

/*
DcimPowerFeedsUpdate Method for DcimPowerFeedsUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power feed.
 @return ApiDcimPowerFeedsUpdateRequest
*/
func (a *DcimApiService) DcimPowerFeedsUpdate(ctx context.Context, id string) ApiDcimPowerFeedsUpdateRequest {
	return ApiDcimPowerFeedsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerFeed
func (a *DcimApiService) DcimPowerFeedsUpdateExecute(r ApiDcimPowerFeedsUpdateRequest) (*PowerFeed, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerFeed
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerFeedsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-feeds/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerFeed == nil {
		return localVarReturnValue, nil, reportError("writablePowerFeed is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerFeed
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPowerOutletTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesBulkDestroyExecute(r)
}

/*
DcimPowerOutletTemplatesBulkDestroy Method for DcimPowerOutletTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesBulkDestroy(ctx context.Context) ApiDcimPowerOutletTemplatesBulkDestroyRequest {
	return ApiDcimPowerOutletTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerOutletTemplatesBulkDestroyExecute(r ApiDcimPowerOutletTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePowerOutletTemplate *PatchedWritablePowerOutletTemplate
}

func (r ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest) PatchedWritablePowerOutletTemplate(patchedWritablePowerOutletTemplate PatchedWritablePowerOutletTemplate) ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest {
	r.patchedWritablePowerOutletTemplate = &patchedWritablePowerOutletTemplate
	return r
}

func (r ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesBulkPartialUpdate Method for DcimPowerOutletTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest {
	return ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerOutletTemplate
func (a *DcimApiService) DcimPowerOutletTemplatesBulkPartialUpdateExecute(r ApiDcimPowerOutletTemplatesBulkPartialUpdateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerOutletTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerOutletTemplate *WritablePowerOutletTemplate
}

func (r ApiDcimPowerOutletTemplatesBulkUpdateRequest) WritablePowerOutletTemplate(writablePowerOutletTemplate WritablePowerOutletTemplate) ApiDcimPowerOutletTemplatesBulkUpdateRequest {
	r.writablePowerOutletTemplate = &writablePowerOutletTemplate
	return r
}

func (r ApiDcimPowerOutletTemplatesBulkUpdateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesBulkUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesBulkUpdate Method for DcimPowerOutletTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesBulkUpdate(ctx context.Context) ApiDcimPowerOutletTemplatesBulkUpdateRequest {
	return ApiDcimPowerOutletTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerOutletTemplate
func (a *DcimApiService) DcimPowerOutletTemplatesBulkUpdateExecute(r ApiDcimPowerOutletTemplatesBulkUpdateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletTemplate == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerOutletTemplate *WritablePowerOutletTemplate
}

func (r ApiDcimPowerOutletTemplatesCreateRequest) WritablePowerOutletTemplate(writablePowerOutletTemplate WritablePowerOutletTemplate) ApiDcimPowerOutletTemplatesCreateRequest {
	r.writablePowerOutletTemplate = &writablePowerOutletTemplate
	return r
}

func (r ApiDcimPowerOutletTemplatesCreateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesCreateExecute(r)
}

/*
DcimPowerOutletTemplatesCreate Method for DcimPowerOutletTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletTemplatesCreateRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesCreate(ctx context.Context) ApiDcimPowerOutletTemplatesCreateRequest {
	return ApiDcimPowerOutletTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerOutletTemplate
func (a *DcimApiService) DcimPowerOutletTemplatesCreateExecute(r ApiDcimPowerOutletTemplatesCreateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletTemplate == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerOutletTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesDestroyExecute(r)
}

/*
DcimPowerOutletTemplatesDestroy Method for DcimPowerOutletTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet template.
 @return ApiDcimPowerOutletTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesDestroy(ctx context.Context, id string) ApiDcimPowerOutletTemplatesDestroyRequest {
	return ApiDcimPowerOutletTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerOutletTemplatesDestroyExecute(r ApiDcimPowerOutletTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	feedLeg *string
	feedLegN *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	type_ *string
	typeN *string
}

// Device type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimPowerOutletTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerOutletTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletTemplatesListRequest) FeedLeg(feedLeg string) ApiDcimPowerOutletTemplatesListRequest {
	r.feedLeg = &feedLeg
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletTemplatesListRequest) FeedLegN(feedLegN string) ApiDcimPowerOutletTemplatesListRequest {
	r.feedLegN = &feedLegN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Id(id []string) ApiDcimPowerOutletTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdIc(idIc []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdIe(idIe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdIew(idIew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdIre(idIre []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdIsw(idIsw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdN(idN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdNic(idNic []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdNie(idNie []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdNiew(idNiew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdNire(idNire []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdNisw(idNisw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdNre(idNre []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) IdRe(idRe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerOutletTemplatesListRequest) Limit(limit int32) ApiDcimPowerOutletTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Name(name []string) ApiDcimPowerOutletTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIc(nameIc []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIe(nameIe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIew(nameIew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIre(nameIre []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameN(nameN []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNic(nameNic []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNie(nameNie []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNire(nameNire []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameNre(nameNre []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) NameRe(nameRe []string) ApiDcimPowerOutletTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerOutletTemplatesListRequest) Offset(offset int32) ApiDcimPowerOutletTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimPowerOutletTemplatesListRequest) Q(q string) ApiDcimPowerOutletTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Type_(type_ string) ApiDcimPowerOutletTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) TypeN(typeN string) ApiDcimPowerOutletTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerOutletTemplatesListRequest) Execute() (*PaginatedPowerOutletTemplateList, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesListExecute(r)
}

/*
DcimPowerOutletTemplatesList Method for DcimPowerOutletTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletTemplatesListRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesList(ctx context.Context) ApiDcimPowerOutletTemplatesListRequest {
	return ApiDcimPowerOutletTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerOutletTemplateList
func (a *DcimApiService) DcimPowerOutletTemplatesListExecute(r ApiDcimPowerOutletTemplatesListRequest) (*PaginatedPowerOutletTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerOutletTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.feedLeg != nil {
		localVarQueryParams.Add("feed_leg", parameterToString(*r.feedLeg, ""))
	}
	if r.feedLegN != nil {
		localVarQueryParams.Add("feed_leg__n", parameterToString(*r.feedLegN, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePowerOutletTemplate *PatchedWritablePowerOutletTemplate
}

func (r ApiDcimPowerOutletTemplatesPartialUpdateRequest) PatchedWritablePowerOutletTemplate(patchedWritablePowerOutletTemplate PatchedWritablePowerOutletTemplate) ApiDcimPowerOutletTemplatesPartialUpdateRequest {
	r.patchedWritablePowerOutletTemplate = &patchedWritablePowerOutletTemplate
	return r
}

func (r ApiDcimPowerOutletTemplatesPartialUpdateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesPartialUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesPartialUpdate Method for DcimPowerOutletTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet template.
 @return ApiDcimPowerOutletTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimPowerOutletTemplatesPartialUpdateRequest {
	return ApiDcimPowerOutletTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutletTemplate
func (a *DcimApiService) DcimPowerOutletTemplatesPartialUpdateExecute(r ApiDcimPowerOutletTemplatesPartialUpdateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerOutletTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerOutletTemplatesRetrieveRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesRetrieveExecute(r)
}

/*
DcimPowerOutletTemplatesRetrieve Method for DcimPowerOutletTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet template.
 @return ApiDcimPowerOutletTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesRetrieve(ctx context.Context, id string) ApiDcimPowerOutletTemplatesRetrieveRequest {
	return ApiDcimPowerOutletTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutletTemplate
func (a *DcimApiService) DcimPowerOutletTemplatesRetrieveExecute(r ApiDcimPowerOutletTemplatesRetrieveRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePowerOutletTemplate *WritablePowerOutletTemplate
}

func (r ApiDcimPowerOutletTemplatesUpdateRequest) WritablePowerOutletTemplate(writablePowerOutletTemplate WritablePowerOutletTemplate) ApiDcimPowerOutletTemplatesUpdateRequest {
	r.writablePowerOutletTemplate = &writablePowerOutletTemplate
	return r
}

func (r ApiDcimPowerOutletTemplatesUpdateRequest) Execute() (*PowerOutletTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerOutletTemplatesUpdateExecute(r)
}

/*
DcimPowerOutletTemplatesUpdate Method for DcimPowerOutletTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet template.
 @return ApiDcimPowerOutletTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletTemplatesUpdate(ctx context.Context, id string) ApiDcimPowerOutletTemplatesUpdateRequest {
	return ApiDcimPowerOutletTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutletTemplate
func (a *DcimApiService) DcimPowerOutletTemplatesUpdateExecute(r ApiDcimPowerOutletTemplatesUpdateRequest) (*PowerOutletTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutletTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlet-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutletTemplate == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutletTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutletTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPowerOutletsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletsBulkDestroyExecute(r)
}

/*
DcimPowerOutletsBulkDestroy Method for DcimPowerOutletsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletsBulkDestroyRequest
*/
func (a *DcimApiService) DcimPowerOutletsBulkDestroy(ctx context.Context) ApiDcimPowerOutletsBulkDestroyRequest {
	return ApiDcimPowerOutletsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerOutletsBulkDestroyExecute(r ApiDcimPowerOutletsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePowerOutlet *PatchedWritablePowerOutlet
}

func (r ApiDcimPowerOutletsBulkPartialUpdateRequest) PatchedWritablePowerOutlet(patchedWritablePowerOutlet PatchedWritablePowerOutlet) ApiDcimPowerOutletsBulkPartialUpdateRequest {
	r.patchedWritablePowerOutlet = &patchedWritablePowerOutlet
	return r
}

func (r ApiDcimPowerOutletsBulkPartialUpdateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsBulkPartialUpdateExecute(r)
}

/*
DcimPowerOutletsBulkPartialUpdate Method for DcimPowerOutletsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletsBulkPartialUpdate(ctx context.Context) ApiDcimPowerOutletsBulkPartialUpdateRequest {
	return ApiDcimPowerOutletsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsBulkPartialUpdateExecute(r ApiDcimPowerOutletsBulkPartialUpdateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerOutlet
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerOutlet *WritablePowerOutlet
}

func (r ApiDcimPowerOutletsBulkUpdateRequest) WritablePowerOutlet(writablePowerOutlet WritablePowerOutlet) ApiDcimPowerOutletsBulkUpdateRequest {
	r.writablePowerOutlet = &writablePowerOutlet
	return r
}

func (r ApiDcimPowerOutletsBulkUpdateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsBulkUpdateExecute(r)
}

/*
DcimPowerOutletsBulkUpdate Method for DcimPowerOutletsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletsBulkUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletsBulkUpdate(ctx context.Context) ApiDcimPowerOutletsBulkUpdateRequest {
	return ApiDcimPowerOutletsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsBulkUpdateExecute(r ApiDcimPowerOutletsBulkUpdateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutlet == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutlet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutlet
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerOutlet *WritablePowerOutlet
}

func (r ApiDcimPowerOutletsCreateRequest) WritablePowerOutlet(writablePowerOutlet WritablePowerOutlet) ApiDcimPowerOutletsCreateRequest {
	r.writablePowerOutlet = &writablePowerOutlet
	return r
}

func (r ApiDcimPowerOutletsCreateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsCreateExecute(r)
}

/*
DcimPowerOutletsCreate Method for DcimPowerOutletsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletsCreateRequest
*/
func (a *DcimApiService) DcimPowerOutletsCreate(ctx context.Context) ApiDcimPowerOutletsCreateRequest {
	return ApiDcimPowerOutletsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsCreateExecute(r ApiDcimPowerOutletsCreateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutlet == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutlet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutlet
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerOutletsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerOutletsDestroyExecute(r)
}

/*
DcimPowerOutletsDestroy Method for DcimPowerOutletsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet.
 @return ApiDcimPowerOutletsDestroyRequest
*/
func (a *DcimApiService) DcimPowerOutletsDestroy(ctx context.Context, id string) ApiDcimPowerOutletsDestroyRequest {
	return ApiDcimPowerOutletsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerOutletsDestroyExecute(r ApiDcimPowerOutletsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	cabled *bool
	connected *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	feedLeg *string
	feedLegN *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *[]string
	typeN *[]string
}

func (r ApiDcimPowerOutletsListRequest) Cabled(cabled bool) ApiDcimPowerOutletsListRequest {
	r.cabled = &cabled
	return r
}

// Connected status (bool)
func (r ApiDcimPowerOutletsListRequest) Connected(connected bool) ApiDcimPowerOutletsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimPowerOutletsListRequest) Description(description []string) ApiDcimPowerOutletsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIre(descriptionIre []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerOutletsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionN(descriptionN []string) ApiDcimPowerOutletsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNire(descriptionNire []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionNre(descriptionNre []string) ApiDcimPowerOutletsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimPowerOutletsListRequest) DescriptionRe(descriptionRe []string) ApiDcimPowerOutletsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimPowerOutletsListRequest) Device(device []*string) ApiDcimPowerOutletsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimPowerOutletsListRequest) DeviceN(deviceN []*string) ApiDcimPowerOutletsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceId(deviceId []string) ApiDcimPowerOutletsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimPowerOutletsListRequest) DeviceIdN(deviceIdN []string) ApiDcimPowerOutletsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletsListRequest) FeedLeg(feedLeg string) ApiDcimPowerOutletsListRequest {
	r.feedLeg = &feedLeg
	return r
}

// Phase (for three-phase feeds)
func (r ApiDcimPowerOutletsListRequest) FeedLegN(feedLegN string) ApiDcimPowerOutletsListRequest {
	r.feedLegN = &feedLegN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Id(id []string) ApiDcimPowerOutletsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdIc(idIc []string) ApiDcimPowerOutletsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdIe(idIe []string) ApiDcimPowerOutletsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdIew(idIew []string) ApiDcimPowerOutletsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdIre(idIre []string) ApiDcimPowerOutletsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdIsw(idIsw []string) ApiDcimPowerOutletsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdN(idN []string) ApiDcimPowerOutletsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdNic(idNic []string) ApiDcimPowerOutletsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdNie(idNie []string) ApiDcimPowerOutletsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdNiew(idNiew []string) ApiDcimPowerOutletsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdNire(idNire []string) ApiDcimPowerOutletsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdNisw(idNisw []string) ApiDcimPowerOutletsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdNre(idNre []string) ApiDcimPowerOutletsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPowerOutletsListRequest) IdRe(idRe []string) ApiDcimPowerOutletsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerOutletsListRequest) Limit(limit int32) ApiDcimPowerOutletsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerOutletsListRequest) Name(name []string) ApiDcimPowerOutletsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIc(nameIc []string) ApiDcimPowerOutletsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIe(nameIe []string) ApiDcimPowerOutletsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIew(nameIew []string) ApiDcimPowerOutletsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIre(nameIre []string) ApiDcimPowerOutletsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameIsw(nameIsw []string) ApiDcimPowerOutletsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameN(nameN []string) ApiDcimPowerOutletsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNic(nameNic []string) ApiDcimPowerOutletsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNie(nameNie []string) ApiDcimPowerOutletsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNiew(nameNiew []string) ApiDcimPowerOutletsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNire(nameNire []string) ApiDcimPowerOutletsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNisw(nameNisw []string) ApiDcimPowerOutletsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameNre(nameNre []string) ApiDcimPowerOutletsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerOutletsListRequest) NameRe(nameRe []string) ApiDcimPowerOutletsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerOutletsListRequest) Offset(offset int32) ApiDcimPowerOutletsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimPowerOutletsListRequest) Q(q string) ApiDcimPowerOutletsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimPowerOutletsListRequest) Region(region []string) ApiDcimPowerOutletsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimPowerOutletsListRequest) RegionN(regionN []string) ApiDcimPowerOutletsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimPowerOutletsListRequest) RegionId(regionId []string) ApiDcimPowerOutletsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimPowerOutletsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerOutletsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerOutletsListRequest) Site(site []string) ApiDcimPowerOutletsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerOutletsListRequest) SiteN(siteN []string) ApiDcimPowerOutletsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimPowerOutletsListRequest) SiteId(siteId []string) ApiDcimPowerOutletsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerOutletsListRequest) SiteIdN(siteIdN []string) ApiDcimPowerOutletsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Tag(tag []string) ApiDcimPowerOutletsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerOutletsListRequest) TagN(tagN []string) ApiDcimPowerOutletsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimPowerOutletsListRequest) Type_(type_ []string) ApiDcimPowerOutletsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimPowerOutletsListRequest) TypeN(typeN []string) ApiDcimPowerOutletsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerOutletsListRequest) Execute() (*PaginatedPowerOutletList, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsListExecute(r)
}

/*
DcimPowerOutletsList Method for DcimPowerOutletsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerOutletsListRequest
*/
func (a *DcimApiService) DcimPowerOutletsList(ctx context.Context) ApiDcimPowerOutletsListRequest {
	return ApiDcimPowerOutletsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerOutletList
func (a *DcimApiService) DcimPowerOutletsListExecute(r ApiDcimPowerOutletsListRequest) (*PaginatedPowerOutletList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerOutletList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.feedLeg != nil {
		localVarQueryParams.Add("feed_leg", parameterToString(*r.feedLeg, ""))
	}
	if r.feedLegN != nil {
		localVarQueryParams.Add("feed_leg__n", parameterToString(*r.feedLegN, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePowerOutlet *PatchedWritablePowerOutlet
}

func (r ApiDcimPowerOutletsPartialUpdateRequest) PatchedWritablePowerOutlet(patchedWritablePowerOutlet PatchedWritablePowerOutlet) ApiDcimPowerOutletsPartialUpdateRequest {
	r.patchedWritablePowerOutlet = &patchedWritablePowerOutlet
	return r
}

func (r ApiDcimPowerOutletsPartialUpdateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsPartialUpdateExecute(r)
}

/*
DcimPowerOutletsPartialUpdate Method for DcimPowerOutletsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet.
 @return ApiDcimPowerOutletsPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletsPartialUpdate(ctx context.Context, id string) ApiDcimPowerOutletsPartialUpdateRequest {
	return ApiDcimPowerOutletsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsPartialUpdateExecute(r ApiDcimPowerOutletsPartialUpdateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerOutlet
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerOutletsRetrieveRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsRetrieveExecute(r)
}

/*
DcimPowerOutletsRetrieve Method for DcimPowerOutletsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet.
 @return ApiDcimPowerOutletsRetrieveRequest
*/
func (a *DcimApiService) DcimPowerOutletsRetrieve(ctx context.Context, id string) ApiDcimPowerOutletsRetrieveRequest {
	return ApiDcimPowerOutletsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsRetrieveExecute(r ApiDcimPowerOutletsRetrieveRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerOutletsTraceRetrieveRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsTraceRetrieveExecute(r)
}

/*
DcimPowerOutletsTraceRetrieve Method for DcimPowerOutletsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet.
 @return ApiDcimPowerOutletsTraceRetrieveRequest
*/
func (a *DcimApiService) DcimPowerOutletsTraceRetrieve(ctx context.Context, id string) ApiDcimPowerOutletsTraceRetrieveRequest {
	return ApiDcimPowerOutletsTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsTraceRetrieveExecute(r ApiDcimPowerOutletsTraceRetrieveRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerOutletsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePowerOutlet *WritablePowerOutlet
}

func (r ApiDcimPowerOutletsUpdateRequest) WritablePowerOutlet(writablePowerOutlet WritablePowerOutlet) ApiDcimPowerOutletsUpdateRequest {
	r.writablePowerOutlet = &writablePowerOutlet
	return r
}

func (r ApiDcimPowerOutletsUpdateRequest) Execute() (*PowerOutlet, *http.Response, error) {
	return r.ApiService.DcimPowerOutletsUpdateExecute(r)
}

/*
DcimPowerOutletsUpdate Method for DcimPowerOutletsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power outlet.
 @return ApiDcimPowerOutletsUpdateRequest
*/
func (a *DcimApiService) DcimPowerOutletsUpdate(ctx context.Context, id string) ApiDcimPowerOutletsUpdateRequest {
	return ApiDcimPowerOutletsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerOutlet
func (a *DcimApiService) DcimPowerOutletsUpdateExecute(r ApiDcimPowerOutletsUpdateRequest) (*PowerOutlet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerOutlet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerOutletsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-outlets/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerOutlet == nil {
		return localVarReturnValue, nil, reportError("writablePowerOutlet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerOutlet
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPowerPanelsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPanelsBulkDestroyExecute(r)
}

/*
DcimPowerPanelsBulkDestroy Method for DcimPowerPanelsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPanelsBulkDestroyRequest
*/
func (a *DcimApiService) DcimPowerPanelsBulkDestroy(ctx context.Context) ApiDcimPowerPanelsBulkDestroyRequest {
	return ApiDcimPowerPanelsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerPanelsBulkDestroyExecute(r ApiDcimPowerPanelsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePowerPanel *PatchedWritablePowerPanel
}

func (r ApiDcimPowerPanelsBulkPartialUpdateRequest) PatchedWritablePowerPanel(patchedWritablePowerPanel PatchedWritablePowerPanel) ApiDcimPowerPanelsBulkPartialUpdateRequest {
	r.patchedWritablePowerPanel = &patchedWritablePowerPanel
	return r
}

func (r ApiDcimPowerPanelsBulkPartialUpdateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsBulkPartialUpdateExecute(r)
}

/*
DcimPowerPanelsBulkPartialUpdate Method for DcimPowerPanelsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPanelsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerPanelsBulkPartialUpdate(ctx context.Context) ApiDcimPowerPanelsBulkPartialUpdateRequest {
	return ApiDcimPowerPanelsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPanel
func (a *DcimApiService) DcimPowerPanelsBulkPartialUpdateExecute(r ApiDcimPowerPanelsBulkPartialUpdateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPanel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerPanel *WritablePowerPanel
}

func (r ApiDcimPowerPanelsBulkUpdateRequest) WritablePowerPanel(writablePowerPanel WritablePowerPanel) ApiDcimPowerPanelsBulkUpdateRequest {
	r.writablePowerPanel = &writablePowerPanel
	return r
}

func (r ApiDcimPowerPanelsBulkUpdateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsBulkUpdateExecute(r)
}

/*
DcimPowerPanelsBulkUpdate Method for DcimPowerPanelsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPanelsBulkUpdateRequest
*/
func (a *DcimApiService) DcimPowerPanelsBulkUpdate(ctx context.Context) ApiDcimPowerPanelsBulkUpdateRequest {
	return ApiDcimPowerPanelsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPanel
func (a *DcimApiService) DcimPowerPanelsBulkUpdateExecute(r ApiDcimPowerPanelsBulkUpdateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPanel == nil {
		return localVarReturnValue, nil, reportError("writablePowerPanel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPanel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerPanel *WritablePowerPanel
}

func (r ApiDcimPowerPanelsCreateRequest) WritablePowerPanel(writablePowerPanel WritablePowerPanel) ApiDcimPowerPanelsCreateRequest {
	r.writablePowerPanel = &writablePowerPanel
	return r
}

func (r ApiDcimPowerPanelsCreateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsCreateExecute(r)
}

/*
DcimPowerPanelsCreate Method for DcimPowerPanelsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPanelsCreateRequest
*/
func (a *DcimApiService) DcimPowerPanelsCreate(ctx context.Context) ApiDcimPowerPanelsCreateRequest {
	return ApiDcimPowerPanelsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPanel
func (a *DcimApiService) DcimPowerPanelsCreateExecute(r ApiDcimPowerPanelsCreateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPanel == nil {
		return localVarReturnValue, nil, reportError("writablePowerPanel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPanel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPanelsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPanelsDestroyExecute(r)
}

/*
DcimPowerPanelsDestroy Method for DcimPowerPanelsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power panel.
 @return ApiDcimPowerPanelsDestroyRequest
*/
func (a *DcimApiService) DcimPowerPanelsDestroy(ctx context.Context, id string) ApiDcimPowerPanelsDestroyRequest {
	return ApiDcimPowerPanelsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerPanelsDestroyExecute(r ApiDcimPowerPanelsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	rackGroupId *[]string
	rackGroupIdN *[]string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
}

func (r ApiDcimPowerPanelsListRequest) Created(created string) ApiDcimPowerPanelsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedGte(createdGte string) ApiDcimPowerPanelsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimPowerPanelsListRequest) CreatedLte(createdLte string) ApiDcimPowerPanelsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimPowerPanelsListRequest) Id(id []string) ApiDcimPowerPanelsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdIc(idIc []string) ApiDcimPowerPanelsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdIe(idIe []string) ApiDcimPowerPanelsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdIew(idIew []string) ApiDcimPowerPanelsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdIre(idIre []string) ApiDcimPowerPanelsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdIsw(idIsw []string) ApiDcimPowerPanelsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdN(idN []string) ApiDcimPowerPanelsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdNic(idNic []string) ApiDcimPowerPanelsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdNie(idNie []string) ApiDcimPowerPanelsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdNiew(idNiew []string) ApiDcimPowerPanelsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdNire(idNire []string) ApiDcimPowerPanelsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdNisw(idNisw []string) ApiDcimPowerPanelsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdNre(idNre []string) ApiDcimPowerPanelsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPowerPanelsListRequest) IdRe(idRe []string) ApiDcimPowerPanelsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdated(lastUpdated time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimPowerPanelsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimPowerPanelsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerPanelsListRequest) Limit(limit int32) ApiDcimPowerPanelsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerPanelsListRequest) Name(name []string) ApiDcimPowerPanelsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIc(nameIc []string) ApiDcimPowerPanelsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIe(nameIe []string) ApiDcimPowerPanelsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIew(nameIew []string) ApiDcimPowerPanelsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIre(nameIre []string) ApiDcimPowerPanelsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameIsw(nameIsw []string) ApiDcimPowerPanelsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameN(nameN []string) ApiDcimPowerPanelsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNic(nameNic []string) ApiDcimPowerPanelsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNie(nameNie []string) ApiDcimPowerPanelsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNiew(nameNiew []string) ApiDcimPowerPanelsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNire(nameNire []string) ApiDcimPowerPanelsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNisw(nameNisw []string) ApiDcimPowerPanelsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameNre(nameNre []string) ApiDcimPowerPanelsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerPanelsListRequest) NameRe(nameRe []string) ApiDcimPowerPanelsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerPanelsListRequest) Offset(offset int32) ApiDcimPowerPanelsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimPowerPanelsListRequest) Q(q string) ApiDcimPowerPanelsListRequest {
	r.q = &q
	return r
}

// Rack group (ID)
func (r ApiDcimPowerPanelsListRequest) RackGroupId(rackGroupId []string) ApiDcimPowerPanelsListRequest {
	r.rackGroupId = &rackGroupId
	return r
}

// Rack group (ID)
func (r ApiDcimPowerPanelsListRequest) RackGroupIdN(rackGroupIdN []string) ApiDcimPowerPanelsListRequest {
	r.rackGroupIdN = &rackGroupIdN
	return r
}

// Region (slug)
func (r ApiDcimPowerPanelsListRequest) Region(region []string) ApiDcimPowerPanelsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimPowerPanelsListRequest) RegionN(regionN []string) ApiDcimPowerPanelsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimPowerPanelsListRequest) RegionId(regionId []string) ApiDcimPowerPanelsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimPowerPanelsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerPanelsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerPanelsListRequest) Site(site []string) ApiDcimPowerPanelsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerPanelsListRequest) SiteN(siteN []string) ApiDcimPowerPanelsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimPowerPanelsListRequest) SiteId(siteId []string) ApiDcimPowerPanelsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerPanelsListRequest) SiteIdN(siteIdN []string) ApiDcimPowerPanelsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerPanelsListRequest) Tag(tag []string) ApiDcimPowerPanelsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerPanelsListRequest) TagN(tagN []string) ApiDcimPowerPanelsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimPowerPanelsListRequest) Execute() (*PaginatedPowerPanelList, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsListExecute(r)
}

/*
DcimPowerPanelsList Method for DcimPowerPanelsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPanelsListRequest
*/
func (a *DcimApiService) DcimPowerPanelsList(ctx context.Context) ApiDcimPowerPanelsListRequest {
	return ApiDcimPowerPanelsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerPanelList
func (a *DcimApiService) DcimPowerPanelsListExecute(r ApiDcimPowerPanelsListRequest) (*PaginatedPowerPanelList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerPanelList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.rackGroupId != nil {
		t := *r.rackGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_group_id", parameterToString(t, "multi"))
		}
	}
	if r.rackGroupIdN != nil {
		t := *r.rackGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePowerPanel *PatchedWritablePowerPanel
}

func (r ApiDcimPowerPanelsPartialUpdateRequest) PatchedWritablePowerPanel(patchedWritablePowerPanel PatchedWritablePowerPanel) ApiDcimPowerPanelsPartialUpdateRequest {
	r.patchedWritablePowerPanel = &patchedWritablePowerPanel
	return r
}

func (r ApiDcimPowerPanelsPartialUpdateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsPartialUpdateExecute(r)
}

/*
DcimPowerPanelsPartialUpdate Method for DcimPowerPanelsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power panel.
 @return ApiDcimPowerPanelsPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerPanelsPartialUpdate(ctx context.Context, id string) ApiDcimPowerPanelsPartialUpdateRequest {
	return ApiDcimPowerPanelsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPanel
func (a *DcimApiService) DcimPowerPanelsPartialUpdateExecute(r ApiDcimPowerPanelsPartialUpdateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPanel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPanelsRetrieveRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsRetrieveExecute(r)
}

/*
DcimPowerPanelsRetrieve Method for DcimPowerPanelsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power panel.
 @return ApiDcimPowerPanelsRetrieveRequest
*/
func (a *DcimApiService) DcimPowerPanelsRetrieve(ctx context.Context, id string) ApiDcimPowerPanelsRetrieveRequest {
	return ApiDcimPowerPanelsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPanel
func (a *DcimApiService) DcimPowerPanelsRetrieveExecute(r ApiDcimPowerPanelsRetrieveRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPanelsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePowerPanel *WritablePowerPanel
}

func (r ApiDcimPowerPanelsUpdateRequest) WritablePowerPanel(writablePowerPanel WritablePowerPanel) ApiDcimPowerPanelsUpdateRequest {
	r.writablePowerPanel = &writablePowerPanel
	return r
}

func (r ApiDcimPowerPanelsUpdateRequest) Execute() (*PowerPanel, *http.Response, error) {
	return r.ApiService.DcimPowerPanelsUpdateExecute(r)
}

/*
DcimPowerPanelsUpdate Method for DcimPowerPanelsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power panel.
 @return ApiDcimPowerPanelsUpdateRequest
*/
func (a *DcimApiService) DcimPowerPanelsUpdate(ctx context.Context, id string) ApiDcimPowerPanelsUpdateRequest {
	return ApiDcimPowerPanelsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPanel
func (a *DcimApiService) DcimPowerPanelsUpdateExecute(r ApiDcimPowerPanelsUpdateRequest) (*PowerPanel, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPanelsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-panels/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPanel == nil {
		return localVarReturnValue, nil, reportError("writablePowerPanel is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPanel
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPowerPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesBulkDestroyExecute(r)
}

/*
DcimPowerPortTemplatesBulkDestroy Method for DcimPowerPortTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesBulkDestroy(ctx context.Context) ApiDcimPowerPortTemplatesBulkDestroyRequest {
	return ApiDcimPowerPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerPortTemplatesBulkDestroyExecute(r ApiDcimPowerPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePowerPortTemplate *PatchedWritablePowerPortTemplate
}

func (r ApiDcimPowerPortTemplatesBulkPartialUpdateRequest) PatchedWritablePowerPortTemplate(patchedWritablePowerPortTemplate PatchedWritablePowerPortTemplate) ApiDcimPowerPortTemplatesBulkPartialUpdateRequest {
	r.patchedWritablePowerPortTemplate = &patchedWritablePowerPortTemplate
	return r
}

func (r ApiDcimPowerPortTemplatesBulkPartialUpdateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimPowerPortTemplatesBulkPartialUpdate Method for DcimPowerPortTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimPowerPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimPowerPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPortTemplate
func (a *DcimApiService) DcimPowerPortTemplatesBulkPartialUpdateExecute(r ApiDcimPowerPortTemplatesBulkPartialUpdateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerPortTemplate *WritablePowerPortTemplate
}

func (r ApiDcimPowerPortTemplatesBulkUpdateRequest) WritablePowerPortTemplate(writablePowerPortTemplate WritablePowerPortTemplate) ApiDcimPowerPortTemplatesBulkUpdateRequest {
	r.writablePowerPortTemplate = &writablePowerPortTemplate
	return r
}

func (r ApiDcimPowerPortTemplatesBulkUpdateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesBulkUpdateExecute(r)
}

/*
DcimPowerPortTemplatesBulkUpdate Method for DcimPowerPortTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesBulkUpdate(ctx context.Context) ApiDcimPowerPortTemplatesBulkUpdateRequest {
	return ApiDcimPowerPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPortTemplate
func (a *DcimApiService) DcimPowerPortTemplatesBulkUpdateExecute(r ApiDcimPowerPortTemplatesBulkUpdateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerPortTemplate *WritablePowerPortTemplate
}

func (r ApiDcimPowerPortTemplatesCreateRequest) WritablePowerPortTemplate(writablePowerPortTemplate WritablePowerPortTemplate) ApiDcimPowerPortTemplatesCreateRequest {
	r.writablePowerPortTemplate = &writablePowerPortTemplate
	return r
}

func (r ApiDcimPowerPortTemplatesCreateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesCreateExecute(r)
}

/*
DcimPowerPortTemplatesCreate Method for DcimPowerPortTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortTemplatesCreateRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesCreate(ctx context.Context) ApiDcimPowerPortTemplatesCreateRequest {
	return ApiDcimPowerPortTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPortTemplate
func (a *DcimApiService) DcimPowerPortTemplatesCreateExecute(r ApiDcimPowerPortTemplatesCreateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesDestroyExecute(r)
}

/*
DcimPowerPortTemplatesDestroy Method for DcimPowerPortTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port template.
 @return ApiDcimPowerPortTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesDestroy(ctx context.Context, id string) ApiDcimPowerPortTemplatesDestroyRequest {
	return ApiDcimPowerPortTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerPortTemplatesDestroyExecute(r ApiDcimPowerPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	allocatedDraw *[]int32
	allocatedDrawGt *[]int32
	allocatedDrawGte *[]int32
	allocatedDrawLt *[]int32
	allocatedDrawLte *[]int32
	allocatedDrawN *[]int32
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	maximumDraw *[]int32
	maximumDrawGt *[]int32
	maximumDrawGte *[]int32
	maximumDrawLt *[]int32
	maximumDrawLte *[]int32
	maximumDrawN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	type_ *string
	typeN *string
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDraw(allocatedDraw []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDraw = &allocatedDraw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawGt(allocatedDrawGt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawGt = &allocatedDrawGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawGte(allocatedDrawGte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawGte = &allocatedDrawGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawLt(allocatedDrawLt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawLt = &allocatedDrawLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawLte(allocatedDrawLte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawLte = &allocatedDrawLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) AllocatedDrawN(allocatedDrawN []int32) ApiDcimPowerPortTemplatesListRequest {
	r.allocatedDrawN = &allocatedDrawN
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimPowerPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimPowerPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimPowerPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Id(id []string) ApiDcimPowerPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdIc(idIc []string) ApiDcimPowerPortTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdIe(idIe []string) ApiDcimPowerPortTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdIew(idIew []string) ApiDcimPowerPortTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdIre(idIre []string) ApiDcimPowerPortTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdIsw(idIsw []string) ApiDcimPowerPortTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdN(idN []string) ApiDcimPowerPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdNic(idNic []string) ApiDcimPowerPortTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdNie(idNie []string) ApiDcimPowerPortTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdNiew(idNiew []string) ApiDcimPowerPortTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdNire(idNire []string) ApiDcimPowerPortTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdNisw(idNisw []string) ApiDcimPowerPortTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdNre(idNre []string) ApiDcimPowerPortTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) IdRe(idRe []string) ApiDcimPowerPortTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerPortTemplatesListRequest) Limit(limit int32) ApiDcimPowerPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDraw(maximumDraw []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDraw = &maximumDraw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawGt(maximumDrawGt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawGt = &maximumDrawGt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawGte(maximumDrawGte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawGte = &maximumDrawGte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawLt(maximumDrawLt []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawLt = &maximumDrawLt
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawLte(maximumDrawLte []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawLte = &maximumDrawLte
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) MaximumDrawN(maximumDrawN []int32) ApiDcimPowerPortTemplatesListRequest {
	r.maximumDrawN = &maximumDrawN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Name(name []string) ApiDcimPowerPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIre(nameIre []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameN(nameN []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNire(nameNire []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameNre(nameNre []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) NameRe(nameRe []string) ApiDcimPowerPortTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerPortTemplatesListRequest) Offset(offset int32) ApiDcimPowerPortTemplatesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimPowerPortTemplatesListRequest) Q(q string) ApiDcimPowerPortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Type_(type_ string) ApiDcimPowerPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) TypeN(typeN string) ApiDcimPowerPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerPortTemplatesListRequest) Execute() (*PaginatedPowerPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesListExecute(r)
}

/*
DcimPowerPortTemplatesList Method for DcimPowerPortTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortTemplatesListRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesList(ctx context.Context) ApiDcimPowerPortTemplatesListRequest {
	return ApiDcimPowerPortTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerPortTemplateList
func (a *DcimApiService) DcimPowerPortTemplatesListExecute(r ApiDcimPowerPortTemplatesListRequest) (*PaginatedPowerPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allocatedDraw != nil {
		t := *r.allocatedDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawGt != nil {
		t := *r.allocatedDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__gt", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawGte != nil {
		t := *r.allocatedDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__gte", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawLt != nil {
		t := *r.allocatedDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__lt", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawLte != nil {
		t := *r.allocatedDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__lte", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawN != nil {
		t := *r.allocatedDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__n", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.maximumDraw != nil {
		t := *r.maximumDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawGt != nil {
		t := *r.maximumDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__gt", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawGte != nil {
		t := *r.maximumDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__gte", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawLt != nil {
		t := *r.maximumDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__lt", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawLte != nil {
		t := *r.maximumDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__lte", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawN != nil {
		t := *r.maximumDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePowerPortTemplate *PatchedWritablePowerPortTemplate
}

func (r ApiDcimPowerPortTemplatesPartialUpdateRequest) PatchedWritablePowerPortTemplate(patchedWritablePowerPortTemplate PatchedWritablePowerPortTemplate) ApiDcimPowerPortTemplatesPartialUpdateRequest {
	r.patchedWritablePowerPortTemplate = &patchedWritablePowerPortTemplate
	return r
}

func (r ApiDcimPowerPortTemplatesPartialUpdateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesPartialUpdateExecute(r)
}

/*
DcimPowerPortTemplatesPartialUpdate Method for DcimPowerPortTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port template.
 @return ApiDcimPowerPortTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimPowerPortTemplatesPartialUpdateRequest {
	return ApiDcimPowerPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPortTemplate
func (a *DcimApiService) DcimPowerPortTemplatesPartialUpdateExecute(r ApiDcimPowerPortTemplatesPartialUpdateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPortTemplatesRetrieveRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesRetrieveExecute(r)
}

/*
DcimPowerPortTemplatesRetrieve Method for DcimPowerPortTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port template.
 @return ApiDcimPowerPortTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesRetrieve(ctx context.Context, id string) ApiDcimPowerPortTemplatesRetrieveRequest {
	return ApiDcimPowerPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPortTemplate
func (a *DcimApiService) DcimPowerPortTemplatesRetrieveExecute(r ApiDcimPowerPortTemplatesRetrieveRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePowerPortTemplate *WritablePowerPortTemplate
}

func (r ApiDcimPowerPortTemplatesUpdateRequest) WritablePowerPortTemplate(writablePowerPortTemplate WritablePowerPortTemplate) ApiDcimPowerPortTemplatesUpdateRequest {
	r.writablePowerPortTemplate = &writablePowerPortTemplate
	return r
}

func (r ApiDcimPowerPortTemplatesUpdateRequest) Execute() (*PowerPortTemplate, *http.Response, error) {
	return r.ApiService.DcimPowerPortTemplatesUpdateExecute(r)
}

/*
DcimPowerPortTemplatesUpdate Method for DcimPowerPortTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port template.
 @return ApiDcimPowerPortTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortTemplatesUpdate(ctx context.Context, id string) ApiDcimPowerPortTemplatesUpdateRequest {
	return ApiDcimPowerPortTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPortTemplate
func (a *DcimApiService) DcimPowerPortTemplatesUpdateExecute(r ApiDcimPowerPortTemplatesUpdateRequest) (*PowerPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writablePowerPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimPowerPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortsBulkDestroyExecute(r)
}

/*
DcimPowerPortsBulkDestroy Method for DcimPowerPortsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortsBulkDestroyRequest
*/
func (a *DcimApiService) DcimPowerPortsBulkDestroy(ctx context.Context) ApiDcimPowerPortsBulkDestroyRequest {
	return ApiDcimPowerPortsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerPortsBulkDestroyExecute(r ApiDcimPowerPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritablePowerPort *PatchedWritablePowerPort
}

func (r ApiDcimPowerPortsBulkPartialUpdateRequest) PatchedWritablePowerPort(patchedWritablePowerPort PatchedWritablePowerPort) ApiDcimPowerPortsBulkPartialUpdateRequest {
	r.patchedWritablePowerPort = &patchedWritablePowerPort
	return r
}

func (r ApiDcimPowerPortsBulkPartialUpdateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsBulkPartialUpdateExecute(r)
}

/*
DcimPowerPortsBulkPartialUpdate Method for DcimPowerPortsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortsBulkPartialUpdate(ctx context.Context) ApiDcimPowerPortsBulkPartialUpdateRequest {
	return ApiDcimPowerPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsBulkPartialUpdateExecute(r ApiDcimPowerPortsBulkPartialUpdateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerPort *WritablePowerPort
}

func (r ApiDcimPowerPortsBulkUpdateRequest) WritablePowerPort(writablePowerPort WritablePowerPort) ApiDcimPowerPortsBulkUpdateRequest {
	r.writablePowerPort = &writablePowerPort
	return r
}

func (r ApiDcimPowerPortsBulkUpdateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsBulkUpdateExecute(r)
}

/*
DcimPowerPortsBulkUpdate Method for DcimPowerPortsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortsBulkUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortsBulkUpdate(ctx context.Context) ApiDcimPowerPortsBulkUpdateRequest {
	return ApiDcimPowerPortsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsBulkUpdateExecute(r ApiDcimPowerPortsBulkUpdateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPort == nil {
		return localVarReturnValue, nil, reportError("writablePowerPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writablePowerPort *WritablePowerPort
}

func (r ApiDcimPowerPortsCreateRequest) WritablePowerPort(writablePowerPort WritablePowerPort) ApiDcimPowerPortsCreateRequest {
	r.writablePowerPort = &writablePowerPort
	return r
}

func (r ApiDcimPowerPortsCreateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsCreateExecute(r)
}

/*
DcimPowerPortsCreate Method for DcimPowerPortsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortsCreateRequest
*/
func (a *DcimApiService) DcimPowerPortsCreate(ctx context.Context) ApiDcimPowerPortsCreateRequest {
	return ApiDcimPowerPortsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsCreateExecute(r ApiDcimPowerPortsCreateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPort == nil {
		return localVarReturnValue, nil, reportError("writablePowerPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimPowerPortsDestroyExecute(r)
}

/*
DcimPowerPortsDestroy Method for DcimPowerPortsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port.
 @return ApiDcimPowerPortsDestroyRequest
*/
func (a *DcimApiService) DcimPowerPortsDestroy(ctx context.Context, id string) ApiDcimPowerPortsDestroyRequest {
	return ApiDcimPowerPortsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimPowerPortsDestroyExecute(r ApiDcimPowerPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimPowerPortsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	allocatedDraw *[]int32
	allocatedDrawGt *[]int32
	allocatedDrawGte *[]int32
	allocatedDrawLt *[]int32
	allocatedDrawLte *[]int32
	allocatedDrawN *[]int32
	cabled *bool
	connected *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	maximumDraw *[]int32
	maximumDrawGt *[]int32
	maximumDrawGte *[]int32
	maximumDrawLt *[]int32
	maximumDrawLte *[]int32
	maximumDrawN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *[]string
	typeN *[]string
}

func (r ApiDcimPowerPortsListRequest) AllocatedDraw(allocatedDraw []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDraw = &allocatedDraw
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawGt(allocatedDrawGt []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawGt = &allocatedDrawGt
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawGte(allocatedDrawGte []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawGte = &allocatedDrawGte
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawLt(allocatedDrawLt []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawLt = &allocatedDrawLt
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawLte(allocatedDrawLte []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawLte = &allocatedDrawLte
	return r
}

func (r ApiDcimPowerPortsListRequest) AllocatedDrawN(allocatedDrawN []int32) ApiDcimPowerPortsListRequest {
	r.allocatedDrawN = &allocatedDrawN
	return r
}

func (r ApiDcimPowerPortsListRequest) Cabled(cabled bool) ApiDcimPowerPortsListRequest {
	r.cabled = &cabled
	return r
}

// Connected status (bool)
func (r ApiDcimPowerPortsListRequest) Connected(connected bool) ApiDcimPowerPortsListRequest {
	r.connected = &connected
	return r
}

func (r ApiDcimPowerPortsListRequest) Description(description []string) ApiDcimPowerPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimPowerPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimPowerPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimPowerPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIre(descriptionIre []string) ApiDcimPowerPortsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimPowerPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionN(descriptionN []string) ApiDcimPowerPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimPowerPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimPowerPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimPowerPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNire(descriptionNire []string) ApiDcimPowerPortsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimPowerPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionNre(descriptionNre []string) ApiDcimPowerPortsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimPowerPortsListRequest) DescriptionRe(descriptionRe []string) ApiDcimPowerPortsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimPowerPortsListRequest) Device(device []*string) ApiDcimPowerPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimPowerPortsListRequest) DeviceN(deviceN []*string) ApiDcimPowerPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimPowerPortsListRequest) DeviceId(deviceId []string) ApiDcimPowerPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimPowerPortsListRequest) DeviceIdN(deviceIdN []string) ApiDcimPowerPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Id(id []string) ApiDcimPowerPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimPowerPortsListRequest) IdIc(idIc []string) ApiDcimPowerPortsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimPowerPortsListRequest) IdIe(idIe []string) ApiDcimPowerPortsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimPowerPortsListRequest) IdIew(idIew []string) ApiDcimPowerPortsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimPowerPortsListRequest) IdIre(idIre []string) ApiDcimPowerPortsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimPowerPortsListRequest) IdIsw(idIsw []string) ApiDcimPowerPortsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimPowerPortsListRequest) IdN(idN []string) ApiDcimPowerPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimPowerPortsListRequest) IdNic(idNic []string) ApiDcimPowerPortsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimPowerPortsListRequest) IdNie(idNie []string) ApiDcimPowerPortsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimPowerPortsListRequest) IdNiew(idNiew []string) ApiDcimPowerPortsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimPowerPortsListRequest) IdNire(idNire []string) ApiDcimPowerPortsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimPowerPortsListRequest) IdNisw(idNisw []string) ApiDcimPowerPortsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimPowerPortsListRequest) IdNre(idNre []string) ApiDcimPowerPortsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimPowerPortsListRequest) IdRe(idRe []string) ApiDcimPowerPortsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimPowerPortsListRequest) Limit(limit int32) ApiDcimPowerPortsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDraw(maximumDraw []int32) ApiDcimPowerPortsListRequest {
	r.maximumDraw = &maximumDraw
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawGt(maximumDrawGt []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawGt = &maximumDrawGt
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawGte(maximumDrawGte []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawGte = &maximumDrawGte
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawLt(maximumDrawLt []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawLt = &maximumDrawLt
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawLte(maximumDrawLte []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawLte = &maximumDrawLte
	return r
}

func (r ApiDcimPowerPortsListRequest) MaximumDrawN(maximumDrawN []int32) ApiDcimPowerPortsListRequest {
	r.maximumDrawN = &maximumDrawN
	return r
}

func (r ApiDcimPowerPortsListRequest) Name(name []string) ApiDcimPowerPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIc(nameIc []string) ApiDcimPowerPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIe(nameIe []string) ApiDcimPowerPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIew(nameIew []string) ApiDcimPowerPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIre(nameIre []string) ApiDcimPowerPortsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimPowerPortsListRequest) NameIsw(nameIsw []string) ApiDcimPowerPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimPowerPortsListRequest) NameN(nameN []string) ApiDcimPowerPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNic(nameNic []string) ApiDcimPowerPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNie(nameNie []string) ApiDcimPowerPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNiew(nameNiew []string) ApiDcimPowerPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNire(nameNire []string) ApiDcimPowerPortsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNisw(nameNisw []string) ApiDcimPowerPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimPowerPortsListRequest) NameNre(nameNre []string) ApiDcimPowerPortsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimPowerPortsListRequest) NameRe(nameRe []string) ApiDcimPowerPortsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimPowerPortsListRequest) Offset(offset int32) ApiDcimPowerPortsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimPowerPortsListRequest) Q(q string) ApiDcimPowerPortsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimPowerPortsListRequest) Region(region []string) ApiDcimPowerPortsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimPowerPortsListRequest) RegionN(regionN []string) ApiDcimPowerPortsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimPowerPortsListRequest) RegionId(regionId []string) ApiDcimPowerPortsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimPowerPortsListRequest) RegionIdN(regionIdN []string) ApiDcimPowerPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimPowerPortsListRequest) Site(site []string) ApiDcimPowerPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimPowerPortsListRequest) SiteN(siteN []string) ApiDcimPowerPortsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimPowerPortsListRequest) SiteId(siteId []string) ApiDcimPowerPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimPowerPortsListRequest) SiteIdN(siteIdN []string) ApiDcimPowerPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimPowerPortsListRequest) Tag(tag []string) ApiDcimPowerPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimPowerPortsListRequest) TagN(tagN []string) ApiDcimPowerPortsListRequest {
	r.tagN = &tagN
	return r
}

// Physical port type
func (r ApiDcimPowerPortsListRequest) Type_(type_ []string) ApiDcimPowerPortsListRequest {
	r.type_ = &type_
	return r
}

// Physical port type
func (r ApiDcimPowerPortsListRequest) TypeN(typeN []string) ApiDcimPowerPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimPowerPortsListRequest) Execute() (*PaginatedPowerPortList, *http.Response, error) {
	return r.ApiService.DcimPowerPortsListExecute(r)
}

/*
DcimPowerPortsList Method for DcimPowerPortsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimPowerPortsListRequest
*/
func (a *DcimApiService) DcimPowerPortsList(ctx context.Context) ApiDcimPowerPortsListRequest {
	return ApiDcimPowerPortsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedPowerPortList
func (a *DcimApiService) DcimPowerPortsListExecute(r ApiDcimPowerPortsListRequest) (*PaginatedPowerPortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedPowerPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.allocatedDraw != nil {
		t := *r.allocatedDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawGt != nil {
		t := *r.allocatedDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__gt", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawGte != nil {
		t := *r.allocatedDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__gte", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawLt != nil {
		t := *r.allocatedDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__lt", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawLte != nil {
		t := *r.allocatedDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__lte", parameterToString(t, "multi"))
		}
	}
	if r.allocatedDrawN != nil {
		t := *r.allocatedDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("allocated_draw__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("allocated_draw__n", parameterToString(t, "multi"))
		}
	}
	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.connected != nil {
		localVarQueryParams.Add("connected", parameterToString(*r.connected, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.maximumDraw != nil {
		t := *r.maximumDraw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawGt != nil {
		t := *r.maximumDrawGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__gt", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawGte != nil {
		t := *r.maximumDrawGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__gte", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawLt != nil {
		t := *r.maximumDrawLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__lt", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawLte != nil {
		t := *r.maximumDrawLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__lte", parameterToString(t, "multi"))
		}
	}
	if r.maximumDrawN != nil {
		t := *r.maximumDrawN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("maximum_draw__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("maximum_draw__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritablePowerPort *PatchedWritablePowerPort
}

func (r ApiDcimPowerPortsPartialUpdateRequest) PatchedWritablePowerPort(patchedWritablePowerPort PatchedWritablePowerPort) ApiDcimPowerPortsPartialUpdateRequest {
	r.patchedWritablePowerPort = &patchedWritablePowerPort
	return r
}

func (r ApiDcimPowerPortsPartialUpdateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsPartialUpdateExecute(r)
}

/*
DcimPowerPortsPartialUpdate Method for DcimPowerPortsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port.
 @return ApiDcimPowerPortsPartialUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortsPartialUpdate(ctx context.Context, id string) ApiDcimPowerPortsPartialUpdateRequest {
	return ApiDcimPowerPortsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsPartialUpdateExecute(r ApiDcimPowerPortsPartialUpdateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritablePowerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPortsRetrieveRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsRetrieveExecute(r)
}

/*
DcimPowerPortsRetrieve Method for DcimPowerPortsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port.
 @return ApiDcimPowerPortsRetrieveRequest
*/
func (a *DcimApiService) DcimPowerPortsRetrieve(ctx context.Context, id string) ApiDcimPowerPortsRetrieveRequest {
	return ApiDcimPowerPortsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsRetrieveExecute(r ApiDcimPowerPortsRetrieveRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsTraceRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimPowerPortsTraceRetrieveRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsTraceRetrieveExecute(r)
}

/*
DcimPowerPortsTraceRetrieve Method for DcimPowerPortsTraceRetrieve

Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port.
 @return ApiDcimPowerPortsTraceRetrieveRequest
*/
func (a *DcimApiService) DcimPowerPortsTraceRetrieve(ctx context.Context, id string) ApiDcimPowerPortsTraceRetrieveRequest {
	return ApiDcimPowerPortsTraceRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsTraceRetrieveExecute(r ApiDcimPowerPortsTraceRetrieveRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsTraceRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/{id}/trace/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimPowerPortsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writablePowerPort *WritablePowerPort
}

func (r ApiDcimPowerPortsUpdateRequest) WritablePowerPort(writablePowerPort WritablePowerPort) ApiDcimPowerPortsUpdateRequest {
	r.writablePowerPort = &writablePowerPort
	return r
}

func (r ApiDcimPowerPortsUpdateRequest) Execute() (*PowerPort, *http.Response, error) {
	return r.ApiService.DcimPowerPortsUpdateExecute(r)
}

/*
DcimPowerPortsUpdate Method for DcimPowerPortsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this power port.
 @return ApiDcimPowerPortsUpdateRequest
*/
func (a *DcimApiService) DcimPowerPortsUpdate(ctx context.Context, id string) ApiDcimPowerPortsUpdateRequest {
	return ApiDcimPowerPortsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PowerPort
func (a *DcimApiService) DcimPowerPortsUpdateExecute(r ApiDcimPowerPortsUpdateRequest) (*PowerPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PowerPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimPowerPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/power-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writablePowerPort == nil {
		return localVarReturnValue, nil, reportError("writablePowerPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writablePowerPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRackGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackGroupsBulkDestroyExecute(r)
}

/*
DcimRackGroupsBulkDestroy Method for DcimRackGroupsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackGroupsBulkDestroyRequest
*/
func (a *DcimApiService) DcimRackGroupsBulkDestroy(ctx context.Context) ApiDcimRackGroupsBulkDestroyRequest {
	return ApiDcimRackGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRackGroupsBulkDestroyExecute(r ApiDcimRackGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableRackGroup *PatchedWritableRackGroup
}

func (r ApiDcimRackGroupsBulkPartialUpdateRequest) PatchedWritableRackGroup(patchedWritableRackGroup PatchedWritableRackGroup) ApiDcimRackGroupsBulkPartialUpdateRequest {
	r.patchedWritableRackGroup = &patchedWritableRackGroup
	return r
}

func (r ApiDcimRackGroupsBulkPartialUpdateRequest) Execute() (*RackGroup, *http.Response, error) {
	return r.ApiService.DcimRackGroupsBulkPartialUpdateExecute(r)
}

/*
DcimRackGroupsBulkPartialUpdate Method for DcimRackGroupsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackGroupsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRackGroupsBulkPartialUpdate(ctx context.Context) ApiDcimRackGroupsBulkPartialUpdateRequest {
	return ApiDcimRackGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackGroup
func (a *DcimApiService) DcimRackGroupsBulkPartialUpdateExecute(r ApiDcimRackGroupsBulkPartialUpdateRequest) (*RackGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRackGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRackGroup *WritableRackGroup
}

func (r ApiDcimRackGroupsBulkUpdateRequest) WritableRackGroup(writableRackGroup WritableRackGroup) ApiDcimRackGroupsBulkUpdateRequest {
	r.writableRackGroup = &writableRackGroup
	return r
}

func (r ApiDcimRackGroupsBulkUpdateRequest) Execute() (*RackGroup, *http.Response, error) {
	return r.ApiService.DcimRackGroupsBulkUpdateExecute(r)
}

/*
DcimRackGroupsBulkUpdate Method for DcimRackGroupsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackGroupsBulkUpdateRequest
*/
func (a *DcimApiService) DcimRackGroupsBulkUpdate(ctx context.Context) ApiDcimRackGroupsBulkUpdateRequest {
	return ApiDcimRackGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackGroup
func (a *DcimApiService) DcimRackGroupsBulkUpdateExecute(r ApiDcimRackGroupsBulkUpdateRequest) (*RackGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackGroup == nil {
		return localVarReturnValue, nil, reportError("writableRackGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRackGroup *WritableRackGroup
}

func (r ApiDcimRackGroupsCreateRequest) WritableRackGroup(writableRackGroup WritableRackGroup) ApiDcimRackGroupsCreateRequest {
	r.writableRackGroup = &writableRackGroup
	return r
}

func (r ApiDcimRackGroupsCreateRequest) Execute() (*RackGroup, *http.Response, error) {
	return r.ApiService.DcimRackGroupsCreateExecute(r)
}

/*
DcimRackGroupsCreate Method for DcimRackGroupsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackGroupsCreateRequest
*/
func (a *DcimApiService) DcimRackGroupsCreate(ctx context.Context) ApiDcimRackGroupsCreateRequest {
	return ApiDcimRackGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackGroup
func (a *DcimApiService) DcimRackGroupsCreateExecute(r ApiDcimRackGroupsCreateRequest) (*RackGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackGroup == nil {
		return localVarReturnValue, nil, reportError("writableRackGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRackGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackGroupsDestroyExecute(r)
}

/*
DcimRackGroupsDestroy Method for DcimRackGroupsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack group.
 @return ApiDcimRackGroupsDestroyRequest
*/
func (a *DcimApiService) DcimRackGroupsDestroy(ctx context.Context, id string) ApiDcimRackGroupsDestroyRequest {
	return ApiDcimRackGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRackGroupsDestroyExecute(r ApiDcimRackGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackGroupsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	parent *[]string
	parentN *[]string
	parentId *[]*string
	parentIdN *[]*string
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiDcimRackGroupsListRequest) Created(created string) ApiDcimRackGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRackGroupsListRequest) CreatedGte(createdGte string) ApiDcimRackGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRackGroupsListRequest) CreatedLte(createdLte string) ApiDcimRackGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRackGroupsListRequest) Description(description []string) ApiDcimRackGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionIc(descriptionIc []string) ApiDcimRackGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionIe(descriptionIe []string) ApiDcimRackGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionIew(descriptionIew []string) ApiDcimRackGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionIre(descriptionIre []string) ApiDcimRackGroupsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRackGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionN(descriptionN []string) ApiDcimRackGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionNic(descriptionNic []string) ApiDcimRackGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionNie(descriptionNie []string) ApiDcimRackGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRackGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionNire(descriptionNire []string) ApiDcimRackGroupsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRackGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionNre(descriptionNre []string) ApiDcimRackGroupsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimRackGroupsListRequest) DescriptionRe(descriptionRe []string) ApiDcimRackGroupsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiDcimRackGroupsListRequest) Id(id []string) ApiDcimRackGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRackGroupsListRequest) IdIc(idIc []string) ApiDcimRackGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRackGroupsListRequest) IdIe(idIe []string) ApiDcimRackGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRackGroupsListRequest) IdIew(idIew []string) ApiDcimRackGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRackGroupsListRequest) IdIre(idIre []string) ApiDcimRackGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRackGroupsListRequest) IdIsw(idIsw []string) ApiDcimRackGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRackGroupsListRequest) IdN(idN []string) ApiDcimRackGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRackGroupsListRequest) IdNic(idNic []string) ApiDcimRackGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRackGroupsListRequest) IdNie(idNie []string) ApiDcimRackGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRackGroupsListRequest) IdNiew(idNiew []string) ApiDcimRackGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRackGroupsListRequest) IdNire(idNire []string) ApiDcimRackGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRackGroupsListRequest) IdNisw(idNisw []string) ApiDcimRackGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRackGroupsListRequest) IdNre(idNre []string) ApiDcimRackGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRackGroupsListRequest) IdRe(idRe []string) ApiDcimRackGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimRackGroupsListRequest) LastUpdated(lastUpdated time.Time) ApiDcimRackGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRackGroupsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimRackGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRackGroupsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimRackGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimRackGroupsListRequest) Limit(limit int32) ApiDcimRackGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRackGroupsListRequest) Name(name []string) ApiDcimRackGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRackGroupsListRequest) NameIc(nameIc []string) ApiDcimRackGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRackGroupsListRequest) NameIe(nameIe []string) ApiDcimRackGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRackGroupsListRequest) NameIew(nameIew []string) ApiDcimRackGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRackGroupsListRequest) NameIre(nameIre []string) ApiDcimRackGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRackGroupsListRequest) NameIsw(nameIsw []string) ApiDcimRackGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRackGroupsListRequest) NameN(nameN []string) ApiDcimRackGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRackGroupsListRequest) NameNic(nameNic []string) ApiDcimRackGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRackGroupsListRequest) NameNie(nameNie []string) ApiDcimRackGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRackGroupsListRequest) NameNiew(nameNiew []string) ApiDcimRackGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRackGroupsListRequest) NameNire(nameNire []string) ApiDcimRackGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRackGroupsListRequest) NameNisw(nameNisw []string) ApiDcimRackGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRackGroupsListRequest) NameNre(nameNre []string) ApiDcimRackGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRackGroupsListRequest) NameRe(nameRe []string) ApiDcimRackGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRackGroupsListRequest) Offset(offset int32) ApiDcimRackGroupsListRequest {
	r.offset = &offset
	return r
}

// Rack group (slug)
func (r ApiDcimRackGroupsListRequest) Parent(parent []string) ApiDcimRackGroupsListRequest {
	r.parent = &parent
	return r
}

// Rack group (slug)
func (r ApiDcimRackGroupsListRequest) ParentN(parentN []string) ApiDcimRackGroupsListRequest {
	r.parentN = &parentN
	return r
}

// Rack group (ID)
func (r ApiDcimRackGroupsListRequest) ParentId(parentId []*string) ApiDcimRackGroupsListRequest {
	r.parentId = &parentId
	return r
}

// Rack group (ID)
func (r ApiDcimRackGroupsListRequest) ParentIdN(parentIdN []*string) ApiDcimRackGroupsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiDcimRackGroupsListRequest) Q(q string) ApiDcimRackGroupsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimRackGroupsListRequest) Region(region []string) ApiDcimRackGroupsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimRackGroupsListRequest) RegionN(regionN []string) ApiDcimRackGroupsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimRackGroupsListRequest) RegionId(regionId []string) ApiDcimRackGroupsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimRackGroupsListRequest) RegionIdN(regionIdN []string) ApiDcimRackGroupsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site (slug)
func (r ApiDcimRackGroupsListRequest) Site(site []string) ApiDcimRackGroupsListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimRackGroupsListRequest) SiteN(siteN []string) ApiDcimRackGroupsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimRackGroupsListRequest) SiteId(siteId []string) ApiDcimRackGroupsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRackGroupsListRequest) SiteIdN(siteIdN []string) ApiDcimRackGroupsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRackGroupsListRequest) Slug(slug []string) ApiDcimRackGroupsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugIc(slugIc []string) ApiDcimRackGroupsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugIe(slugIe []string) ApiDcimRackGroupsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugIew(slugIew []string) ApiDcimRackGroupsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugIre(slugIre []string) ApiDcimRackGroupsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugIsw(slugIsw []string) ApiDcimRackGroupsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugN(slugN []string) ApiDcimRackGroupsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugNic(slugNic []string) ApiDcimRackGroupsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugNie(slugNie []string) ApiDcimRackGroupsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugNiew(slugNiew []string) ApiDcimRackGroupsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugNire(slugNire []string) ApiDcimRackGroupsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugNisw(slugNisw []string) ApiDcimRackGroupsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugNre(slugNre []string) ApiDcimRackGroupsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimRackGroupsListRequest) SlugRe(slugRe []string) ApiDcimRackGroupsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimRackGroupsListRequest) Execute() (*PaginatedRackGroupList, *http.Response, error) {
	return r.ApiService.DcimRackGroupsListExecute(r)
}

/*
DcimRackGroupsList Method for DcimRackGroupsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackGroupsListRequest
*/
func (a *DcimApiService) DcimRackGroupsList(ctx context.Context) ApiDcimRackGroupsListRequest {
	return ApiDcimRackGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRackGroupList
func (a *DcimApiService) DcimRackGroupsListExecute(r ApiDcimRackGroupsListRequest) (*PaginatedRackGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRackGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent", parameterToString(t, "multi"))
		}
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent__n", parameterToString(t, "multi"))
		}
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_id", parameterToString(t, "multi"))
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_id__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableRackGroup *PatchedWritableRackGroup
}

func (r ApiDcimRackGroupsPartialUpdateRequest) PatchedWritableRackGroup(patchedWritableRackGroup PatchedWritableRackGroup) ApiDcimRackGroupsPartialUpdateRequest {
	r.patchedWritableRackGroup = &patchedWritableRackGroup
	return r
}

func (r ApiDcimRackGroupsPartialUpdateRequest) Execute() (*RackGroup, *http.Response, error) {
	return r.ApiService.DcimRackGroupsPartialUpdateExecute(r)
}

/*
DcimRackGroupsPartialUpdate Method for DcimRackGroupsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack group.
 @return ApiDcimRackGroupsPartialUpdateRequest
*/
func (a *DcimApiService) DcimRackGroupsPartialUpdate(ctx context.Context, id string) ApiDcimRackGroupsPartialUpdateRequest {
	return ApiDcimRackGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackGroup
func (a *DcimApiService) DcimRackGroupsPartialUpdateExecute(r ApiDcimRackGroupsPartialUpdateRequest) (*RackGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRackGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRackGroupsRetrieveRequest) Execute() (*RackGroup, *http.Response, error) {
	return r.ApiService.DcimRackGroupsRetrieveExecute(r)
}

/*
DcimRackGroupsRetrieve Method for DcimRackGroupsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack group.
 @return ApiDcimRackGroupsRetrieveRequest
*/
func (a *DcimApiService) DcimRackGroupsRetrieve(ctx context.Context, id string) ApiDcimRackGroupsRetrieveRequest {
	return ApiDcimRackGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackGroup
func (a *DcimApiService) DcimRackGroupsRetrieveExecute(r ApiDcimRackGroupsRetrieveRequest) (*RackGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableRackGroup *WritableRackGroup
}

func (r ApiDcimRackGroupsUpdateRequest) WritableRackGroup(writableRackGroup WritableRackGroup) ApiDcimRackGroupsUpdateRequest {
	r.writableRackGroup = &writableRackGroup
	return r
}

func (r ApiDcimRackGroupsUpdateRequest) Execute() (*RackGroup, *http.Response, error) {
	return r.ApiService.DcimRackGroupsUpdateExecute(r)
}

/*
DcimRackGroupsUpdate Method for DcimRackGroupsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack group.
 @return ApiDcimRackGroupsUpdateRequest
*/
func (a *DcimApiService) DcimRackGroupsUpdate(ctx context.Context, id string) ApiDcimRackGroupsUpdateRequest {
	return ApiDcimRackGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackGroup
func (a *DcimApiService) DcimRackGroupsUpdateExecute(r ApiDcimRackGroupsUpdateRequest) (*RackGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackGroup == nil {
		return localVarReturnValue, nil, reportError("writableRackGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRackReservationsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackReservationsBulkDestroyExecute(r)
}

/*
DcimRackReservationsBulkDestroy Method for DcimRackReservationsBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackReservationsBulkDestroyRequest
*/
func (a *DcimApiService) DcimRackReservationsBulkDestroy(ctx context.Context) ApiDcimRackReservationsBulkDestroyRequest {
	return ApiDcimRackReservationsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRackReservationsBulkDestroyExecute(r ApiDcimRackReservationsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackReservationsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableRackReservation *PatchedWritableRackReservation
}

func (r ApiDcimRackReservationsBulkPartialUpdateRequest) PatchedWritableRackReservation(patchedWritableRackReservation PatchedWritableRackReservation) ApiDcimRackReservationsBulkPartialUpdateRequest {
	r.patchedWritableRackReservation = &patchedWritableRackReservation
	return r
}

func (r ApiDcimRackReservationsBulkPartialUpdateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsBulkPartialUpdateExecute(r)
}

/*
DcimRackReservationsBulkPartialUpdate Method for DcimRackReservationsBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackReservationsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRackReservationsBulkPartialUpdate(ctx context.Context) ApiDcimRackReservationsBulkPartialUpdateRequest {
	return ApiDcimRackReservationsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackReservation
func (a *DcimApiService) DcimRackReservationsBulkPartialUpdateExecute(r ApiDcimRackReservationsBulkPartialUpdateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRackReservation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRackReservation *WritableRackReservation
}

func (r ApiDcimRackReservationsBulkUpdateRequest) WritableRackReservation(writableRackReservation WritableRackReservation) ApiDcimRackReservationsBulkUpdateRequest {
	r.writableRackReservation = &writableRackReservation
	return r
}

func (r ApiDcimRackReservationsBulkUpdateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsBulkUpdateExecute(r)
}

/*
DcimRackReservationsBulkUpdate Method for DcimRackReservationsBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackReservationsBulkUpdateRequest
*/
func (a *DcimApiService) DcimRackReservationsBulkUpdate(ctx context.Context) ApiDcimRackReservationsBulkUpdateRequest {
	return ApiDcimRackReservationsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackReservation
func (a *DcimApiService) DcimRackReservationsBulkUpdateExecute(r ApiDcimRackReservationsBulkUpdateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackReservation == nil {
		return localVarReturnValue, nil, reportError("writableRackReservation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackReservation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRackReservation *WritableRackReservation
}

func (r ApiDcimRackReservationsCreateRequest) WritableRackReservation(writableRackReservation WritableRackReservation) ApiDcimRackReservationsCreateRequest {
	r.writableRackReservation = &writableRackReservation
	return r
}

func (r ApiDcimRackReservationsCreateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsCreateExecute(r)
}

/*
DcimRackReservationsCreate Method for DcimRackReservationsCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackReservationsCreateRequest
*/
func (a *DcimApiService) DcimRackReservationsCreate(ctx context.Context) ApiDcimRackReservationsCreateRequest {
	return ApiDcimRackReservationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackReservation
func (a *DcimApiService) DcimRackReservationsCreateExecute(r ApiDcimRackReservationsCreateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackReservation == nil {
		return localVarReturnValue, nil, reportError("writableRackReservation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackReservation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRackReservationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackReservationsDestroyExecute(r)
}

/*
DcimRackReservationsDestroy Method for DcimRackReservationsDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack reservation.
 @return ApiDcimRackReservationsDestroyRequest
*/
func (a *DcimApiService) DcimRackReservationsDestroy(ctx context.Context, id string) ApiDcimRackReservationsDestroyRequest {
	return ApiDcimRackReservationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRackReservationsDestroyExecute(r ApiDcimRackReservationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackReservationsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	group *[]string
	groupN *[]string
	groupId *[]string
	groupIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	offset *int32
	q *string
	rackId *[]string
	rackIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
	user *[]string
	userN *[]string
	userId *[]string
	userIdN *[]string
}

func (r ApiDcimRackReservationsListRequest) Created(created string) ApiDcimRackReservationsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedGte(createdGte string) ApiDcimRackReservationsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRackReservationsListRequest) CreatedLte(createdLte string) ApiDcimRackReservationsListRequest {
	r.createdLte = &createdLte
	return r
}

// Rack group (slug)
func (r ApiDcimRackReservationsListRequest) Group(group []string) ApiDcimRackReservationsListRequest {
	r.group = &group
	return r
}

// Rack group (slug)
func (r ApiDcimRackReservationsListRequest) GroupN(groupN []string) ApiDcimRackReservationsListRequest {
	r.groupN = &groupN
	return r
}

// Rack group (ID)
func (r ApiDcimRackReservationsListRequest) GroupId(groupId []string) ApiDcimRackReservationsListRequest {
	r.groupId = &groupId
	return r
}

// Rack group (ID)
func (r ApiDcimRackReservationsListRequest) GroupIdN(groupIdN []string) ApiDcimRackReservationsListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Id(id []string) ApiDcimRackReservationsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRackReservationsListRequest) IdIc(idIc []string) ApiDcimRackReservationsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRackReservationsListRequest) IdIe(idIe []string) ApiDcimRackReservationsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRackReservationsListRequest) IdIew(idIew []string) ApiDcimRackReservationsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRackReservationsListRequest) IdIre(idIre []string) ApiDcimRackReservationsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRackReservationsListRequest) IdIsw(idIsw []string) ApiDcimRackReservationsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRackReservationsListRequest) IdN(idN []string) ApiDcimRackReservationsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRackReservationsListRequest) IdNic(idNic []string) ApiDcimRackReservationsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRackReservationsListRequest) IdNie(idNie []string) ApiDcimRackReservationsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRackReservationsListRequest) IdNiew(idNiew []string) ApiDcimRackReservationsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRackReservationsListRequest) IdNire(idNire []string) ApiDcimRackReservationsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRackReservationsListRequest) IdNisw(idNisw []string) ApiDcimRackReservationsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRackReservationsListRequest) IdNre(idNre []string) ApiDcimRackReservationsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRackReservationsListRequest) IdRe(idRe []string) ApiDcimRackReservationsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdated(lastUpdated time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRackReservationsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimRackReservationsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimRackReservationsListRequest) Limit(limit int32) ApiDcimRackReservationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRackReservationsListRequest) Offset(offset int32) ApiDcimRackReservationsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimRackReservationsListRequest) Q(q string) ApiDcimRackReservationsListRequest {
	r.q = &q
	return r
}

// Rack (ID)
func (r ApiDcimRackReservationsListRequest) RackId(rackId []string) ApiDcimRackReservationsListRequest {
	r.rackId = &rackId
	return r
}

// Rack (ID)
func (r ApiDcimRackReservationsListRequest) RackIdN(rackIdN []string) ApiDcimRackReservationsListRequest {
	r.rackIdN = &rackIdN
	return r
}

// Site (slug)
func (r ApiDcimRackReservationsListRequest) Site(site []string) ApiDcimRackReservationsListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimRackReservationsListRequest) SiteN(siteN []string) ApiDcimRackReservationsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimRackReservationsListRequest) SiteId(siteId []string) ApiDcimRackReservationsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRackReservationsListRequest) SiteIdN(siteIdN []string) ApiDcimRackReservationsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Tag(tag []string) ApiDcimRackReservationsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRackReservationsListRequest) TagN(tagN []string) ApiDcimRackReservationsListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimRackReservationsListRequest) Tenant(tenant []string) ApiDcimRackReservationsListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimRackReservationsListRequest) TenantN(tenantN []string) ApiDcimRackReservationsListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiDcimRackReservationsListRequest) TenantGroup(tenantGroup []string) ApiDcimRackReservationsListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiDcimRackReservationsListRequest) TenantGroupN(tenantGroupN []string) ApiDcimRackReservationsListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiDcimRackReservationsListRequest) TenantGroupId(tenantGroupId []string) ApiDcimRackReservationsListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiDcimRackReservationsListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimRackReservationsListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimRackReservationsListRequest) TenantId(tenantId []*string) ApiDcimRackReservationsListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimRackReservationsListRequest) TenantIdN(tenantIdN []*string) ApiDcimRackReservationsListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

// User (name)
func (r ApiDcimRackReservationsListRequest) User(user []string) ApiDcimRackReservationsListRequest {
	r.user = &user
	return r
}

// User (name)
func (r ApiDcimRackReservationsListRequest) UserN(userN []string) ApiDcimRackReservationsListRequest {
	r.userN = &userN
	return r
}

// User (ID)
func (r ApiDcimRackReservationsListRequest) UserId(userId []string) ApiDcimRackReservationsListRequest {
	r.userId = &userId
	return r
}

// User (ID)
func (r ApiDcimRackReservationsListRequest) UserIdN(userIdN []string) ApiDcimRackReservationsListRequest {
	r.userIdN = &userIdN
	return r
}

func (r ApiDcimRackReservationsListRequest) Execute() (*PaginatedRackReservationList, *http.Response, error) {
	return r.ApiService.DcimRackReservationsListExecute(r)
}

/*
DcimRackReservationsList Method for DcimRackReservationsList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackReservationsListRequest
*/
func (a *DcimApiService) DcimRackReservationsList(ctx context.Context) ApiDcimRackReservationsListRequest {
	return ApiDcimRackReservationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRackReservationList
func (a *DcimApiService) DcimRackReservationsListExecute(r ApiDcimRackReservationsListRequest) (*PaginatedRackReservationList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRackReservationList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group", parameterToString(t, "multi"))
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group__n", parameterToString(t, "multi"))
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id", parameterToString(t, "multi"))
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.rackId != nil {
		t := *r.rackId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id", parameterToString(t, "multi"))
		}
	}
	if r.rackIdN != nil {
		t := *r.rackIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("rack_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("rack_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	if r.user != nil {
		t := *r.user
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user", parameterToString(t, "multi"))
		}
	}
	if r.userN != nil {
		t := *r.userN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user__n", parameterToString(t, "multi"))
		}
	}
	if r.userId != nil {
		t := *r.userId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_id", parameterToString(t, "multi"))
		}
	}
	if r.userIdN != nil {
		t := *r.userIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("user_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("user_id__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableRackReservation *PatchedWritableRackReservation
}

func (r ApiDcimRackReservationsPartialUpdateRequest) PatchedWritableRackReservation(patchedWritableRackReservation PatchedWritableRackReservation) ApiDcimRackReservationsPartialUpdateRequest {
	r.patchedWritableRackReservation = &patchedWritableRackReservation
	return r
}

func (r ApiDcimRackReservationsPartialUpdateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsPartialUpdateExecute(r)
}

/*
DcimRackReservationsPartialUpdate Method for DcimRackReservationsPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack reservation.
 @return ApiDcimRackReservationsPartialUpdateRequest
*/
func (a *DcimApiService) DcimRackReservationsPartialUpdate(ctx context.Context, id string) ApiDcimRackReservationsPartialUpdateRequest {
	return ApiDcimRackReservationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackReservation
func (a *DcimApiService) DcimRackReservationsPartialUpdateExecute(r ApiDcimRackReservationsPartialUpdateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRackReservation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRackReservationsRetrieveRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsRetrieveExecute(r)
}

/*
DcimRackReservationsRetrieve Method for DcimRackReservationsRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack reservation.
 @return ApiDcimRackReservationsRetrieveRequest
*/
func (a *DcimApiService) DcimRackReservationsRetrieve(ctx context.Context, id string) ApiDcimRackReservationsRetrieveRequest {
	return ApiDcimRackReservationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackReservation
func (a *DcimApiService) DcimRackReservationsRetrieveExecute(r ApiDcimRackReservationsRetrieveRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackReservationsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableRackReservation *WritableRackReservation
}

func (r ApiDcimRackReservationsUpdateRequest) WritableRackReservation(writableRackReservation WritableRackReservation) ApiDcimRackReservationsUpdateRequest {
	r.writableRackReservation = &writableRackReservation
	return r
}

func (r ApiDcimRackReservationsUpdateRequest) Execute() (*RackReservation, *http.Response, error) {
	return r.ApiService.DcimRackReservationsUpdateExecute(r)
}

/*
DcimRackReservationsUpdate Method for DcimRackReservationsUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack reservation.
 @return ApiDcimRackReservationsUpdateRequest
*/
func (a *DcimApiService) DcimRackReservationsUpdate(ctx context.Context, id string) ApiDcimRackReservationsUpdateRequest {
	return ApiDcimRackReservationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackReservation
func (a *DcimApiService) DcimRackReservationsUpdateExecute(r ApiDcimRackReservationsUpdateRequest) (*RackReservation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackReservation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackReservationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-reservations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRackReservation == nil {
		return localVarReturnValue, nil, reportError("writableRackReservation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRackReservation
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRackRolesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackRolesBulkDestroyExecute(r)
}

/*
DcimRackRolesBulkDestroy Method for DcimRackRolesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackRolesBulkDestroyRequest
*/
func (a *DcimApiService) DcimRackRolesBulkDestroy(ctx context.Context) ApiDcimRackRolesBulkDestroyRequest {
	return ApiDcimRackRolesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRackRolesBulkDestroyExecute(r ApiDcimRackRolesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackRolesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedRackRole *PatchedRackRole
}

func (r ApiDcimRackRolesBulkPartialUpdateRequest) PatchedRackRole(patchedRackRole PatchedRackRole) ApiDcimRackRolesBulkPartialUpdateRequest {
	r.patchedRackRole = &patchedRackRole
	return r
}

func (r ApiDcimRackRolesBulkPartialUpdateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesBulkPartialUpdateExecute(r)
}

/*
DcimRackRolesBulkPartialUpdate Method for DcimRackRolesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackRolesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRackRolesBulkPartialUpdate(ctx context.Context) ApiDcimRackRolesBulkPartialUpdateRequest {
	return ApiDcimRackRolesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackRole
func (a *DcimApiService) DcimRackRolesBulkPartialUpdateExecute(r ApiDcimRackRolesBulkPartialUpdateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRackRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	rackRole *RackRole
}

func (r ApiDcimRackRolesBulkUpdateRequest) RackRole(rackRole RackRole) ApiDcimRackRolesBulkUpdateRequest {
	r.rackRole = &rackRole
	return r
}

func (r ApiDcimRackRolesBulkUpdateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesBulkUpdateExecute(r)
}

/*
DcimRackRolesBulkUpdate Method for DcimRackRolesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackRolesBulkUpdateRequest
*/
func (a *DcimApiService) DcimRackRolesBulkUpdate(ctx context.Context) ApiDcimRackRolesBulkUpdateRequest {
	return ApiDcimRackRolesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackRole
func (a *DcimApiService) DcimRackRolesBulkUpdateExecute(r ApiDcimRackRolesBulkUpdateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRole == nil {
		return localVarReturnValue, nil, reportError("rackRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	rackRole *RackRole
}

func (r ApiDcimRackRolesCreateRequest) RackRole(rackRole RackRole) ApiDcimRackRolesCreateRequest {
	r.rackRole = &rackRole
	return r
}

func (r ApiDcimRackRolesCreateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesCreateExecute(r)
}

/*
DcimRackRolesCreate Method for DcimRackRolesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackRolesCreateRequest
*/
func (a *DcimApiService) DcimRackRolesCreate(ctx context.Context) ApiDcimRackRolesCreateRequest {
	return ApiDcimRackRolesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RackRole
func (a *DcimApiService) DcimRackRolesCreateExecute(r ApiDcimRackRolesCreateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRole == nil {
		return localVarReturnValue, nil, reportError("rackRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRackRolesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRackRolesDestroyExecute(r)
}

/*
DcimRackRolesDestroy Method for DcimRackRolesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack role.
 @return ApiDcimRackRolesDestroyRequest
*/
func (a *DcimApiService) DcimRackRolesDestroy(ctx context.Context, id string) ApiDcimRackRolesDestroyRequest {
	return ApiDcimRackRolesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRackRolesDestroyExecute(r ApiDcimRackRolesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRackRolesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	color *[]string
	colorIc *[]string
	colorIe *[]string
	colorIew *[]string
	colorIre *[]string
	colorIsw *[]string
	colorN *[]string
	colorNic *[]string
	colorNie *[]string
	colorNiew *[]string
	colorNire *[]string
	colorNisw *[]string
	colorNre *[]string
	colorRe *[]string
	created *string
	createdGte *string
	createdLte *string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiDcimRackRolesListRequest) Color(color []string) ApiDcimRackRolesListRequest {
	r.color = &color
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIc(colorIc []string) ApiDcimRackRolesListRequest {
	r.colorIc = &colorIc
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIe(colorIe []string) ApiDcimRackRolesListRequest {
	r.colorIe = &colorIe
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIew(colorIew []string) ApiDcimRackRolesListRequest {
	r.colorIew = &colorIew
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIre(colorIre []string) ApiDcimRackRolesListRequest {
	r.colorIre = &colorIre
	return r
}

func (r ApiDcimRackRolesListRequest) ColorIsw(colorIsw []string) ApiDcimRackRolesListRequest {
	r.colorIsw = &colorIsw
	return r
}

func (r ApiDcimRackRolesListRequest) ColorN(colorN []string) ApiDcimRackRolesListRequest {
	r.colorN = &colorN
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNic(colorNic []string) ApiDcimRackRolesListRequest {
	r.colorNic = &colorNic
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNie(colorNie []string) ApiDcimRackRolesListRequest {
	r.colorNie = &colorNie
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNiew(colorNiew []string) ApiDcimRackRolesListRequest {
	r.colorNiew = &colorNiew
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNire(colorNire []string) ApiDcimRackRolesListRequest {
	r.colorNire = &colorNire
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNisw(colorNisw []string) ApiDcimRackRolesListRequest {
	r.colorNisw = &colorNisw
	return r
}

func (r ApiDcimRackRolesListRequest) ColorNre(colorNre []string) ApiDcimRackRolesListRequest {
	r.colorNre = &colorNre
	return r
}

func (r ApiDcimRackRolesListRequest) ColorRe(colorRe []string) ApiDcimRackRolesListRequest {
	r.colorRe = &colorRe
	return r
}

func (r ApiDcimRackRolesListRequest) Created(created string) ApiDcimRackRolesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedGte(createdGte string) ApiDcimRackRolesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRackRolesListRequest) CreatedLte(createdLte string) ApiDcimRackRolesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRackRolesListRequest) Id(id []string) ApiDcimRackRolesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRackRolesListRequest) IdIc(idIc []string) ApiDcimRackRolesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRackRolesListRequest) IdIe(idIe []string) ApiDcimRackRolesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRackRolesListRequest) IdIew(idIew []string) ApiDcimRackRolesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRackRolesListRequest) IdIre(idIre []string) ApiDcimRackRolesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRackRolesListRequest) IdIsw(idIsw []string) ApiDcimRackRolesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRackRolesListRequest) IdN(idN []string) ApiDcimRackRolesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRackRolesListRequest) IdNic(idNic []string) ApiDcimRackRolesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRackRolesListRequest) IdNie(idNie []string) ApiDcimRackRolesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRackRolesListRequest) IdNiew(idNiew []string) ApiDcimRackRolesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRackRolesListRequest) IdNire(idNire []string) ApiDcimRackRolesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRackRolesListRequest) IdNisw(idNisw []string) ApiDcimRackRolesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRackRolesListRequest) IdNre(idNre []string) ApiDcimRackRolesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRackRolesListRequest) IdRe(idRe []string) ApiDcimRackRolesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdated(lastUpdated time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRackRolesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimRackRolesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimRackRolesListRequest) Limit(limit int32) ApiDcimRackRolesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRackRolesListRequest) Name(name []string) ApiDcimRackRolesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRackRolesListRequest) NameIc(nameIc []string) ApiDcimRackRolesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRackRolesListRequest) NameIe(nameIe []string) ApiDcimRackRolesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRackRolesListRequest) NameIew(nameIew []string) ApiDcimRackRolesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRackRolesListRequest) NameIre(nameIre []string) ApiDcimRackRolesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRackRolesListRequest) NameIsw(nameIsw []string) ApiDcimRackRolesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRackRolesListRequest) NameN(nameN []string) ApiDcimRackRolesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRackRolesListRequest) NameNic(nameNic []string) ApiDcimRackRolesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRackRolesListRequest) NameNie(nameNie []string) ApiDcimRackRolesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRackRolesListRequest) NameNiew(nameNiew []string) ApiDcimRackRolesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRackRolesListRequest) NameNire(nameNire []string) ApiDcimRackRolesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRackRolesListRequest) NameNisw(nameNisw []string) ApiDcimRackRolesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRackRolesListRequest) NameNre(nameNre []string) ApiDcimRackRolesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRackRolesListRequest) NameRe(nameRe []string) ApiDcimRackRolesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRackRolesListRequest) Offset(offset int32) ApiDcimRackRolesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimRackRolesListRequest) Q(q string) ApiDcimRackRolesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRackRolesListRequest) Slug(slug []string) ApiDcimRackRolesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIc(slugIc []string) ApiDcimRackRolesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIe(slugIe []string) ApiDcimRackRolesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIew(slugIew []string) ApiDcimRackRolesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIre(slugIre []string) ApiDcimRackRolesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimRackRolesListRequest) SlugIsw(slugIsw []string) ApiDcimRackRolesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimRackRolesListRequest) SlugN(slugN []string) ApiDcimRackRolesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNic(slugNic []string) ApiDcimRackRolesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNie(slugNie []string) ApiDcimRackRolesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNiew(slugNiew []string) ApiDcimRackRolesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNire(slugNire []string) ApiDcimRackRolesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNisw(slugNisw []string) ApiDcimRackRolesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimRackRolesListRequest) SlugNre(slugNre []string) ApiDcimRackRolesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimRackRolesListRequest) SlugRe(slugRe []string) ApiDcimRackRolesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimRackRolesListRequest) Execute() (*PaginatedRackRoleList, *http.Response, error) {
	return r.ApiService.DcimRackRolesListExecute(r)
}

/*
DcimRackRolesList Method for DcimRackRolesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRackRolesListRequest
*/
func (a *DcimApiService) DcimRackRolesList(ctx context.Context) ApiDcimRackRolesListRequest {
	return ApiDcimRackRolesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRackRoleList
func (a *DcimApiService) DcimRackRolesListExecute(r ApiDcimRackRolesListRequest) (*PaginatedRackRoleList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRackRoleList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.color != nil {
		t := *r.color
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color", parameterToString(t, "multi"))
		}
	}
	if r.colorIc != nil {
		t := *r.colorIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ic", parameterToString(t, "multi"))
		}
	}
	if r.colorIe != nil {
		t := *r.colorIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ie", parameterToString(t, "multi"))
		}
	}
	if r.colorIew != nil {
		t := *r.colorIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__iew", parameterToString(t, "multi"))
		}
	}
	if r.colorIre != nil {
		t := *r.colorIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__ire", parameterToString(t, "multi"))
		}
	}
	if r.colorIsw != nil {
		t := *r.colorIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__isw", parameterToString(t, "multi"))
		}
	}
	if r.colorN != nil {
		t := *r.colorN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__n", parameterToString(t, "multi"))
		}
	}
	if r.colorNic != nil {
		t := *r.colorNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nic", parameterToString(t, "multi"))
		}
	}
	if r.colorNie != nil {
		t := *r.colorNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nie", parameterToString(t, "multi"))
		}
	}
	if r.colorNiew != nil {
		t := *r.colorNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__niew", parameterToString(t, "multi"))
		}
	}
	if r.colorNire != nil {
		t := *r.colorNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nire", parameterToString(t, "multi"))
		}
	}
	if r.colorNisw != nil {
		t := *r.colorNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nisw", parameterToString(t, "multi"))
		}
	}
	if r.colorNre != nil {
		t := *r.colorNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__nre", parameterToString(t, "multi"))
		}
	}
	if r.colorRe != nil {
		t := *r.colorRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("color__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("color__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedRackRole *PatchedRackRole
}

func (r ApiDcimRackRolesPartialUpdateRequest) PatchedRackRole(patchedRackRole PatchedRackRole) ApiDcimRackRolesPartialUpdateRequest {
	r.patchedRackRole = &patchedRackRole
	return r
}

func (r ApiDcimRackRolesPartialUpdateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesPartialUpdateExecute(r)
}

/*
DcimRackRolesPartialUpdate Method for DcimRackRolesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack role.
 @return ApiDcimRackRolesPartialUpdateRequest
*/
func (a *DcimApiService) DcimRackRolesPartialUpdate(ctx context.Context, id string) ApiDcimRackRolesPartialUpdateRequest {
	return ApiDcimRackRolesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackRole
func (a *DcimApiService) DcimRackRolesPartialUpdateExecute(r ApiDcimRackRolesPartialUpdateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedRackRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRackRolesRetrieveRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesRetrieveExecute(r)
}

/*
DcimRackRolesRetrieve Method for DcimRackRolesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack role.
 @return ApiDcimRackRolesRetrieveRequest
*/
func (a *DcimApiService) DcimRackRolesRetrieve(ctx context.Context, id string) ApiDcimRackRolesRetrieveRequest {
	return ApiDcimRackRolesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackRole
func (a *DcimApiService) DcimRackRolesRetrieveExecute(r ApiDcimRackRolesRetrieveRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRackRolesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	rackRole *RackRole
}

func (r ApiDcimRackRolesUpdateRequest) RackRole(rackRole RackRole) ApiDcimRackRolesUpdateRequest {
	r.rackRole = &rackRole
	return r
}

func (r ApiDcimRackRolesUpdateRequest) Execute() (*RackRole, *http.Response, error) {
	return r.ApiService.DcimRackRolesUpdateExecute(r)
}

/*
DcimRackRolesUpdate Method for DcimRackRolesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack role.
 @return ApiDcimRackRolesUpdateRequest
*/
func (a *DcimApiService) DcimRackRolesUpdate(ctx context.Context, id string) ApiDcimRackRolesUpdateRequest {
	return ApiDcimRackRolesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RackRole
func (a *DcimApiService) DcimRackRolesUpdateExecute(r ApiDcimRackRolesUpdateRequest) (*RackRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RackRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRackRolesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rack-roles/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.rackRole == nil {
		return localVarReturnValue, nil, reportError("rackRole is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.rackRole
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRacksBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRacksBulkDestroyExecute(r)
}

/*
DcimRacksBulkDestroy Method for DcimRacksBulkDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRacksBulkDestroyRequest
*/
func (a *DcimApiService) DcimRacksBulkDestroy(ctx context.Context) ApiDcimRacksBulkDestroyRequest {
	return ApiDcimRacksBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRacksBulkDestroyExecute(r ApiDcimRacksBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRacksBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableRack *PatchedWritableRack
}

func (r ApiDcimRacksBulkPartialUpdateRequest) PatchedWritableRack(patchedWritableRack PatchedWritableRack) ApiDcimRacksBulkPartialUpdateRequest {
	r.patchedWritableRack = &patchedWritableRack
	return r
}

func (r ApiDcimRacksBulkPartialUpdateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksBulkPartialUpdateExecute(r)
}

/*
DcimRacksBulkPartialUpdate Method for DcimRacksBulkPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRacksBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRacksBulkPartialUpdate(ctx context.Context) ApiDcimRacksBulkPartialUpdateRequest {
	return ApiDcimRacksBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Rack
func (a *DcimApiService) DcimRacksBulkPartialUpdateExecute(r ApiDcimRacksBulkPartialUpdateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRack
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRack *WritableRack
}

func (r ApiDcimRacksBulkUpdateRequest) WritableRack(writableRack WritableRack) ApiDcimRacksBulkUpdateRequest {
	r.writableRack = &writableRack
	return r
}

func (r ApiDcimRacksBulkUpdateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksBulkUpdateExecute(r)
}

/*
DcimRacksBulkUpdate Method for DcimRacksBulkUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRacksBulkUpdateRequest
*/
func (a *DcimApiService) DcimRacksBulkUpdate(ctx context.Context) ApiDcimRacksBulkUpdateRequest {
	return ApiDcimRacksBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Rack
func (a *DcimApiService) DcimRacksBulkUpdateExecute(r ApiDcimRacksBulkUpdateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRack == nil {
		return localVarReturnValue, nil, reportError("writableRack is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRack
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRack *WritableRack
}

func (r ApiDcimRacksCreateRequest) WritableRack(writableRack WritableRack) ApiDcimRacksCreateRequest {
	r.writableRack = &writableRack
	return r
}

func (r ApiDcimRacksCreateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksCreateExecute(r)
}

/*
DcimRacksCreate Method for DcimRacksCreate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRacksCreateRequest
*/
func (a *DcimApiService) DcimRacksCreate(ctx context.Context) ApiDcimRacksCreateRequest {
	return ApiDcimRacksCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Rack
func (a *DcimApiService) DcimRacksCreateExecute(r ApiDcimRacksCreateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRack == nil {
		return localVarReturnValue, nil, reportError("writableRack is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRack
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRacksDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRacksDestroyExecute(r)
}

/*
DcimRacksDestroy Method for DcimRacksDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack.
 @return ApiDcimRacksDestroyRequest
*/
func (a *DcimApiService) DcimRacksDestroy(ctx context.Context, id string) ApiDcimRacksDestroyRequest {
	return ApiDcimRacksDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRacksDestroyExecute(r ApiDcimRacksDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRacksElevationListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	assetTag *[]string
	assetTagIc *[]string
	assetTagIe *[]string
	assetTagIew *[]string
	assetTagIre *[]string
	assetTagIsw *[]string
	assetTagN *[]string
	assetTagNic *[]string
	assetTagNie *[]string
	assetTagNiew *[]string
	assetTagNire *[]string
	assetTagNisw *[]string
	assetTagNre *[]string
	assetTagRe *[]string
	created *string
	createdGte *string
	createdLte *string
	descUnits *bool
	exclude *string
	expandDevices *bool
	face *string
	facilityId *[]string
	facilityIdIc *[]string
	facilityIdIe *[]string
	facilityIdIew *[]string
	facilityIdIre *[]string
	facilityIdIsw *[]string
	facilityIdN *[]string
	facilityIdNic *[]string
	facilityIdNie *[]string
	facilityIdNiew *[]string
	facilityIdNire *[]string
	facilityIdNisw *[]string
	facilityIdNre *[]string
	facilityIdRe *[]string
	group *[]string
	groupN *[]string
	groupId *[]string
	groupIdN *[]string
	id2 *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	includeImages *bool
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	legendWidth *int32
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	outerDepth *[]int32
	outerDepthGt *[]int32
	outerDepthGte *[]int32
	outerDepthLt *[]int32
	outerDepthLte *[]int32
	outerDepthN *[]int32
	outerUnit *string
	outerUnitN *string
	outerWidth *[]int32
	outerWidthGt *[]int32
	outerWidthGte *[]int32
	outerWidthLt *[]int32
	outerWidthLte *[]int32
	outerWidthN *[]int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	render *string
	role *[]string
	roleN *[]string
	roleId *[]*string
	roleIdN *[]*string
	serial *string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	status *[]string
	statusN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
	type_ *[]string
	typeN *[]string
	uHeight *[]int32
	uHeightGt *[]int32
	uHeightGte *[]int32
	uHeightLt *[]int32
	uHeightLte *[]int32
	uHeightN *[]int32
	unitHeight *int32
	unitWidth *int32
	width *[]int32
	widthN *[]int32
}

func (r ApiDcimRacksElevationListRequest) AssetTag(assetTag []string) ApiDcimRacksElevationListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagIc(assetTagIc []string) ApiDcimRacksElevationListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagIe(assetTagIe []string) ApiDcimRacksElevationListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagIew(assetTagIew []string) ApiDcimRacksElevationListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagIre(assetTagIre []string) ApiDcimRacksElevationListRequest {
	r.assetTagIre = &assetTagIre
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimRacksElevationListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagN(assetTagN []string) ApiDcimRacksElevationListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagNic(assetTagNic []string) ApiDcimRacksElevationListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagNie(assetTagNie []string) ApiDcimRacksElevationListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimRacksElevationListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagNire(assetTagNire []string) ApiDcimRacksElevationListRequest {
	r.assetTagNire = &assetTagNire
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimRacksElevationListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagNre(assetTagNre []string) ApiDcimRacksElevationListRequest {
	r.assetTagNre = &assetTagNre
	return r
}

func (r ApiDcimRacksElevationListRequest) AssetTagRe(assetTagRe []string) ApiDcimRacksElevationListRequest {
	r.assetTagRe = &assetTagRe
	return r
}

func (r ApiDcimRacksElevationListRequest) Created(created string) ApiDcimRacksElevationListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRacksElevationListRequest) CreatedGte(createdGte string) ApiDcimRacksElevationListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRacksElevationListRequest) CreatedLte(createdLte string) ApiDcimRacksElevationListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRacksElevationListRequest) DescUnits(descUnits bool) ApiDcimRacksElevationListRequest {
	r.descUnits = &descUnits
	return r
}

func (r ApiDcimRacksElevationListRequest) Exclude(exclude string) ApiDcimRacksElevationListRequest {
	r.exclude = &exclude
	return r
}

func (r ApiDcimRacksElevationListRequest) ExpandDevices(expandDevices bool) ApiDcimRacksElevationListRequest {
	r.expandDevices = &expandDevices
	return r
}

func (r ApiDcimRacksElevationListRequest) Face(face string) ApiDcimRacksElevationListRequest {
	r.face = &face
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityId(facilityId []string) ApiDcimRacksElevationListRequest {
	r.facilityId = &facilityId
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdIc(facilityIdIc []string) ApiDcimRacksElevationListRequest {
	r.facilityIdIc = &facilityIdIc
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdIe(facilityIdIe []string) ApiDcimRacksElevationListRequest {
	r.facilityIdIe = &facilityIdIe
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdIew(facilityIdIew []string) ApiDcimRacksElevationListRequest {
	r.facilityIdIew = &facilityIdIew
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdIre(facilityIdIre []string) ApiDcimRacksElevationListRequest {
	r.facilityIdIre = &facilityIdIre
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdIsw(facilityIdIsw []string) ApiDcimRacksElevationListRequest {
	r.facilityIdIsw = &facilityIdIsw
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdN(facilityIdN []string) ApiDcimRacksElevationListRequest {
	r.facilityIdN = &facilityIdN
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdNic(facilityIdNic []string) ApiDcimRacksElevationListRequest {
	r.facilityIdNic = &facilityIdNic
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdNie(facilityIdNie []string) ApiDcimRacksElevationListRequest {
	r.facilityIdNie = &facilityIdNie
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdNiew(facilityIdNiew []string) ApiDcimRacksElevationListRequest {
	r.facilityIdNiew = &facilityIdNiew
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdNire(facilityIdNire []string) ApiDcimRacksElevationListRequest {
	r.facilityIdNire = &facilityIdNire
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdNisw(facilityIdNisw []string) ApiDcimRacksElevationListRequest {
	r.facilityIdNisw = &facilityIdNisw
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdNre(facilityIdNre []string) ApiDcimRacksElevationListRequest {
	r.facilityIdNre = &facilityIdNre
	return r
}

func (r ApiDcimRacksElevationListRequest) FacilityIdRe(facilityIdRe []string) ApiDcimRacksElevationListRequest {
	r.facilityIdRe = &facilityIdRe
	return r
}

// Rack group (slug)
func (r ApiDcimRacksElevationListRequest) Group(group []string) ApiDcimRacksElevationListRequest {
	r.group = &group
	return r
}

// Rack group (slug)
func (r ApiDcimRacksElevationListRequest) GroupN(groupN []string) ApiDcimRacksElevationListRequest {
	r.groupN = &groupN
	return r
}

// Rack group (ID)
func (r ApiDcimRacksElevationListRequest) GroupId(groupId []string) ApiDcimRacksElevationListRequest {
	r.groupId = &groupId
	return r
}

// Rack group (ID)
func (r ApiDcimRacksElevationListRequest) GroupIdN(groupIdN []string) ApiDcimRacksElevationListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiDcimRacksElevationListRequest) Id2(id2 []string) ApiDcimRacksElevationListRequest {
	r.id2 = &id2
	return r
}

func (r ApiDcimRacksElevationListRequest) IdIc(idIc []string) ApiDcimRacksElevationListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRacksElevationListRequest) IdIe(idIe []string) ApiDcimRacksElevationListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRacksElevationListRequest) IdIew(idIew []string) ApiDcimRacksElevationListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRacksElevationListRequest) IdIre(idIre []string) ApiDcimRacksElevationListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRacksElevationListRequest) IdIsw(idIsw []string) ApiDcimRacksElevationListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRacksElevationListRequest) IdN(idN []string) ApiDcimRacksElevationListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRacksElevationListRequest) IdNic(idNic []string) ApiDcimRacksElevationListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRacksElevationListRequest) IdNie(idNie []string) ApiDcimRacksElevationListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRacksElevationListRequest) IdNiew(idNiew []string) ApiDcimRacksElevationListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRacksElevationListRequest) IdNire(idNire []string) ApiDcimRacksElevationListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRacksElevationListRequest) IdNisw(idNisw []string) ApiDcimRacksElevationListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRacksElevationListRequest) IdNre(idNre []string) ApiDcimRacksElevationListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRacksElevationListRequest) IdRe(idRe []string) ApiDcimRacksElevationListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimRacksElevationListRequest) IncludeImages(includeImages bool) ApiDcimRacksElevationListRequest {
	r.includeImages = &includeImages
	return r
}

func (r ApiDcimRacksElevationListRequest) LastUpdated(lastUpdated time.Time) ApiDcimRacksElevationListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRacksElevationListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimRacksElevationListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRacksElevationListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimRacksElevationListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimRacksElevationListRequest) LegendWidth(legendWidth int32) ApiDcimRacksElevationListRequest {
	r.legendWidth = &legendWidth
	return r
}

// Number of results to return per page.
func (r ApiDcimRacksElevationListRequest) Limit(limit int32) ApiDcimRacksElevationListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRacksElevationListRequest) Name(name []string) ApiDcimRacksElevationListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRacksElevationListRequest) NameIc(nameIc []string) ApiDcimRacksElevationListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRacksElevationListRequest) NameIe(nameIe []string) ApiDcimRacksElevationListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRacksElevationListRequest) NameIew(nameIew []string) ApiDcimRacksElevationListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRacksElevationListRequest) NameIre(nameIre []string) ApiDcimRacksElevationListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRacksElevationListRequest) NameIsw(nameIsw []string) ApiDcimRacksElevationListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRacksElevationListRequest) NameN(nameN []string) ApiDcimRacksElevationListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRacksElevationListRequest) NameNic(nameNic []string) ApiDcimRacksElevationListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRacksElevationListRequest) NameNie(nameNie []string) ApiDcimRacksElevationListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRacksElevationListRequest) NameNiew(nameNiew []string) ApiDcimRacksElevationListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRacksElevationListRequest) NameNire(nameNire []string) ApiDcimRacksElevationListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRacksElevationListRequest) NameNisw(nameNisw []string) ApiDcimRacksElevationListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRacksElevationListRequest) NameNre(nameNre []string) ApiDcimRacksElevationListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRacksElevationListRequest) NameRe(nameRe []string) ApiDcimRacksElevationListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRacksElevationListRequest) Offset(offset int32) ApiDcimRacksElevationListRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterDepth(outerDepth []int32) ApiDcimRacksElevationListRequest {
	r.outerDepth = &outerDepth
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterDepthGt(outerDepthGt []int32) ApiDcimRacksElevationListRequest {
	r.outerDepthGt = &outerDepthGt
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterDepthGte(outerDepthGte []int32) ApiDcimRacksElevationListRequest {
	r.outerDepthGte = &outerDepthGte
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterDepthLt(outerDepthLt []int32) ApiDcimRacksElevationListRequest {
	r.outerDepthLt = &outerDepthLt
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterDepthLte(outerDepthLte []int32) ApiDcimRacksElevationListRequest {
	r.outerDepthLte = &outerDepthLte
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterDepthN(outerDepthN []int32) ApiDcimRacksElevationListRequest {
	r.outerDepthN = &outerDepthN
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterUnit(outerUnit string) ApiDcimRacksElevationListRequest {
	r.outerUnit = &outerUnit
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterUnitN(outerUnitN string) ApiDcimRacksElevationListRequest {
	r.outerUnitN = &outerUnitN
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterWidth(outerWidth []int32) ApiDcimRacksElevationListRequest {
	r.outerWidth = &outerWidth
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterWidthGt(outerWidthGt []int32) ApiDcimRacksElevationListRequest {
	r.outerWidthGt = &outerWidthGt
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterWidthGte(outerWidthGte []int32) ApiDcimRacksElevationListRequest {
	r.outerWidthGte = &outerWidthGte
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterWidthLt(outerWidthLt []int32) ApiDcimRacksElevationListRequest {
	r.outerWidthLt = &outerWidthLt
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterWidthLte(outerWidthLte []int32) ApiDcimRacksElevationListRequest {
	r.outerWidthLte = &outerWidthLte
	return r
}

func (r ApiDcimRacksElevationListRequest) OuterWidthN(outerWidthN []int32) ApiDcimRacksElevationListRequest {
	r.outerWidthN = &outerWidthN
	return r
}

func (r ApiDcimRacksElevationListRequest) Q(q string) ApiDcimRacksElevationListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimRacksElevationListRequest) Region(region []string) ApiDcimRacksElevationListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimRacksElevationListRequest) RegionN(regionN []string) ApiDcimRacksElevationListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimRacksElevationListRequest) RegionId(regionId []string) ApiDcimRacksElevationListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimRacksElevationListRequest) RegionIdN(regionIdN []string) ApiDcimRacksElevationListRequest {
	r.regionIdN = &regionIdN
	return r
}

func (r ApiDcimRacksElevationListRequest) Render(render string) ApiDcimRacksElevationListRequest {
	r.render = &render
	return r
}

// Role (slug)
func (r ApiDcimRacksElevationListRequest) Role(role []string) ApiDcimRacksElevationListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimRacksElevationListRequest) RoleN(roleN []string) ApiDcimRacksElevationListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimRacksElevationListRequest) RoleId(roleId []*string) ApiDcimRacksElevationListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimRacksElevationListRequest) RoleIdN(roleIdN []*string) ApiDcimRacksElevationListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiDcimRacksElevationListRequest) Serial(serial string) ApiDcimRacksElevationListRequest {
	r.serial = &serial
	return r
}

// Site (slug)
func (r ApiDcimRacksElevationListRequest) Site(site []string) ApiDcimRacksElevationListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimRacksElevationListRequest) SiteN(siteN []string) ApiDcimRacksElevationListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimRacksElevationListRequest) SiteId(siteId []string) ApiDcimRacksElevationListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRacksElevationListRequest) SiteIdN(siteIdN []string) ApiDcimRacksElevationListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRacksElevationListRequest) Status(status []string) ApiDcimRacksElevationListRequest {
	r.status = &status
	return r
}

func (r ApiDcimRacksElevationListRequest) StatusN(statusN []string) ApiDcimRacksElevationListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimRacksElevationListRequest) Tag(tag []string) ApiDcimRacksElevationListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRacksElevationListRequest) TagN(tagN []string) ApiDcimRacksElevationListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimRacksElevationListRequest) Tenant(tenant []string) ApiDcimRacksElevationListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimRacksElevationListRequest) TenantN(tenantN []string) ApiDcimRacksElevationListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiDcimRacksElevationListRequest) TenantGroup(tenantGroup []string) ApiDcimRacksElevationListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiDcimRacksElevationListRequest) TenantGroupN(tenantGroupN []string) ApiDcimRacksElevationListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiDcimRacksElevationListRequest) TenantGroupId(tenantGroupId []string) ApiDcimRacksElevationListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiDcimRacksElevationListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimRacksElevationListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimRacksElevationListRequest) TenantId(tenantId []*string) ApiDcimRacksElevationListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimRacksElevationListRequest) TenantIdN(tenantIdN []*string) ApiDcimRacksElevationListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimRacksElevationListRequest) Type_(type_ []string) ApiDcimRacksElevationListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRacksElevationListRequest) TypeN(typeN []string) ApiDcimRacksElevationListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRacksElevationListRequest) UHeight(uHeight []int32) ApiDcimRacksElevationListRequest {
	r.uHeight = &uHeight
	return r
}

func (r ApiDcimRacksElevationListRequest) UHeightGt(uHeightGt []int32) ApiDcimRacksElevationListRequest {
	r.uHeightGt = &uHeightGt
	return r
}

func (r ApiDcimRacksElevationListRequest) UHeightGte(uHeightGte []int32) ApiDcimRacksElevationListRequest {
	r.uHeightGte = &uHeightGte
	return r
}

func (r ApiDcimRacksElevationListRequest) UHeightLt(uHeightLt []int32) ApiDcimRacksElevationListRequest {
	r.uHeightLt = &uHeightLt
	return r
}

func (r ApiDcimRacksElevationListRequest) UHeightLte(uHeightLte []int32) ApiDcimRacksElevationListRequest {
	r.uHeightLte = &uHeightLte
	return r
}

func (r ApiDcimRacksElevationListRequest) UHeightN(uHeightN []int32) ApiDcimRacksElevationListRequest {
	r.uHeightN = &uHeightN
	return r
}

func (r ApiDcimRacksElevationListRequest) UnitHeight(unitHeight int32) ApiDcimRacksElevationListRequest {
	r.unitHeight = &unitHeight
	return r
}

func (r ApiDcimRacksElevationListRequest) UnitWidth(unitWidth int32) ApiDcimRacksElevationListRequest {
	r.unitWidth = &unitWidth
	return r
}

// Rail-to-rail width
func (r ApiDcimRacksElevationListRequest) Width(width []int32) ApiDcimRacksElevationListRequest {
	r.width = &width
	return r
}

// Rail-to-rail width
func (r ApiDcimRacksElevationListRequest) WidthN(widthN []int32) ApiDcimRacksElevationListRequest {
	r.widthN = &widthN
	return r
}

func (r ApiDcimRacksElevationListRequest) Execute() (*PaginatedRackUnitList, *http.Response, error) {
	return r.ApiService.DcimRacksElevationListExecute(r)
}

/*
DcimRacksElevationList Method for DcimRacksElevationList

Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack.
 @return ApiDcimRacksElevationListRequest
*/
func (a *DcimApiService) DcimRacksElevationList(ctx context.Context, id string) ApiDcimRacksElevationListRequest {
	return ApiDcimRacksElevationListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedRackUnitList
func (a *DcimApiService) DcimRacksElevationListExecute(r ApiDcimRacksElevationListRequest) (*PaginatedRackUnitList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRackUnitList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksElevationList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/{id}/elevation/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__iew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIre != nil {
		t := *r.assetTagIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__isw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__n", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__niew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNire != nil {
		t := *r.assetTagNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nisw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNre != nil {
		t := *r.assetTagNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nre", parameterToString(t, "multi"))
		}
	}
	if r.assetTagRe != nil {
		t := *r.assetTagRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.descUnits != nil {
		localVarQueryParams.Add("desc_units", parameterToString(*r.descUnits, ""))
	}
	if r.exclude != nil {
		localVarQueryParams.Add("exclude", parameterToString(*r.exclude, ""))
	}
	if r.expandDevices != nil {
		localVarQueryParams.Add("expand_devices", parameterToString(*r.expandDevices, ""))
	}
	if r.face != nil {
		localVarQueryParams.Add("face", parameterToString(*r.face, ""))
	}
	if r.facilityId != nil {
		t := *r.facilityId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIc != nil {
		t := *r.facilityIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIe != nil {
		t := *r.facilityIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIew != nil {
		t := *r.facilityIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIre != nil {
		t := *r.facilityIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIsw != nil {
		t := *r.facilityIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdN != nil {
		t := *r.facilityIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__n", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNic != nil {
		t := *r.facilityIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNie != nil {
		t := *r.facilityIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNiew != nil {
		t := *r.facilityIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNire != nil {
		t := *r.facilityIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNisw != nil {
		t := *r.facilityIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNre != nil {
		t := *r.facilityIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdRe != nil {
		t := *r.facilityIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__re", parameterToString(t, "multi"))
		}
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group", parameterToString(t, "multi"))
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group__n", parameterToString(t, "multi"))
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id", parameterToString(t, "multi"))
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id2 != nil {
		t := *r.id2
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.includeImages != nil {
		localVarQueryParams.Add("include_images", parameterToString(*r.includeImages, ""))
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.legendWidth != nil {
		localVarQueryParams.Add("legend_width", parameterToString(*r.legendWidth, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.outerDepth != nil {
		t := *r.outerDepth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthGt != nil {
		t := *r.outerDepthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__gt", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthGte != nil {
		t := *r.outerDepthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__gte", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthLt != nil {
		t := *r.outerDepthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__lt", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthLte != nil {
		t := *r.outerDepthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__lte", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthN != nil {
		t := *r.outerDepthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__n", parameterToString(t, "multi"))
		}
	}
	if r.outerUnit != nil {
		localVarQueryParams.Add("outer_unit", parameterToString(*r.outerUnit, ""))
	}
	if r.outerUnitN != nil {
		localVarQueryParams.Add("outer_unit__n", parameterToString(*r.outerUnitN, ""))
	}
	if r.outerWidth != nil {
		t := *r.outerWidth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthGt != nil {
		t := *r.outerWidthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__gt", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthGte != nil {
		t := *r.outerWidthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__gte", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthLt != nil {
		t := *r.outerWidthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__lt", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthLte != nil {
		t := *r.outerWidthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__lte", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthN != nil {
		t := *r.outerWidthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.render != nil {
		localVarQueryParams.Add("render", parameterToString(*r.render, ""))
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role", parameterToString(t, "multi"))
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role__n", parameterToString(t, "multi"))
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id", parameterToString(t, "multi"))
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id__n", parameterToString(t, "multi"))
		}
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	if r.uHeight != nil {
		t := *r.uHeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height", parameterToString(t, "multi"))
		}
	}
	if r.uHeightGt != nil {
		t := *r.uHeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__gt", parameterToString(t, "multi"))
		}
	}
	if r.uHeightGte != nil {
		t := *r.uHeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__gte", parameterToString(t, "multi"))
		}
	}
	if r.uHeightLt != nil {
		t := *r.uHeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__lt", parameterToString(t, "multi"))
		}
	}
	if r.uHeightLte != nil {
		t := *r.uHeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__lte", parameterToString(t, "multi"))
		}
	}
	if r.uHeightN != nil {
		t := *r.uHeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__n", parameterToString(t, "multi"))
		}
	}
	if r.unitHeight != nil {
		localVarQueryParams.Add("unit_height", parameterToString(*r.unitHeight, ""))
	}
	if r.unitWidth != nil {
		localVarQueryParams.Add("unit_width", parameterToString(*r.unitWidth, ""))
	}
	if r.width != nil {
		t := *r.width
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("width", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("width", parameterToString(t, "multi"))
		}
	}
	if r.widthN != nil {
		t := *r.widthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("width__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("width__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	assetTag *[]string
	assetTagIc *[]string
	assetTagIe *[]string
	assetTagIew *[]string
	assetTagIre *[]string
	assetTagIsw *[]string
	assetTagN *[]string
	assetTagNic *[]string
	assetTagNie *[]string
	assetTagNiew *[]string
	assetTagNire *[]string
	assetTagNisw *[]string
	assetTagNre *[]string
	assetTagRe *[]string
	created *string
	createdGte *string
	createdLte *string
	descUnits *bool
	facilityId *[]string
	facilityIdIc *[]string
	facilityIdIe *[]string
	facilityIdIew *[]string
	facilityIdIre *[]string
	facilityIdIsw *[]string
	facilityIdN *[]string
	facilityIdNic *[]string
	facilityIdNie *[]string
	facilityIdNiew *[]string
	facilityIdNire *[]string
	facilityIdNisw *[]string
	facilityIdNre *[]string
	facilityIdRe *[]string
	group *[]string
	groupN *[]string
	groupId *[]string
	groupIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	outerDepth *[]int32
	outerDepthGt *[]int32
	outerDepthGte *[]int32
	outerDepthLt *[]int32
	outerDepthLte *[]int32
	outerDepthN *[]int32
	outerUnit *string
	outerUnitN *string
	outerWidth *[]int32
	outerWidthGt *[]int32
	outerWidthGte *[]int32
	outerWidthLt *[]int32
	outerWidthLte *[]int32
	outerWidthN *[]int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	role *[]string
	roleN *[]string
	roleId *[]*string
	roleIdN *[]*string
	serial *string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	status *[]string
	statusN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
	type_ *[]string
	typeN *[]string
	uHeight *[]int32
	uHeightGt *[]int32
	uHeightGte *[]int32
	uHeightLt *[]int32
	uHeightLte *[]int32
	uHeightN *[]int32
	width *[]int32
	widthN *[]int32
}

func (r ApiDcimRacksListRequest) AssetTag(assetTag []string) ApiDcimRacksListRequest {
	r.assetTag = &assetTag
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIc(assetTagIc []string) ApiDcimRacksListRequest {
	r.assetTagIc = &assetTagIc
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIe(assetTagIe []string) ApiDcimRacksListRequest {
	r.assetTagIe = &assetTagIe
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIew(assetTagIew []string) ApiDcimRacksListRequest {
	r.assetTagIew = &assetTagIew
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIre(assetTagIre []string) ApiDcimRacksListRequest {
	r.assetTagIre = &assetTagIre
	return r
}

func (r ApiDcimRacksListRequest) AssetTagIsw(assetTagIsw []string) ApiDcimRacksListRequest {
	r.assetTagIsw = &assetTagIsw
	return r
}

func (r ApiDcimRacksListRequest) AssetTagN(assetTagN []string) ApiDcimRacksListRequest {
	r.assetTagN = &assetTagN
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNic(assetTagNic []string) ApiDcimRacksListRequest {
	r.assetTagNic = &assetTagNic
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNie(assetTagNie []string) ApiDcimRacksListRequest {
	r.assetTagNie = &assetTagNie
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNiew(assetTagNiew []string) ApiDcimRacksListRequest {
	r.assetTagNiew = &assetTagNiew
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNire(assetTagNire []string) ApiDcimRacksListRequest {
	r.assetTagNire = &assetTagNire
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNisw(assetTagNisw []string) ApiDcimRacksListRequest {
	r.assetTagNisw = &assetTagNisw
	return r
}

func (r ApiDcimRacksListRequest) AssetTagNre(assetTagNre []string) ApiDcimRacksListRequest {
	r.assetTagNre = &assetTagNre
	return r
}

func (r ApiDcimRacksListRequest) AssetTagRe(assetTagRe []string) ApiDcimRacksListRequest {
	r.assetTagRe = &assetTagRe
	return r
}

func (r ApiDcimRacksListRequest) Created(created string) ApiDcimRacksListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRacksListRequest) CreatedGte(createdGte string) ApiDcimRacksListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRacksListRequest) CreatedLte(createdLte string) ApiDcimRacksListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRacksListRequest) DescUnits(descUnits bool) ApiDcimRacksListRequest {
	r.descUnits = &descUnits
	return r
}

func (r ApiDcimRacksListRequest) FacilityId(facilityId []string) ApiDcimRacksListRequest {
	r.facilityId = &facilityId
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIc(facilityIdIc []string) ApiDcimRacksListRequest {
	r.facilityIdIc = &facilityIdIc
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIe(facilityIdIe []string) ApiDcimRacksListRequest {
	r.facilityIdIe = &facilityIdIe
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIew(facilityIdIew []string) ApiDcimRacksListRequest {
	r.facilityIdIew = &facilityIdIew
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIre(facilityIdIre []string) ApiDcimRacksListRequest {
	r.facilityIdIre = &facilityIdIre
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdIsw(facilityIdIsw []string) ApiDcimRacksListRequest {
	r.facilityIdIsw = &facilityIdIsw
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdN(facilityIdN []string) ApiDcimRacksListRequest {
	r.facilityIdN = &facilityIdN
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNic(facilityIdNic []string) ApiDcimRacksListRequest {
	r.facilityIdNic = &facilityIdNic
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNie(facilityIdNie []string) ApiDcimRacksListRequest {
	r.facilityIdNie = &facilityIdNie
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNiew(facilityIdNiew []string) ApiDcimRacksListRequest {
	r.facilityIdNiew = &facilityIdNiew
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNire(facilityIdNire []string) ApiDcimRacksListRequest {
	r.facilityIdNire = &facilityIdNire
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNisw(facilityIdNisw []string) ApiDcimRacksListRequest {
	r.facilityIdNisw = &facilityIdNisw
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdNre(facilityIdNre []string) ApiDcimRacksListRequest {
	r.facilityIdNre = &facilityIdNre
	return r
}

func (r ApiDcimRacksListRequest) FacilityIdRe(facilityIdRe []string) ApiDcimRacksListRequest {
	r.facilityIdRe = &facilityIdRe
	return r
}

// Rack group (slug)
func (r ApiDcimRacksListRequest) Group(group []string) ApiDcimRacksListRequest {
	r.group = &group
	return r
}

// Rack group (slug)
func (r ApiDcimRacksListRequest) GroupN(groupN []string) ApiDcimRacksListRequest {
	r.groupN = &groupN
	return r
}

// Rack group (ID)
func (r ApiDcimRacksListRequest) GroupId(groupId []string) ApiDcimRacksListRequest {
	r.groupId = &groupId
	return r
}

// Rack group (ID)
func (r ApiDcimRacksListRequest) GroupIdN(groupIdN []string) ApiDcimRacksListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiDcimRacksListRequest) Id(id []string) ApiDcimRacksListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRacksListRequest) IdIc(idIc []string) ApiDcimRacksListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRacksListRequest) IdIe(idIe []string) ApiDcimRacksListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRacksListRequest) IdIew(idIew []string) ApiDcimRacksListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRacksListRequest) IdIre(idIre []string) ApiDcimRacksListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRacksListRequest) IdIsw(idIsw []string) ApiDcimRacksListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRacksListRequest) IdN(idN []string) ApiDcimRacksListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRacksListRequest) IdNic(idNic []string) ApiDcimRacksListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRacksListRequest) IdNie(idNie []string) ApiDcimRacksListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRacksListRequest) IdNiew(idNiew []string) ApiDcimRacksListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRacksListRequest) IdNire(idNire []string) ApiDcimRacksListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRacksListRequest) IdNisw(idNisw []string) ApiDcimRacksListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRacksListRequest) IdNre(idNre []string) ApiDcimRacksListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRacksListRequest) IdRe(idRe []string) ApiDcimRacksListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimRacksListRequest) LastUpdated(lastUpdated time.Time) ApiDcimRacksListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRacksListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimRacksListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimRacksListRequest) Limit(limit int32) ApiDcimRacksListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRacksListRequest) Name(name []string) ApiDcimRacksListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRacksListRequest) NameIc(nameIc []string) ApiDcimRacksListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRacksListRequest) NameIe(nameIe []string) ApiDcimRacksListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRacksListRequest) NameIew(nameIew []string) ApiDcimRacksListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRacksListRequest) NameIre(nameIre []string) ApiDcimRacksListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRacksListRequest) NameIsw(nameIsw []string) ApiDcimRacksListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRacksListRequest) NameN(nameN []string) ApiDcimRacksListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRacksListRequest) NameNic(nameNic []string) ApiDcimRacksListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRacksListRequest) NameNie(nameNie []string) ApiDcimRacksListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRacksListRequest) NameNiew(nameNiew []string) ApiDcimRacksListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRacksListRequest) NameNire(nameNire []string) ApiDcimRacksListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRacksListRequest) NameNisw(nameNisw []string) ApiDcimRacksListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRacksListRequest) NameNre(nameNre []string) ApiDcimRacksListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRacksListRequest) NameRe(nameRe []string) ApiDcimRacksListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRacksListRequest) Offset(offset int32) ApiDcimRacksListRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimRacksListRequest) OuterDepth(outerDepth []int32) ApiDcimRacksListRequest {
	r.outerDepth = &outerDepth
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthGt(outerDepthGt []int32) ApiDcimRacksListRequest {
	r.outerDepthGt = &outerDepthGt
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthGte(outerDepthGte []int32) ApiDcimRacksListRequest {
	r.outerDepthGte = &outerDepthGte
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthLt(outerDepthLt []int32) ApiDcimRacksListRequest {
	r.outerDepthLt = &outerDepthLt
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthLte(outerDepthLte []int32) ApiDcimRacksListRequest {
	r.outerDepthLte = &outerDepthLte
	return r
}

func (r ApiDcimRacksListRequest) OuterDepthN(outerDepthN []int32) ApiDcimRacksListRequest {
	r.outerDepthN = &outerDepthN
	return r
}

func (r ApiDcimRacksListRequest) OuterUnit(outerUnit string) ApiDcimRacksListRequest {
	r.outerUnit = &outerUnit
	return r
}

func (r ApiDcimRacksListRequest) OuterUnitN(outerUnitN string) ApiDcimRacksListRequest {
	r.outerUnitN = &outerUnitN
	return r
}

func (r ApiDcimRacksListRequest) OuterWidth(outerWidth []int32) ApiDcimRacksListRequest {
	r.outerWidth = &outerWidth
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthGt(outerWidthGt []int32) ApiDcimRacksListRequest {
	r.outerWidthGt = &outerWidthGt
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthGte(outerWidthGte []int32) ApiDcimRacksListRequest {
	r.outerWidthGte = &outerWidthGte
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthLt(outerWidthLt []int32) ApiDcimRacksListRequest {
	r.outerWidthLt = &outerWidthLt
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthLte(outerWidthLte []int32) ApiDcimRacksListRequest {
	r.outerWidthLte = &outerWidthLte
	return r
}

func (r ApiDcimRacksListRequest) OuterWidthN(outerWidthN []int32) ApiDcimRacksListRequest {
	r.outerWidthN = &outerWidthN
	return r
}

// Search
func (r ApiDcimRacksListRequest) Q(q string) ApiDcimRacksListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimRacksListRequest) Region(region []string) ApiDcimRacksListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimRacksListRequest) RegionN(regionN []string) ApiDcimRacksListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimRacksListRequest) RegionId(regionId []string) ApiDcimRacksListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimRacksListRequest) RegionIdN(regionIdN []string) ApiDcimRacksListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiDcimRacksListRequest) Role(role []string) ApiDcimRacksListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiDcimRacksListRequest) RoleN(roleN []string) ApiDcimRacksListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiDcimRacksListRequest) RoleId(roleId []*string) ApiDcimRacksListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiDcimRacksListRequest) RoleIdN(roleIdN []*string) ApiDcimRacksListRequest {
	r.roleIdN = &roleIdN
	return r
}

func (r ApiDcimRacksListRequest) Serial(serial string) ApiDcimRacksListRequest {
	r.serial = &serial
	return r
}

// Site (slug)
func (r ApiDcimRacksListRequest) Site(site []string) ApiDcimRacksListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiDcimRacksListRequest) SiteN(siteN []string) ApiDcimRacksListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimRacksListRequest) SiteId(siteId []string) ApiDcimRacksListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRacksListRequest) SiteIdN(siteIdN []string) ApiDcimRacksListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRacksListRequest) Status(status []string) ApiDcimRacksListRequest {
	r.status = &status
	return r
}

func (r ApiDcimRacksListRequest) StatusN(statusN []string) ApiDcimRacksListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimRacksListRequest) Tag(tag []string) ApiDcimRacksListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRacksListRequest) TagN(tagN []string) ApiDcimRacksListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimRacksListRequest) Tenant(tenant []string) ApiDcimRacksListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimRacksListRequest) TenantN(tenantN []string) ApiDcimRacksListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiDcimRacksListRequest) TenantGroup(tenantGroup []string) ApiDcimRacksListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiDcimRacksListRequest) TenantGroupN(tenantGroupN []string) ApiDcimRacksListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiDcimRacksListRequest) TenantGroupId(tenantGroupId []string) ApiDcimRacksListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiDcimRacksListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimRacksListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimRacksListRequest) TenantId(tenantId []*string) ApiDcimRacksListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimRacksListRequest) TenantIdN(tenantIdN []*string) ApiDcimRacksListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimRacksListRequest) Type_(type_ []string) ApiDcimRacksListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRacksListRequest) TypeN(typeN []string) ApiDcimRacksListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRacksListRequest) UHeight(uHeight []int32) ApiDcimRacksListRequest {
	r.uHeight = &uHeight
	return r
}

func (r ApiDcimRacksListRequest) UHeightGt(uHeightGt []int32) ApiDcimRacksListRequest {
	r.uHeightGt = &uHeightGt
	return r
}

func (r ApiDcimRacksListRequest) UHeightGte(uHeightGte []int32) ApiDcimRacksListRequest {
	r.uHeightGte = &uHeightGte
	return r
}

func (r ApiDcimRacksListRequest) UHeightLt(uHeightLt []int32) ApiDcimRacksListRequest {
	r.uHeightLt = &uHeightLt
	return r
}

func (r ApiDcimRacksListRequest) UHeightLte(uHeightLte []int32) ApiDcimRacksListRequest {
	r.uHeightLte = &uHeightLte
	return r
}

func (r ApiDcimRacksListRequest) UHeightN(uHeightN []int32) ApiDcimRacksListRequest {
	r.uHeightN = &uHeightN
	return r
}

// Rail-to-rail width
func (r ApiDcimRacksListRequest) Width(width []int32) ApiDcimRacksListRequest {
	r.width = &width
	return r
}

// Rail-to-rail width
func (r ApiDcimRacksListRequest) WidthN(widthN []int32) ApiDcimRacksListRequest {
	r.widthN = &widthN
	return r
}

func (r ApiDcimRacksListRequest) Execute() (*PaginatedRackList, *http.Response, error) {
	return r.ApiService.DcimRacksListExecute(r)
}

/*
DcimRacksList Method for DcimRacksList

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRacksListRequest
*/
func (a *DcimApiService) DcimRacksList(ctx context.Context) ApiDcimRacksListRequest {
	return ApiDcimRacksListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRackList
func (a *DcimApiService) DcimRacksListExecute(r ApiDcimRacksListRequest) (*PaginatedRackList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRackList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.assetTag != nil {
		t := *r.assetTag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIc != nil {
		t := *r.assetTagIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIe != nil {
		t := *r.assetTagIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIew != nil {
		t := *r.assetTagIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__iew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIre != nil {
		t := *r.assetTagIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__ire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagIsw != nil {
		t := *r.assetTagIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__isw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagN != nil {
		t := *r.assetTagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__n", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNic != nil {
		t := *r.assetTagNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nic", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNie != nil {
		t := *r.assetTagNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nie", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNiew != nil {
		t := *r.assetTagNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__niew", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNire != nil {
		t := *r.assetTagNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nire", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNisw != nil {
		t := *r.assetTagNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nisw", parameterToString(t, "multi"))
		}
	}
	if r.assetTagNre != nil {
		t := *r.assetTagNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__nre", parameterToString(t, "multi"))
		}
	}
	if r.assetTagRe != nil {
		t := *r.assetTagRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asset_tag__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asset_tag__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.descUnits != nil {
		localVarQueryParams.Add("desc_units", parameterToString(*r.descUnits, ""))
	}
	if r.facilityId != nil {
		t := *r.facilityId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIc != nil {
		t := *r.facilityIdIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__ic", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIe != nil {
		t := *r.facilityIdIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__ie", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIew != nil {
		t := *r.facilityIdIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__iew", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIre != nil {
		t := *r.facilityIdIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__ire", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdIsw != nil {
		t := *r.facilityIdIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__isw", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdN != nil {
		t := *r.facilityIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__n", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNic != nil {
		t := *r.facilityIdNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nic", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNie != nil {
		t := *r.facilityIdNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nie", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNiew != nil {
		t := *r.facilityIdNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__niew", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNire != nil {
		t := *r.facilityIdNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nire", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNisw != nil {
		t := *r.facilityIdNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdNre != nil {
		t := *r.facilityIdNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__nre", parameterToString(t, "multi"))
		}
	}
	if r.facilityIdRe != nil {
		t := *r.facilityIdRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility_id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility_id__re", parameterToString(t, "multi"))
		}
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group", parameterToString(t, "multi"))
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group__n", parameterToString(t, "multi"))
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id", parameterToString(t, "multi"))
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.outerDepth != nil {
		t := *r.outerDepth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthGt != nil {
		t := *r.outerDepthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__gt", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthGte != nil {
		t := *r.outerDepthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__gte", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthLt != nil {
		t := *r.outerDepthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__lt", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthLte != nil {
		t := *r.outerDepthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__lte", parameterToString(t, "multi"))
		}
	}
	if r.outerDepthN != nil {
		t := *r.outerDepthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_depth__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_depth__n", parameterToString(t, "multi"))
		}
	}
	if r.outerUnit != nil {
		localVarQueryParams.Add("outer_unit", parameterToString(*r.outerUnit, ""))
	}
	if r.outerUnitN != nil {
		localVarQueryParams.Add("outer_unit__n", parameterToString(*r.outerUnitN, ""))
	}
	if r.outerWidth != nil {
		t := *r.outerWidth
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthGt != nil {
		t := *r.outerWidthGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__gt", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthGte != nil {
		t := *r.outerWidthGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__gte", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthLt != nil {
		t := *r.outerWidthLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__lt", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthLte != nil {
		t := *r.outerWidthLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__lte", parameterToString(t, "multi"))
		}
	}
	if r.outerWidthN != nil {
		t := *r.outerWidthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("outer_width__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("outer_width__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role", parameterToString(t, "multi"))
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role__n", parameterToString(t, "multi"))
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id", parameterToString(t, "multi"))
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id__n", parameterToString(t, "multi"))
		}
	}
	if r.serial != nil {
		localVarQueryParams.Add("serial", parameterToString(*r.serial, ""))
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	if r.uHeight != nil {
		t := *r.uHeight
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height", parameterToString(t, "multi"))
		}
	}
	if r.uHeightGt != nil {
		t := *r.uHeightGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__gt", parameterToString(t, "multi"))
		}
	}
	if r.uHeightGte != nil {
		t := *r.uHeightGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__gte", parameterToString(t, "multi"))
		}
	}
	if r.uHeightLt != nil {
		t := *r.uHeightLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__lt", parameterToString(t, "multi"))
		}
	}
	if r.uHeightLte != nil {
		t := *r.uHeightLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__lte", parameterToString(t, "multi"))
		}
	}
	if r.uHeightN != nil {
		t := *r.uHeightN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("u_height__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("u_height__n", parameterToString(t, "multi"))
		}
	}
	if r.width != nil {
		t := *r.width
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("width", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("width", parameterToString(t, "multi"))
		}
	}
	if r.widthN != nil {
		t := *r.widthN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("width__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("width__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableRack *PatchedWritableRack
}

func (r ApiDcimRacksPartialUpdateRequest) PatchedWritableRack(patchedWritableRack PatchedWritableRack) ApiDcimRacksPartialUpdateRequest {
	r.patchedWritableRack = &patchedWritableRack
	return r
}

func (r ApiDcimRacksPartialUpdateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksPartialUpdateExecute(r)
}

/*
DcimRacksPartialUpdate Method for DcimRacksPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack.
 @return ApiDcimRacksPartialUpdateRequest
*/
func (a *DcimApiService) DcimRacksPartialUpdate(ctx context.Context, id string) ApiDcimRacksPartialUpdateRequest {
	return ApiDcimRacksPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Rack
func (a *DcimApiService) DcimRacksPartialUpdateExecute(r ApiDcimRacksPartialUpdateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRack
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRacksRetrieveRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksRetrieveExecute(r)
}

/*
DcimRacksRetrieve Method for DcimRacksRetrieve

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack.
 @return ApiDcimRacksRetrieveRequest
*/
func (a *DcimApiService) DcimRacksRetrieve(ctx context.Context, id string) ApiDcimRacksRetrieveRequest {
	return ApiDcimRacksRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Rack
func (a *DcimApiService) DcimRacksRetrieveExecute(r ApiDcimRacksRetrieveRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRacksUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableRack *WritableRack
}

func (r ApiDcimRacksUpdateRequest) WritableRack(writableRack WritableRack) ApiDcimRacksUpdateRequest {
	r.writableRack = &writableRack
	return r
}

func (r ApiDcimRacksUpdateRequest) Execute() (*Rack, *http.Response, error) {
	return r.ApiService.DcimRacksUpdateExecute(r)
}

/*
DcimRacksUpdate Method for DcimRacksUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rack.
 @return ApiDcimRacksUpdateRequest
*/
func (a *DcimApiService) DcimRacksUpdate(ctx context.Context, id string) ApiDcimRacksUpdateRequest {
	return ApiDcimRacksUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Rack
func (a *DcimApiService) DcimRacksUpdateExecute(r ApiDcimRacksUpdateRequest) (*Rack, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Rack
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRacksUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/racks/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRack == nil {
		return localVarReturnValue, nil, reportError("writableRack is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRack
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRearPortTemplatesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesBulkDestroyExecute(r)
}

/*
DcimRearPortTemplatesBulkDestroy Method for DcimRearPortTemplatesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortTemplatesBulkDestroyRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesBulkDestroy(ctx context.Context) ApiDcimRearPortTemplatesBulkDestroyRequest {
	return ApiDcimRearPortTemplatesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRearPortTemplatesBulkDestroyExecute(r ApiDcimRearPortTemplatesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableRearPortTemplate *PatchedWritableRearPortTemplate
}

func (r ApiDcimRearPortTemplatesBulkPartialUpdateRequest) PatchedWritableRearPortTemplate(patchedWritableRearPortTemplate PatchedWritableRearPortTemplate) ApiDcimRearPortTemplatesBulkPartialUpdateRequest {
	r.patchedWritableRearPortTemplate = &patchedWritableRearPortTemplate
	return r
}

func (r ApiDcimRearPortTemplatesBulkPartialUpdateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesBulkPartialUpdateExecute(r)
}

/*
DcimRearPortTemplatesBulkPartialUpdate Method for DcimRearPortTemplatesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortTemplatesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesBulkPartialUpdate(ctx context.Context) ApiDcimRearPortTemplatesBulkPartialUpdateRequest {
	return ApiDcimRearPortTemplatesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RearPortTemplate
func (a *DcimApiService) DcimRearPortTemplatesBulkPartialUpdateExecute(r ApiDcimRearPortTemplatesBulkPartialUpdateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRearPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRearPortTemplate *WritableRearPortTemplate
}

func (r ApiDcimRearPortTemplatesBulkUpdateRequest) WritableRearPortTemplate(writableRearPortTemplate WritableRearPortTemplate) ApiDcimRearPortTemplatesBulkUpdateRequest {
	r.writableRearPortTemplate = &writableRearPortTemplate
	return r
}

func (r ApiDcimRearPortTemplatesBulkUpdateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesBulkUpdateExecute(r)
}

/*
DcimRearPortTemplatesBulkUpdate Method for DcimRearPortTemplatesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortTemplatesBulkUpdateRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesBulkUpdate(ctx context.Context) ApiDcimRearPortTemplatesBulkUpdateRequest {
	return ApiDcimRearPortTemplatesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RearPortTemplate
func (a *DcimApiService) DcimRearPortTemplatesBulkUpdateExecute(r ApiDcimRearPortTemplatesBulkUpdateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableRearPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRearPortTemplate *WritableRearPortTemplate
}

func (r ApiDcimRearPortTemplatesCreateRequest) WritableRearPortTemplate(writableRearPortTemplate WritableRearPortTemplate) ApiDcimRearPortTemplatesCreateRequest {
	r.writableRearPortTemplate = &writableRearPortTemplate
	return r
}

func (r ApiDcimRearPortTemplatesCreateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesCreateExecute(r)
}

/*
DcimRearPortTemplatesCreate Method for DcimRearPortTemplatesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortTemplatesCreateRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesCreate(ctx context.Context) ApiDcimRearPortTemplatesCreateRequest {
	return ApiDcimRearPortTemplatesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RearPortTemplate
func (a *DcimApiService) DcimRearPortTemplatesCreateExecute(r ApiDcimRearPortTemplatesCreateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableRearPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRearPortTemplatesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesDestroyExecute(r)
}

/*
DcimRearPortTemplatesDestroy Method for DcimRearPortTemplatesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port template.
 @return ApiDcimRearPortTemplatesDestroyRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesDestroy(ctx context.Context, id string) ApiDcimRearPortTemplatesDestroyRequest {
	return ApiDcimRearPortTemplatesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRearPortTemplatesDestroyExecute(r ApiDcimRearPortTemplatesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	devicetypeId *[]string
	devicetypeIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	positions *[]int32
	positionsGt *[]int32
	positionsGte *[]int32
	positionsLt *[]int32
	positionsLte *[]int32
	positionsN *[]int32
	q *string
	type_ *string
	typeN *string
}

// Device type (ID)
func (r ApiDcimRearPortTemplatesListRequest) DevicetypeId(devicetypeId []string) ApiDcimRearPortTemplatesListRequest {
	r.devicetypeId = &devicetypeId
	return r
}

// Device type (ID)
func (r ApiDcimRearPortTemplatesListRequest) DevicetypeIdN(devicetypeIdN []string) ApiDcimRearPortTemplatesListRequest {
	r.devicetypeIdN = &devicetypeIdN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Id(id []string) ApiDcimRearPortTemplatesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdIc(idIc []string) ApiDcimRearPortTemplatesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdIe(idIe []string) ApiDcimRearPortTemplatesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdIew(idIew []string) ApiDcimRearPortTemplatesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdIre(idIre []string) ApiDcimRearPortTemplatesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdIsw(idIsw []string) ApiDcimRearPortTemplatesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdN(idN []string) ApiDcimRearPortTemplatesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdNic(idNic []string) ApiDcimRearPortTemplatesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdNie(idNie []string) ApiDcimRearPortTemplatesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdNiew(idNiew []string) ApiDcimRearPortTemplatesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdNire(idNire []string) ApiDcimRearPortTemplatesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdNisw(idNisw []string) ApiDcimRearPortTemplatesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdNre(idNre []string) ApiDcimRearPortTemplatesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) IdRe(idRe []string) ApiDcimRearPortTemplatesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimRearPortTemplatesListRequest) Limit(limit int32) ApiDcimRearPortTemplatesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Name(name []string) ApiDcimRearPortTemplatesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIc(nameIc []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIe(nameIe []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIew(nameIew []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIre(nameIre []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameIsw(nameIsw []string) ApiDcimRearPortTemplatesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameN(nameN []string) ApiDcimRearPortTemplatesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNic(nameNic []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNie(nameNie []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNiew(nameNiew []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNire(nameNire []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNisw(nameNisw []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameNre(nameNre []string) ApiDcimRearPortTemplatesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) NameRe(nameRe []string) ApiDcimRearPortTemplatesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRearPortTemplatesListRequest) Offset(offset int32) ApiDcimRearPortTemplatesListRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Positions(positions []int32) ApiDcimRearPortTemplatesListRequest {
	r.positions = &positions
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsGt(positionsGt []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsGt = &positionsGt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsGte(positionsGte []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsGte = &positionsGte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsLt(positionsLt []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsLt = &positionsLt
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsLte(positionsLte []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsLte = &positionsLte
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) PositionsN(positionsN []int32) ApiDcimRearPortTemplatesListRequest {
	r.positionsN = &positionsN
	return r
}

// Search
func (r ApiDcimRearPortTemplatesListRequest) Q(q string) ApiDcimRearPortTemplatesListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Type_(type_ string) ApiDcimRearPortTemplatesListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) TypeN(typeN string) ApiDcimRearPortTemplatesListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRearPortTemplatesListRequest) Execute() (*PaginatedRearPortTemplateList, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesListExecute(r)
}

/*
DcimRearPortTemplatesList Method for DcimRearPortTemplatesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortTemplatesListRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesList(ctx context.Context) ApiDcimRearPortTemplatesListRequest {
	return ApiDcimRearPortTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRearPortTemplateList
func (a *DcimApiService) DcimRearPortTemplatesListExecute(r ApiDcimRearPortTemplatesListRequest) (*PaginatedRearPortTemplateList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRearPortTemplateList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.devicetypeId != nil {
		t := *r.devicetypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id", parameterToString(t, "multi"))
		}
	}
	if r.devicetypeIdN != nil {
		t := *r.devicetypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("devicetype_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("devicetype_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.positions != nil {
		t := *r.positions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions", parameterToString(t, "multi"))
		}
	}
	if r.positionsGt != nil {
		t := *r.positionsGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__gt", parameterToString(t, "multi"))
		}
	}
	if r.positionsGte != nil {
		t := *r.positionsGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__gte", parameterToString(t, "multi"))
		}
	}
	if r.positionsLt != nil {
		t := *r.positionsLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__lt", parameterToString(t, "multi"))
		}
	}
	if r.positionsLte != nil {
		t := *r.positionsLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__lte", parameterToString(t, "multi"))
		}
	}
	if r.positionsN != nil {
		t := *r.positionsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableRearPortTemplate *PatchedWritableRearPortTemplate
}

func (r ApiDcimRearPortTemplatesPartialUpdateRequest) PatchedWritableRearPortTemplate(patchedWritableRearPortTemplate PatchedWritableRearPortTemplate) ApiDcimRearPortTemplatesPartialUpdateRequest {
	r.patchedWritableRearPortTemplate = &patchedWritableRearPortTemplate
	return r
}

func (r ApiDcimRearPortTemplatesPartialUpdateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesPartialUpdateExecute(r)
}

/*
DcimRearPortTemplatesPartialUpdate Method for DcimRearPortTemplatesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port template.
 @return ApiDcimRearPortTemplatesPartialUpdateRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesPartialUpdate(ctx context.Context, id string) ApiDcimRearPortTemplatesPartialUpdateRequest {
	return ApiDcimRearPortTemplatesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPortTemplate
func (a *DcimApiService) DcimRearPortTemplatesPartialUpdateExecute(r ApiDcimRearPortTemplatesPartialUpdateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRearPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRearPortTemplatesRetrieveRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesRetrieveExecute(r)
}

/*
DcimRearPortTemplatesRetrieve Method for DcimRearPortTemplatesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port template.
 @return ApiDcimRearPortTemplatesRetrieveRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesRetrieve(ctx context.Context, id string) ApiDcimRearPortTemplatesRetrieveRequest {
	return ApiDcimRearPortTemplatesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPortTemplate
func (a *DcimApiService) DcimRearPortTemplatesRetrieveExecute(r ApiDcimRearPortTemplatesRetrieveRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortTemplatesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableRearPortTemplate *WritableRearPortTemplate
}

func (r ApiDcimRearPortTemplatesUpdateRequest) WritableRearPortTemplate(writableRearPortTemplate WritableRearPortTemplate) ApiDcimRearPortTemplatesUpdateRequest {
	r.writableRearPortTemplate = &writableRearPortTemplate
	return r
}

func (r ApiDcimRearPortTemplatesUpdateRequest) Execute() (*RearPortTemplate, *http.Response, error) {
	return r.ApiService.DcimRearPortTemplatesUpdateExecute(r)
}

/*
DcimRearPortTemplatesUpdate Method for DcimRearPortTemplatesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port template.
 @return ApiDcimRearPortTemplatesUpdateRequest
*/
func (a *DcimApiService) DcimRearPortTemplatesUpdate(ctx context.Context, id string) ApiDcimRearPortTemplatesUpdateRequest {
	return ApiDcimRearPortTemplatesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPortTemplate
func (a *DcimApiService) DcimRearPortTemplatesUpdateExecute(r ApiDcimRearPortTemplatesUpdateRequest) (*RearPortTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPortTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortTemplatesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-port-templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPortTemplate == nil {
		return localVarReturnValue, nil, reportError("writableRearPortTemplate is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPortTemplate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRearPortsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortsBulkDestroyExecute(r)
}

/*
DcimRearPortsBulkDestroy Method for DcimRearPortsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortsBulkDestroyRequest
*/
func (a *DcimApiService) DcimRearPortsBulkDestroy(ctx context.Context) ApiDcimRearPortsBulkDestroyRequest {
	return ApiDcimRearPortsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRearPortsBulkDestroyExecute(r ApiDcimRearPortsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableRearPort *PatchedWritableRearPort
}

func (r ApiDcimRearPortsBulkPartialUpdateRequest) PatchedWritableRearPort(patchedWritableRearPort PatchedWritableRearPort) ApiDcimRearPortsBulkPartialUpdateRequest {
	r.patchedWritableRearPort = &patchedWritableRearPort
	return r
}

func (r ApiDcimRearPortsBulkPartialUpdateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsBulkPartialUpdateExecute(r)
}

/*
DcimRearPortsBulkPartialUpdate Method for DcimRearPortsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRearPortsBulkPartialUpdate(ctx context.Context) ApiDcimRearPortsBulkPartialUpdateRequest {
	return ApiDcimRearPortsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsBulkPartialUpdateExecute(r ApiDcimRearPortsBulkPartialUpdateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRearPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRearPort *WritableRearPort
}

func (r ApiDcimRearPortsBulkUpdateRequest) WritableRearPort(writableRearPort WritableRearPort) ApiDcimRearPortsBulkUpdateRequest {
	r.writableRearPort = &writableRearPort
	return r
}

func (r ApiDcimRearPortsBulkUpdateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsBulkUpdateExecute(r)
}

/*
DcimRearPortsBulkUpdate Method for DcimRearPortsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortsBulkUpdateRequest
*/
func (a *DcimApiService) DcimRearPortsBulkUpdate(ctx context.Context) ApiDcimRearPortsBulkUpdateRequest {
	return ApiDcimRearPortsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsBulkUpdateExecute(r ApiDcimRearPortsBulkUpdateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPort == nil {
		return localVarReturnValue, nil, reportError("writableRearPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRearPort *WritableRearPort
}

func (r ApiDcimRearPortsCreateRequest) WritableRearPort(writableRearPort WritableRearPort) ApiDcimRearPortsCreateRequest {
	r.writableRearPort = &writableRearPort
	return r
}

func (r ApiDcimRearPortsCreateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsCreateExecute(r)
}

/*
DcimRearPortsCreate Method for DcimRearPortsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortsCreateRequest
*/
func (a *DcimApiService) DcimRearPortsCreate(ctx context.Context) ApiDcimRearPortsCreateRequest {
	return ApiDcimRearPortsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsCreateExecute(r ApiDcimRearPortsCreateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPort == nil {
		return localVarReturnValue, nil, reportError("writableRearPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRearPortsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRearPortsDestroyExecute(r)
}

/*
DcimRearPortsDestroy Method for DcimRearPortsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port.
 @return ApiDcimRearPortsDestroyRequest
*/
func (a *DcimApiService) DcimRearPortsDestroy(ctx context.Context, id string) ApiDcimRearPortsDestroyRequest {
	return ApiDcimRearPortsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRearPortsDestroyExecute(r ApiDcimRearPortsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRearPortsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	cabled *bool
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	device *[]*string
	deviceN *[]*string
	deviceId *[]string
	deviceIdN *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	positions *[]int32
	positionsGt *[]int32
	positionsGte *[]int32
	positionsLt *[]int32
	positionsLte *[]int32
	positionsN *[]int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	type_ *string
	typeN *string
}

func (r ApiDcimRearPortsListRequest) Cabled(cabled bool) ApiDcimRearPortsListRequest {
	r.cabled = &cabled
	return r
}

func (r ApiDcimRearPortsListRequest) Description(description []string) ApiDcimRearPortsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIc(descriptionIc []string) ApiDcimRearPortsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIe(descriptionIe []string) ApiDcimRearPortsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIew(descriptionIew []string) ApiDcimRearPortsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIre(descriptionIre []string) ApiDcimRearPortsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRearPortsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionN(descriptionN []string) ApiDcimRearPortsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNic(descriptionNic []string) ApiDcimRearPortsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNie(descriptionNie []string) ApiDcimRearPortsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRearPortsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNire(descriptionNire []string) ApiDcimRearPortsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRearPortsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionNre(descriptionNre []string) ApiDcimRearPortsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimRearPortsListRequest) DescriptionRe(descriptionRe []string) ApiDcimRearPortsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

// Device (name)
func (r ApiDcimRearPortsListRequest) Device(device []*string) ApiDcimRearPortsListRequest {
	r.device = &device
	return r
}

// Device (name)
func (r ApiDcimRearPortsListRequest) DeviceN(deviceN []*string) ApiDcimRearPortsListRequest {
	r.deviceN = &deviceN
	return r
}

// Device (ID)
func (r ApiDcimRearPortsListRequest) DeviceId(deviceId []string) ApiDcimRearPortsListRequest {
	r.deviceId = &deviceId
	return r
}

// Device (ID)
func (r ApiDcimRearPortsListRequest) DeviceIdN(deviceIdN []string) ApiDcimRearPortsListRequest {
	r.deviceIdN = &deviceIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Id(id []string) ApiDcimRearPortsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRearPortsListRequest) IdIc(idIc []string) ApiDcimRearPortsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRearPortsListRequest) IdIe(idIe []string) ApiDcimRearPortsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRearPortsListRequest) IdIew(idIew []string) ApiDcimRearPortsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRearPortsListRequest) IdIre(idIre []string) ApiDcimRearPortsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRearPortsListRequest) IdIsw(idIsw []string) ApiDcimRearPortsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRearPortsListRequest) IdN(idN []string) ApiDcimRearPortsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRearPortsListRequest) IdNic(idNic []string) ApiDcimRearPortsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRearPortsListRequest) IdNie(idNie []string) ApiDcimRearPortsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRearPortsListRequest) IdNiew(idNiew []string) ApiDcimRearPortsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRearPortsListRequest) IdNire(idNire []string) ApiDcimRearPortsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRearPortsListRequest) IdNisw(idNisw []string) ApiDcimRearPortsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRearPortsListRequest) IdNre(idNre []string) ApiDcimRearPortsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRearPortsListRequest) IdRe(idRe []string) ApiDcimRearPortsListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiDcimRearPortsListRequest) Limit(limit int32) ApiDcimRearPortsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRearPortsListRequest) Name(name []string) ApiDcimRearPortsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRearPortsListRequest) NameIc(nameIc []string) ApiDcimRearPortsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRearPortsListRequest) NameIe(nameIe []string) ApiDcimRearPortsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRearPortsListRequest) NameIew(nameIew []string) ApiDcimRearPortsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRearPortsListRequest) NameIre(nameIre []string) ApiDcimRearPortsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRearPortsListRequest) NameIsw(nameIsw []string) ApiDcimRearPortsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRearPortsListRequest) NameN(nameN []string) ApiDcimRearPortsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRearPortsListRequest) NameNic(nameNic []string) ApiDcimRearPortsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRearPortsListRequest) NameNie(nameNie []string) ApiDcimRearPortsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRearPortsListRequest) NameNiew(nameNiew []string) ApiDcimRearPortsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRearPortsListRequest) NameNire(nameNire []string) ApiDcimRearPortsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRearPortsListRequest) NameNisw(nameNisw []string) ApiDcimRearPortsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRearPortsListRequest) NameNre(nameNre []string) ApiDcimRearPortsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRearPortsListRequest) NameRe(nameRe []string) ApiDcimRearPortsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRearPortsListRequest) Offset(offset int32) ApiDcimRearPortsListRequest {
	r.offset = &offset
	return r
}

func (r ApiDcimRearPortsListRequest) Positions(positions []int32) ApiDcimRearPortsListRequest {
	r.positions = &positions
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsGt(positionsGt []int32) ApiDcimRearPortsListRequest {
	r.positionsGt = &positionsGt
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsGte(positionsGte []int32) ApiDcimRearPortsListRequest {
	r.positionsGte = &positionsGte
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsLt(positionsLt []int32) ApiDcimRearPortsListRequest {
	r.positionsLt = &positionsLt
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsLte(positionsLte []int32) ApiDcimRearPortsListRequest {
	r.positionsLte = &positionsLte
	return r
}

func (r ApiDcimRearPortsListRequest) PositionsN(positionsN []int32) ApiDcimRearPortsListRequest {
	r.positionsN = &positionsN
	return r
}

// Search
func (r ApiDcimRearPortsListRequest) Q(q string) ApiDcimRearPortsListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimRearPortsListRequest) Region(region []string) ApiDcimRearPortsListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimRearPortsListRequest) RegionN(regionN []string) ApiDcimRearPortsListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimRearPortsListRequest) RegionId(regionId []string) ApiDcimRearPortsListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimRearPortsListRequest) RegionIdN(regionIdN []string) ApiDcimRearPortsListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimRearPortsListRequest) Site(site []string) ApiDcimRearPortsListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimRearPortsListRequest) SiteN(siteN []string) ApiDcimRearPortsListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimRearPortsListRequest) SiteId(siteId []string) ApiDcimRearPortsListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimRearPortsListRequest) SiteIdN(siteIdN []string) ApiDcimRearPortsListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimRearPortsListRequest) Tag(tag []string) ApiDcimRearPortsListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimRearPortsListRequest) TagN(tagN []string) ApiDcimRearPortsListRequest {
	r.tagN = &tagN
	return r
}

func (r ApiDcimRearPortsListRequest) Type_(type_ string) ApiDcimRearPortsListRequest {
	r.type_ = &type_
	return r
}

func (r ApiDcimRearPortsListRequest) TypeN(typeN string) ApiDcimRearPortsListRequest {
	r.typeN = &typeN
	return r
}

func (r ApiDcimRearPortsListRequest) Execute() (*PaginatedRearPortList, *http.Response, error) {
	return r.ApiService.DcimRearPortsListExecute(r)
}

/*
DcimRearPortsList Method for DcimRearPortsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRearPortsListRequest
*/
func (a *DcimApiService) DcimRearPortsList(ctx context.Context) ApiDcimRearPortsListRequest {
	return ApiDcimRearPortsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRearPortList
func (a *DcimApiService) DcimRearPortsListExecute(r ApiDcimRearPortsListRequest) (*PaginatedRearPortList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRearPortList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cabled != nil {
		localVarQueryParams.Add("cabled", parameterToString(*r.cabled, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.device != nil {
		t := *r.device
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device", parameterToString(t, "multi"))
		}
	}
	if r.deviceN != nil {
		t := *r.deviceN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device__n", parameterToString(t, "multi"))
		}
	}
	if r.deviceId != nil {
		t := *r.deviceId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id", parameterToString(t, "multi"))
		}
	}
	if r.deviceIdN != nil {
		t := *r.deviceIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("device_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("device_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.positions != nil {
		t := *r.positions
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions", parameterToString(t, "multi"))
		}
	}
	if r.positionsGt != nil {
		t := *r.positionsGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__gt", parameterToString(t, "multi"))
		}
	}
	if r.positionsGte != nil {
		t := *r.positionsGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__gte", parameterToString(t, "multi"))
		}
	}
	if r.positionsLt != nil {
		t := *r.positionsLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__lt", parameterToString(t, "multi"))
		}
	}
	if r.positionsLte != nil {
		t := *r.positionsLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__lte", parameterToString(t, "multi"))
		}
	}
	if r.positionsN != nil {
		t := *r.positionsN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("positions__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("positions__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	}
	if r.typeN != nil {
		localVarQueryParams.Add("type__n", parameterToString(*r.typeN, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableRearPort *PatchedWritableRearPort
}

func (r ApiDcimRearPortsPartialUpdateRequest) PatchedWritableRearPort(patchedWritableRearPort PatchedWritableRearPort) ApiDcimRearPortsPartialUpdateRequest {
	r.patchedWritableRearPort = &patchedWritableRearPort
	return r
}

func (r ApiDcimRearPortsPartialUpdateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsPartialUpdateExecute(r)
}

/*
DcimRearPortsPartialUpdate Method for DcimRearPortsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port.
 @return ApiDcimRearPortsPartialUpdateRequest
*/
func (a *DcimApiService) DcimRearPortsPartialUpdate(ctx context.Context, id string) ApiDcimRearPortsPartialUpdateRequest {
	return ApiDcimRearPortsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsPartialUpdateExecute(r ApiDcimRearPortsPartialUpdateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRearPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsPathsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRearPortsPathsRetrieveRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsPathsRetrieveExecute(r)
}

/*
DcimRearPortsPathsRetrieve Method for DcimRearPortsPathsRetrieve

Return all CablePaths which traverse a given pass-through port.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port.
 @return ApiDcimRearPortsPathsRetrieveRequest
*/
func (a *DcimApiService) DcimRearPortsPathsRetrieve(ctx context.Context, id string) ApiDcimRearPortsPathsRetrieveRequest {
	return ApiDcimRearPortsPathsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsPathsRetrieveExecute(r ApiDcimRearPortsPathsRetrieveRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsPathsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/{id}/paths/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRearPortsRetrieveRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsRetrieveExecute(r)
}

/*
DcimRearPortsRetrieve Method for DcimRearPortsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port.
 @return ApiDcimRearPortsRetrieveRequest
*/
func (a *DcimApiService) DcimRearPortsRetrieve(ctx context.Context, id string) ApiDcimRearPortsRetrieveRequest {
	return ApiDcimRearPortsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsRetrieveExecute(r ApiDcimRearPortsRetrieveRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRearPortsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableRearPort *WritableRearPort
}

func (r ApiDcimRearPortsUpdateRequest) WritableRearPort(writableRearPort WritableRearPort) ApiDcimRearPortsUpdateRequest {
	r.writableRearPort = &writableRearPort
	return r
}

func (r ApiDcimRearPortsUpdateRequest) Execute() (*RearPort, *http.Response, error) {
	return r.ApiService.DcimRearPortsUpdateExecute(r)
}

/*
DcimRearPortsUpdate Method for DcimRearPortsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this rear port.
 @return ApiDcimRearPortsUpdateRequest
*/
func (a *DcimApiService) DcimRearPortsUpdate(ctx context.Context, id string) ApiDcimRearPortsUpdateRequest {
	return ApiDcimRearPortsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return RearPort
func (a *DcimApiService) DcimRearPortsUpdateExecute(r ApiDcimRearPortsUpdateRequest) (*RearPort, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RearPort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRearPortsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/rear-ports/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRearPort == nil {
		return localVarReturnValue, nil, reportError("writableRearPort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRearPort
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimRegionsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRegionsBulkDestroyExecute(r)
}

/*
DcimRegionsBulkDestroy Method for DcimRegionsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRegionsBulkDestroyRequest
*/
func (a *DcimApiService) DcimRegionsBulkDestroy(ctx context.Context) ApiDcimRegionsBulkDestroyRequest {
	return ApiDcimRegionsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRegionsBulkDestroyExecute(r ApiDcimRegionsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRegionsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableRegion *PatchedWritableRegion
}

func (r ApiDcimRegionsBulkPartialUpdateRequest) PatchedWritableRegion(patchedWritableRegion PatchedWritableRegion) ApiDcimRegionsBulkPartialUpdateRequest {
	r.patchedWritableRegion = &patchedWritableRegion
	return r
}

func (r ApiDcimRegionsBulkPartialUpdateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsBulkPartialUpdateExecute(r)
}

/*
DcimRegionsBulkPartialUpdate Method for DcimRegionsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRegionsBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimRegionsBulkPartialUpdate(ctx context.Context) ApiDcimRegionsBulkPartialUpdateRequest {
	return ApiDcimRegionsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Region
func (a *DcimApiService) DcimRegionsBulkPartialUpdateExecute(r ApiDcimRegionsBulkPartialUpdateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRegion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRegion *WritableRegion
}

func (r ApiDcimRegionsBulkUpdateRequest) WritableRegion(writableRegion WritableRegion) ApiDcimRegionsBulkUpdateRequest {
	r.writableRegion = &writableRegion
	return r
}

func (r ApiDcimRegionsBulkUpdateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsBulkUpdateExecute(r)
}

/*
DcimRegionsBulkUpdate Method for DcimRegionsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRegionsBulkUpdateRequest
*/
func (a *DcimApiService) DcimRegionsBulkUpdate(ctx context.Context) ApiDcimRegionsBulkUpdateRequest {
	return ApiDcimRegionsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Region
func (a *DcimApiService) DcimRegionsBulkUpdateExecute(r ApiDcimRegionsBulkUpdateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRegion == nil {
		return localVarReturnValue, nil, reportError("writableRegion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRegion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableRegion *WritableRegion
}

func (r ApiDcimRegionsCreateRequest) WritableRegion(writableRegion WritableRegion) ApiDcimRegionsCreateRequest {
	r.writableRegion = &writableRegion
	return r
}

func (r ApiDcimRegionsCreateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsCreateExecute(r)
}

/*
DcimRegionsCreate Method for DcimRegionsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRegionsCreateRequest
*/
func (a *DcimApiService) DcimRegionsCreate(ctx context.Context) ApiDcimRegionsCreateRequest {
	return ApiDcimRegionsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Region
func (a *DcimApiService) DcimRegionsCreateExecute(r ApiDcimRegionsCreateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRegion == nil {
		return localVarReturnValue, nil, reportError("writableRegion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRegion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRegionsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimRegionsDestroyExecute(r)
}

/*
DcimRegionsDestroy Method for DcimRegionsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this region.
 @return ApiDcimRegionsDestroyRequest
*/
func (a *DcimApiService) DcimRegionsDestroy(ctx context.Context, id string) ApiDcimRegionsDestroyRequest {
	return ApiDcimRegionsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimRegionsDestroyExecute(r ApiDcimRegionsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimRegionsListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	parent *[]string
	parentN *[]string
	parentId *[]*string
	parentIdN *[]*string
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiDcimRegionsListRequest) Created(created string) ApiDcimRegionsListRequest {
	r.created = &created
	return r
}

func (r ApiDcimRegionsListRequest) CreatedGte(createdGte string) ApiDcimRegionsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimRegionsListRequest) CreatedLte(createdLte string) ApiDcimRegionsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimRegionsListRequest) Description(description []string) ApiDcimRegionsListRequest {
	r.description = &description
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIc(descriptionIc []string) ApiDcimRegionsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIe(descriptionIe []string) ApiDcimRegionsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIew(descriptionIew []string) ApiDcimRegionsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIre(descriptionIre []string) ApiDcimRegionsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionIsw(descriptionIsw []string) ApiDcimRegionsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionN(descriptionN []string) ApiDcimRegionsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNic(descriptionNic []string) ApiDcimRegionsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNie(descriptionNie []string) ApiDcimRegionsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNiew(descriptionNiew []string) ApiDcimRegionsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNire(descriptionNire []string) ApiDcimRegionsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNisw(descriptionNisw []string) ApiDcimRegionsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionNre(descriptionNre []string) ApiDcimRegionsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiDcimRegionsListRequest) DescriptionRe(descriptionRe []string) ApiDcimRegionsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiDcimRegionsListRequest) Id(id []string) ApiDcimRegionsListRequest {
	r.id = &id
	return r
}

func (r ApiDcimRegionsListRequest) IdIc(idIc []string) ApiDcimRegionsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimRegionsListRequest) IdIe(idIe []string) ApiDcimRegionsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimRegionsListRequest) IdIew(idIew []string) ApiDcimRegionsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimRegionsListRequest) IdIre(idIre []string) ApiDcimRegionsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimRegionsListRequest) IdIsw(idIsw []string) ApiDcimRegionsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimRegionsListRequest) IdN(idN []string) ApiDcimRegionsListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimRegionsListRequest) IdNic(idNic []string) ApiDcimRegionsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimRegionsListRequest) IdNie(idNie []string) ApiDcimRegionsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimRegionsListRequest) IdNiew(idNiew []string) ApiDcimRegionsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimRegionsListRequest) IdNire(idNire []string) ApiDcimRegionsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimRegionsListRequest) IdNisw(idNisw []string) ApiDcimRegionsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimRegionsListRequest) IdNre(idNre []string) ApiDcimRegionsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimRegionsListRequest) IdRe(idRe []string) ApiDcimRegionsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdated(lastUpdated time.Time) ApiDcimRegionsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimRegionsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimRegionsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimRegionsListRequest) Limit(limit int32) ApiDcimRegionsListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimRegionsListRequest) Name(name []string) ApiDcimRegionsListRequest {
	r.name = &name
	return r
}

func (r ApiDcimRegionsListRequest) NameIc(nameIc []string) ApiDcimRegionsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimRegionsListRequest) NameIe(nameIe []string) ApiDcimRegionsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimRegionsListRequest) NameIew(nameIew []string) ApiDcimRegionsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimRegionsListRequest) NameIre(nameIre []string) ApiDcimRegionsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimRegionsListRequest) NameIsw(nameIsw []string) ApiDcimRegionsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimRegionsListRequest) NameN(nameN []string) ApiDcimRegionsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimRegionsListRequest) NameNic(nameNic []string) ApiDcimRegionsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimRegionsListRequest) NameNie(nameNie []string) ApiDcimRegionsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimRegionsListRequest) NameNiew(nameNiew []string) ApiDcimRegionsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimRegionsListRequest) NameNire(nameNire []string) ApiDcimRegionsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimRegionsListRequest) NameNisw(nameNisw []string) ApiDcimRegionsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimRegionsListRequest) NameNre(nameNre []string) ApiDcimRegionsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimRegionsListRequest) NameRe(nameRe []string) ApiDcimRegionsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimRegionsListRequest) Offset(offset int32) ApiDcimRegionsListRequest {
	r.offset = &offset
	return r
}

// Parent region (slug)
func (r ApiDcimRegionsListRequest) Parent(parent []string) ApiDcimRegionsListRequest {
	r.parent = &parent
	return r
}

// Parent region (slug)
func (r ApiDcimRegionsListRequest) ParentN(parentN []string) ApiDcimRegionsListRequest {
	r.parentN = &parentN
	return r
}

// Parent region (ID)
func (r ApiDcimRegionsListRequest) ParentId(parentId []*string) ApiDcimRegionsListRequest {
	r.parentId = &parentId
	return r
}

// Parent region (ID)
func (r ApiDcimRegionsListRequest) ParentIdN(parentIdN []*string) ApiDcimRegionsListRequest {
	r.parentIdN = &parentIdN
	return r
}

// Search
func (r ApiDcimRegionsListRequest) Q(q string) ApiDcimRegionsListRequest {
	r.q = &q
	return r
}

func (r ApiDcimRegionsListRequest) Slug(slug []string) ApiDcimRegionsListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimRegionsListRequest) SlugIc(slugIc []string) ApiDcimRegionsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimRegionsListRequest) SlugIe(slugIe []string) ApiDcimRegionsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimRegionsListRequest) SlugIew(slugIew []string) ApiDcimRegionsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimRegionsListRequest) SlugIre(slugIre []string) ApiDcimRegionsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimRegionsListRequest) SlugIsw(slugIsw []string) ApiDcimRegionsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimRegionsListRequest) SlugN(slugN []string) ApiDcimRegionsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimRegionsListRequest) SlugNic(slugNic []string) ApiDcimRegionsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimRegionsListRequest) SlugNie(slugNie []string) ApiDcimRegionsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimRegionsListRequest) SlugNiew(slugNiew []string) ApiDcimRegionsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimRegionsListRequest) SlugNire(slugNire []string) ApiDcimRegionsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimRegionsListRequest) SlugNisw(slugNisw []string) ApiDcimRegionsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimRegionsListRequest) SlugNre(slugNre []string) ApiDcimRegionsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimRegionsListRequest) SlugRe(slugRe []string) ApiDcimRegionsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimRegionsListRequest) Execute() (*PaginatedRegionList, *http.Response, error) {
	return r.ApiService.DcimRegionsListExecute(r)
}

/*
DcimRegionsList Method for DcimRegionsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimRegionsListRequest
*/
func (a *DcimApiService) DcimRegionsList(ctx context.Context) ApiDcimRegionsListRequest {
	return ApiDcimRegionsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedRegionList
func (a *DcimApiService) DcimRegionsListExecute(r ApiDcimRegionsListRequest) (*PaginatedRegionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedRegionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.parent != nil {
		t := *r.parent
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent", parameterToString(t, "multi"))
		}
	}
	if r.parentN != nil {
		t := *r.parentN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent__n", parameterToString(t, "multi"))
		}
	}
	if r.parentId != nil {
		t := *r.parentId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_id", parameterToString(t, "multi"))
		}
	}
	if r.parentIdN != nil {
		t := *r.parentIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("parent_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("parent_id__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableRegion *PatchedWritableRegion
}

func (r ApiDcimRegionsPartialUpdateRequest) PatchedWritableRegion(patchedWritableRegion PatchedWritableRegion) ApiDcimRegionsPartialUpdateRequest {
	r.patchedWritableRegion = &patchedWritableRegion
	return r
}

func (r ApiDcimRegionsPartialUpdateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsPartialUpdateExecute(r)
}

/*
DcimRegionsPartialUpdate Method for DcimRegionsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this region.
 @return ApiDcimRegionsPartialUpdateRequest
*/
func (a *DcimApiService) DcimRegionsPartialUpdate(ctx context.Context, id string) ApiDcimRegionsPartialUpdateRequest {
	return ApiDcimRegionsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Region
func (a *DcimApiService) DcimRegionsPartialUpdateExecute(r ApiDcimRegionsPartialUpdateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableRegion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimRegionsRetrieveRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsRetrieveExecute(r)
}

/*
DcimRegionsRetrieve Method for DcimRegionsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this region.
 @return ApiDcimRegionsRetrieveRequest
*/
func (a *DcimApiService) DcimRegionsRetrieve(ctx context.Context, id string) ApiDcimRegionsRetrieveRequest {
	return ApiDcimRegionsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Region
func (a *DcimApiService) DcimRegionsRetrieveExecute(r ApiDcimRegionsRetrieveRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimRegionsUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableRegion *WritableRegion
}

func (r ApiDcimRegionsUpdateRequest) WritableRegion(writableRegion WritableRegion) ApiDcimRegionsUpdateRequest {
	r.writableRegion = &writableRegion
	return r
}

func (r ApiDcimRegionsUpdateRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.DcimRegionsUpdateExecute(r)
}

/*
DcimRegionsUpdate Method for DcimRegionsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this region.
 @return ApiDcimRegionsUpdateRequest
*/
func (a *DcimApiService) DcimRegionsUpdate(ctx context.Context, id string) ApiDcimRegionsUpdateRequest {
	return ApiDcimRegionsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Region
func (a *DcimApiService) DcimRegionsUpdateExecute(r ApiDcimRegionsUpdateRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimRegionsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/regions/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableRegion == nil {
		return localVarReturnValue, nil, reportError("writableRegion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableRegion
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimSitesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimSitesBulkDestroyExecute(r)
}

/*
DcimSitesBulkDestroy Method for DcimSitesBulkDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimSitesBulkDestroyRequest
*/
func (a *DcimApiService) DcimSitesBulkDestroy(ctx context.Context) ApiDcimSitesBulkDestroyRequest {
	return ApiDcimSitesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimSitesBulkDestroyExecute(r ApiDcimSitesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimSitesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableSite *PatchedWritableSite
}

func (r ApiDcimSitesBulkPartialUpdateRequest) PatchedWritableSite(patchedWritableSite PatchedWritableSite) ApiDcimSitesBulkPartialUpdateRequest {
	r.patchedWritableSite = &patchedWritableSite
	return r
}

func (r ApiDcimSitesBulkPartialUpdateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesBulkPartialUpdateExecute(r)
}

/*
DcimSitesBulkPartialUpdate Method for DcimSitesBulkPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimSitesBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimSitesBulkPartialUpdate(ctx context.Context) ApiDcimSitesBulkPartialUpdateRequest {
	return ApiDcimSitesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Site
func (a *DcimApiService) DcimSitesBulkPartialUpdateExecute(r ApiDcimSitesBulkPartialUpdateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableSite *WritableSite
}

func (r ApiDcimSitesBulkUpdateRequest) WritableSite(writableSite WritableSite) ApiDcimSitesBulkUpdateRequest {
	r.writableSite = &writableSite
	return r
}

func (r ApiDcimSitesBulkUpdateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesBulkUpdateExecute(r)
}

/*
DcimSitesBulkUpdate Method for DcimSitesBulkUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimSitesBulkUpdateRequest
*/
func (a *DcimApiService) DcimSitesBulkUpdate(ctx context.Context) ApiDcimSitesBulkUpdateRequest {
	return ApiDcimSitesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Site
func (a *DcimApiService) DcimSitesBulkUpdateExecute(r ApiDcimSitesBulkUpdateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSite == nil {
		return localVarReturnValue, nil, reportError("writableSite is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableSite *WritableSite
}

func (r ApiDcimSitesCreateRequest) WritableSite(writableSite WritableSite) ApiDcimSitesCreateRequest {
	r.writableSite = &writableSite
	return r
}

func (r ApiDcimSitesCreateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesCreateExecute(r)
}

/*
DcimSitesCreate Method for DcimSitesCreate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimSitesCreateRequest
*/
func (a *DcimApiService) DcimSitesCreate(ctx context.Context) ApiDcimSitesCreateRequest {
	return ApiDcimSitesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Site
func (a *DcimApiService) DcimSitesCreateExecute(r ApiDcimSitesCreateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSite == nil {
		return localVarReturnValue, nil, reportError("writableSite is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimSitesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimSitesDestroyExecute(r)
}

/*
DcimSitesDestroy Method for DcimSitesDestroy

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this site.
 @return ApiDcimSitesDestroyRequest
*/
func (a *DcimApiService) DcimSitesDestroy(ctx context.Context, id string) ApiDcimSitesDestroyRequest {
	return ApiDcimSitesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimSitesDestroyExecute(r ApiDcimSitesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimSitesListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	asn *[]int32
	asnGt *[]int32
	asnGte *[]int32
	asnLt *[]int32
	asnLte *[]int32
	asnN *[]int32
	contactEmail *[]string
	contactEmailIc *[]string
	contactEmailIe *[]string
	contactEmailIew *[]string
	contactEmailIre *[]string
	contactEmailIsw *[]string
	contactEmailN *[]string
	contactEmailNic *[]string
	contactEmailNie *[]string
	contactEmailNiew *[]string
	contactEmailNire *[]string
	contactEmailNisw *[]string
	contactEmailNre *[]string
	contactEmailRe *[]string
	contactName *[]string
	contactNameIc *[]string
	contactNameIe *[]string
	contactNameIew *[]string
	contactNameIre *[]string
	contactNameIsw *[]string
	contactNameN *[]string
	contactNameNic *[]string
	contactNameNie *[]string
	contactNameNiew *[]string
	contactNameNire *[]string
	contactNameNisw *[]string
	contactNameNre *[]string
	contactNameRe *[]string
	contactPhone *[]string
	contactPhoneIc *[]string
	contactPhoneIe *[]string
	contactPhoneIew *[]string
	contactPhoneIre *[]string
	contactPhoneIsw *[]string
	contactPhoneN *[]string
	contactPhoneNic *[]string
	contactPhoneNie *[]string
	contactPhoneNiew *[]string
	contactPhoneNire *[]string
	contactPhoneNisw *[]string
	contactPhoneNre *[]string
	contactPhoneRe *[]string
	created *string
	createdGte *string
	createdLte *string
	facility *[]string
	facilityIc *[]string
	facilityIe *[]string
	facilityIew *[]string
	facilityIre *[]string
	facilityIsw *[]string
	facilityN *[]string
	facilityNic *[]string
	facilityNie *[]string
	facilityNiew *[]string
	facilityNire *[]string
	facilityNisw *[]string
	facilityNre *[]string
	facilityRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	latitude *[]float32
	latitudeGt *[]float32
	latitudeGte *[]float32
	latitudeLt *[]float32
	latitudeLte *[]float32
	latitudeN *[]float32
	limit *int32
	longitude *[]float32
	longitudeGt *[]float32
	longitudeGte *[]float32
	longitudeLt *[]float32
	longitudeLte *[]float32
	longitudeN *[]float32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
	status *[]string
	statusN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
}

func (r ApiDcimSitesListRequest) Asn(asn []int32) ApiDcimSitesListRequest {
	r.asn = &asn
	return r
}

func (r ApiDcimSitesListRequest) AsnGt(asnGt []int32) ApiDcimSitesListRequest {
	r.asnGt = &asnGt
	return r
}

func (r ApiDcimSitesListRequest) AsnGte(asnGte []int32) ApiDcimSitesListRequest {
	r.asnGte = &asnGte
	return r
}

func (r ApiDcimSitesListRequest) AsnLt(asnLt []int32) ApiDcimSitesListRequest {
	r.asnLt = &asnLt
	return r
}

func (r ApiDcimSitesListRequest) AsnLte(asnLte []int32) ApiDcimSitesListRequest {
	r.asnLte = &asnLte
	return r
}

func (r ApiDcimSitesListRequest) AsnN(asnN []int32) ApiDcimSitesListRequest {
	r.asnN = &asnN
	return r
}

func (r ApiDcimSitesListRequest) ContactEmail(contactEmail []string) ApiDcimSitesListRequest {
	r.contactEmail = &contactEmail
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailIc(contactEmailIc []string) ApiDcimSitesListRequest {
	r.contactEmailIc = &contactEmailIc
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailIe(contactEmailIe []string) ApiDcimSitesListRequest {
	r.contactEmailIe = &contactEmailIe
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailIew(contactEmailIew []string) ApiDcimSitesListRequest {
	r.contactEmailIew = &contactEmailIew
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailIre(contactEmailIre []string) ApiDcimSitesListRequest {
	r.contactEmailIre = &contactEmailIre
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailIsw(contactEmailIsw []string) ApiDcimSitesListRequest {
	r.contactEmailIsw = &contactEmailIsw
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailN(contactEmailN []string) ApiDcimSitesListRequest {
	r.contactEmailN = &contactEmailN
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailNic(contactEmailNic []string) ApiDcimSitesListRequest {
	r.contactEmailNic = &contactEmailNic
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailNie(contactEmailNie []string) ApiDcimSitesListRequest {
	r.contactEmailNie = &contactEmailNie
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailNiew(contactEmailNiew []string) ApiDcimSitesListRequest {
	r.contactEmailNiew = &contactEmailNiew
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailNire(contactEmailNire []string) ApiDcimSitesListRequest {
	r.contactEmailNire = &contactEmailNire
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailNisw(contactEmailNisw []string) ApiDcimSitesListRequest {
	r.contactEmailNisw = &contactEmailNisw
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailNre(contactEmailNre []string) ApiDcimSitesListRequest {
	r.contactEmailNre = &contactEmailNre
	return r
}

func (r ApiDcimSitesListRequest) ContactEmailRe(contactEmailRe []string) ApiDcimSitesListRequest {
	r.contactEmailRe = &contactEmailRe
	return r
}

func (r ApiDcimSitesListRequest) ContactName(contactName []string) ApiDcimSitesListRequest {
	r.contactName = &contactName
	return r
}

func (r ApiDcimSitesListRequest) ContactNameIc(contactNameIc []string) ApiDcimSitesListRequest {
	r.contactNameIc = &contactNameIc
	return r
}

func (r ApiDcimSitesListRequest) ContactNameIe(contactNameIe []string) ApiDcimSitesListRequest {
	r.contactNameIe = &contactNameIe
	return r
}

func (r ApiDcimSitesListRequest) ContactNameIew(contactNameIew []string) ApiDcimSitesListRequest {
	r.contactNameIew = &contactNameIew
	return r
}

func (r ApiDcimSitesListRequest) ContactNameIre(contactNameIre []string) ApiDcimSitesListRequest {
	r.contactNameIre = &contactNameIre
	return r
}

func (r ApiDcimSitesListRequest) ContactNameIsw(contactNameIsw []string) ApiDcimSitesListRequest {
	r.contactNameIsw = &contactNameIsw
	return r
}

func (r ApiDcimSitesListRequest) ContactNameN(contactNameN []string) ApiDcimSitesListRequest {
	r.contactNameN = &contactNameN
	return r
}

func (r ApiDcimSitesListRequest) ContactNameNic(contactNameNic []string) ApiDcimSitesListRequest {
	r.contactNameNic = &contactNameNic
	return r
}

func (r ApiDcimSitesListRequest) ContactNameNie(contactNameNie []string) ApiDcimSitesListRequest {
	r.contactNameNie = &contactNameNie
	return r
}

func (r ApiDcimSitesListRequest) ContactNameNiew(contactNameNiew []string) ApiDcimSitesListRequest {
	r.contactNameNiew = &contactNameNiew
	return r
}

func (r ApiDcimSitesListRequest) ContactNameNire(contactNameNire []string) ApiDcimSitesListRequest {
	r.contactNameNire = &contactNameNire
	return r
}

func (r ApiDcimSitesListRequest) ContactNameNisw(contactNameNisw []string) ApiDcimSitesListRequest {
	r.contactNameNisw = &contactNameNisw
	return r
}

func (r ApiDcimSitesListRequest) ContactNameNre(contactNameNre []string) ApiDcimSitesListRequest {
	r.contactNameNre = &contactNameNre
	return r
}

func (r ApiDcimSitesListRequest) ContactNameRe(contactNameRe []string) ApiDcimSitesListRequest {
	r.contactNameRe = &contactNameRe
	return r
}

func (r ApiDcimSitesListRequest) ContactPhone(contactPhone []string) ApiDcimSitesListRequest {
	r.contactPhone = &contactPhone
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneIc(contactPhoneIc []string) ApiDcimSitesListRequest {
	r.contactPhoneIc = &contactPhoneIc
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneIe(contactPhoneIe []string) ApiDcimSitesListRequest {
	r.contactPhoneIe = &contactPhoneIe
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneIew(contactPhoneIew []string) ApiDcimSitesListRequest {
	r.contactPhoneIew = &contactPhoneIew
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneIre(contactPhoneIre []string) ApiDcimSitesListRequest {
	r.contactPhoneIre = &contactPhoneIre
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneIsw(contactPhoneIsw []string) ApiDcimSitesListRequest {
	r.contactPhoneIsw = &contactPhoneIsw
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneN(contactPhoneN []string) ApiDcimSitesListRequest {
	r.contactPhoneN = &contactPhoneN
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneNic(contactPhoneNic []string) ApiDcimSitesListRequest {
	r.contactPhoneNic = &contactPhoneNic
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneNie(contactPhoneNie []string) ApiDcimSitesListRequest {
	r.contactPhoneNie = &contactPhoneNie
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneNiew(contactPhoneNiew []string) ApiDcimSitesListRequest {
	r.contactPhoneNiew = &contactPhoneNiew
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneNire(contactPhoneNire []string) ApiDcimSitesListRequest {
	r.contactPhoneNire = &contactPhoneNire
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneNisw(contactPhoneNisw []string) ApiDcimSitesListRequest {
	r.contactPhoneNisw = &contactPhoneNisw
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneNre(contactPhoneNre []string) ApiDcimSitesListRequest {
	r.contactPhoneNre = &contactPhoneNre
	return r
}

func (r ApiDcimSitesListRequest) ContactPhoneRe(contactPhoneRe []string) ApiDcimSitesListRequest {
	r.contactPhoneRe = &contactPhoneRe
	return r
}

func (r ApiDcimSitesListRequest) Created(created string) ApiDcimSitesListRequest {
	r.created = &created
	return r
}

func (r ApiDcimSitesListRequest) CreatedGte(createdGte string) ApiDcimSitesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimSitesListRequest) CreatedLte(createdLte string) ApiDcimSitesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimSitesListRequest) Facility(facility []string) ApiDcimSitesListRequest {
	r.facility = &facility
	return r
}

func (r ApiDcimSitesListRequest) FacilityIc(facilityIc []string) ApiDcimSitesListRequest {
	r.facilityIc = &facilityIc
	return r
}

func (r ApiDcimSitesListRequest) FacilityIe(facilityIe []string) ApiDcimSitesListRequest {
	r.facilityIe = &facilityIe
	return r
}

func (r ApiDcimSitesListRequest) FacilityIew(facilityIew []string) ApiDcimSitesListRequest {
	r.facilityIew = &facilityIew
	return r
}

func (r ApiDcimSitesListRequest) FacilityIre(facilityIre []string) ApiDcimSitesListRequest {
	r.facilityIre = &facilityIre
	return r
}

func (r ApiDcimSitesListRequest) FacilityIsw(facilityIsw []string) ApiDcimSitesListRequest {
	r.facilityIsw = &facilityIsw
	return r
}

func (r ApiDcimSitesListRequest) FacilityN(facilityN []string) ApiDcimSitesListRequest {
	r.facilityN = &facilityN
	return r
}

func (r ApiDcimSitesListRequest) FacilityNic(facilityNic []string) ApiDcimSitesListRequest {
	r.facilityNic = &facilityNic
	return r
}

func (r ApiDcimSitesListRequest) FacilityNie(facilityNie []string) ApiDcimSitesListRequest {
	r.facilityNie = &facilityNie
	return r
}

func (r ApiDcimSitesListRequest) FacilityNiew(facilityNiew []string) ApiDcimSitesListRequest {
	r.facilityNiew = &facilityNiew
	return r
}

func (r ApiDcimSitesListRequest) FacilityNire(facilityNire []string) ApiDcimSitesListRequest {
	r.facilityNire = &facilityNire
	return r
}

func (r ApiDcimSitesListRequest) FacilityNisw(facilityNisw []string) ApiDcimSitesListRequest {
	r.facilityNisw = &facilityNisw
	return r
}

func (r ApiDcimSitesListRequest) FacilityNre(facilityNre []string) ApiDcimSitesListRequest {
	r.facilityNre = &facilityNre
	return r
}

func (r ApiDcimSitesListRequest) FacilityRe(facilityRe []string) ApiDcimSitesListRequest {
	r.facilityRe = &facilityRe
	return r
}

func (r ApiDcimSitesListRequest) Id(id []string) ApiDcimSitesListRequest {
	r.id = &id
	return r
}

func (r ApiDcimSitesListRequest) IdIc(idIc []string) ApiDcimSitesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimSitesListRequest) IdIe(idIe []string) ApiDcimSitesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimSitesListRequest) IdIew(idIew []string) ApiDcimSitesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimSitesListRequest) IdIre(idIre []string) ApiDcimSitesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimSitesListRequest) IdIsw(idIsw []string) ApiDcimSitesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimSitesListRequest) IdN(idN []string) ApiDcimSitesListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimSitesListRequest) IdNic(idNic []string) ApiDcimSitesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimSitesListRequest) IdNie(idNie []string) ApiDcimSitesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimSitesListRequest) IdNiew(idNiew []string) ApiDcimSitesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimSitesListRequest) IdNire(idNire []string) ApiDcimSitesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimSitesListRequest) IdNisw(idNisw []string) ApiDcimSitesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimSitesListRequest) IdNre(idNre []string) ApiDcimSitesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimSitesListRequest) IdRe(idRe []string) ApiDcimSitesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimSitesListRequest) LastUpdated(lastUpdated time.Time) ApiDcimSitesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimSitesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimSitesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

func (r ApiDcimSitesListRequest) Latitude(latitude []float32) ApiDcimSitesListRequest {
	r.latitude = &latitude
	return r
}

func (r ApiDcimSitesListRequest) LatitudeGt(latitudeGt []float32) ApiDcimSitesListRequest {
	r.latitudeGt = &latitudeGt
	return r
}

func (r ApiDcimSitesListRequest) LatitudeGte(latitudeGte []float32) ApiDcimSitesListRequest {
	r.latitudeGte = &latitudeGte
	return r
}

func (r ApiDcimSitesListRequest) LatitudeLt(latitudeLt []float32) ApiDcimSitesListRequest {
	r.latitudeLt = &latitudeLt
	return r
}

func (r ApiDcimSitesListRequest) LatitudeLte(latitudeLte []float32) ApiDcimSitesListRequest {
	r.latitudeLte = &latitudeLte
	return r
}

func (r ApiDcimSitesListRequest) LatitudeN(latitudeN []float32) ApiDcimSitesListRequest {
	r.latitudeN = &latitudeN
	return r
}

// Number of results to return per page.
func (r ApiDcimSitesListRequest) Limit(limit int32) ApiDcimSitesListRequest {
	r.limit = &limit
	return r
}

func (r ApiDcimSitesListRequest) Longitude(longitude []float32) ApiDcimSitesListRequest {
	r.longitude = &longitude
	return r
}

func (r ApiDcimSitesListRequest) LongitudeGt(longitudeGt []float32) ApiDcimSitesListRequest {
	r.longitudeGt = &longitudeGt
	return r
}

func (r ApiDcimSitesListRequest) LongitudeGte(longitudeGte []float32) ApiDcimSitesListRequest {
	r.longitudeGte = &longitudeGte
	return r
}

func (r ApiDcimSitesListRequest) LongitudeLt(longitudeLt []float32) ApiDcimSitesListRequest {
	r.longitudeLt = &longitudeLt
	return r
}

func (r ApiDcimSitesListRequest) LongitudeLte(longitudeLte []float32) ApiDcimSitesListRequest {
	r.longitudeLte = &longitudeLte
	return r
}

func (r ApiDcimSitesListRequest) LongitudeN(longitudeN []float32) ApiDcimSitesListRequest {
	r.longitudeN = &longitudeN
	return r
}

func (r ApiDcimSitesListRequest) Name(name []string) ApiDcimSitesListRequest {
	r.name = &name
	return r
}

func (r ApiDcimSitesListRequest) NameIc(nameIc []string) ApiDcimSitesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimSitesListRequest) NameIe(nameIe []string) ApiDcimSitesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimSitesListRequest) NameIew(nameIew []string) ApiDcimSitesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimSitesListRequest) NameIre(nameIre []string) ApiDcimSitesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimSitesListRequest) NameIsw(nameIsw []string) ApiDcimSitesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimSitesListRequest) NameN(nameN []string) ApiDcimSitesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimSitesListRequest) NameNic(nameNic []string) ApiDcimSitesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimSitesListRequest) NameNie(nameNie []string) ApiDcimSitesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimSitesListRequest) NameNiew(nameNiew []string) ApiDcimSitesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimSitesListRequest) NameNire(nameNire []string) ApiDcimSitesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimSitesListRequest) NameNisw(nameNisw []string) ApiDcimSitesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimSitesListRequest) NameNre(nameNre []string) ApiDcimSitesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimSitesListRequest) NameRe(nameRe []string) ApiDcimSitesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimSitesListRequest) Offset(offset int32) ApiDcimSitesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimSitesListRequest) Q(q string) ApiDcimSitesListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimSitesListRequest) Region(region []string) ApiDcimSitesListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimSitesListRequest) RegionN(regionN []string) ApiDcimSitesListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimSitesListRequest) RegionId(regionId []string) ApiDcimSitesListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimSitesListRequest) RegionIdN(regionIdN []string) ApiDcimSitesListRequest {
	r.regionIdN = &regionIdN
	return r
}

func (r ApiDcimSitesListRequest) Slug(slug []string) ApiDcimSitesListRequest {
	r.slug = &slug
	return r
}

func (r ApiDcimSitesListRequest) SlugIc(slugIc []string) ApiDcimSitesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiDcimSitesListRequest) SlugIe(slugIe []string) ApiDcimSitesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiDcimSitesListRequest) SlugIew(slugIew []string) ApiDcimSitesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiDcimSitesListRequest) SlugIre(slugIre []string) ApiDcimSitesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiDcimSitesListRequest) SlugIsw(slugIsw []string) ApiDcimSitesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiDcimSitesListRequest) SlugN(slugN []string) ApiDcimSitesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiDcimSitesListRequest) SlugNic(slugNic []string) ApiDcimSitesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiDcimSitesListRequest) SlugNie(slugNie []string) ApiDcimSitesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiDcimSitesListRequest) SlugNiew(slugNiew []string) ApiDcimSitesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiDcimSitesListRequest) SlugNire(slugNire []string) ApiDcimSitesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiDcimSitesListRequest) SlugNisw(slugNisw []string) ApiDcimSitesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiDcimSitesListRequest) SlugNre(slugNre []string) ApiDcimSitesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiDcimSitesListRequest) SlugRe(slugRe []string) ApiDcimSitesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiDcimSitesListRequest) Status(status []string) ApiDcimSitesListRequest {
	r.status = &status
	return r
}

func (r ApiDcimSitesListRequest) StatusN(statusN []string) ApiDcimSitesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiDcimSitesListRequest) Tag(tag []string) ApiDcimSitesListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimSitesListRequest) TagN(tagN []string) ApiDcimSitesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimSitesListRequest) Tenant(tenant []string) ApiDcimSitesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimSitesListRequest) TenantN(tenantN []string) ApiDcimSitesListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiDcimSitesListRequest) TenantGroup(tenantGroup []string) ApiDcimSitesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiDcimSitesListRequest) TenantGroupN(tenantGroupN []string) ApiDcimSitesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiDcimSitesListRequest) TenantGroupId(tenantGroupId []string) ApiDcimSitesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiDcimSitesListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiDcimSitesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiDcimSitesListRequest) TenantId(tenantId []*string) ApiDcimSitesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimSitesListRequest) TenantIdN(tenantIdN []*string) ApiDcimSitesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimSitesListRequest) Execute() (*PaginatedSiteList, *http.Response, error) {
	return r.ApiService.DcimSitesListExecute(r)
}

/*
DcimSitesList Method for DcimSitesList

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimSitesListRequest
*/
func (a *DcimApiService) DcimSitesList(ctx context.Context) ApiDcimSitesListRequest {
	return ApiDcimSitesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSiteList
func (a *DcimApiService) DcimSitesListExecute(r ApiDcimSitesListRequest) (*PaginatedSiteList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSiteList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.asn != nil {
		t := *r.asn
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asn", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asn", parameterToString(t, "multi"))
		}
	}
	if r.asnGt != nil {
		t := *r.asnGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asn__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asn__gt", parameterToString(t, "multi"))
		}
	}
	if r.asnGte != nil {
		t := *r.asnGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asn__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asn__gte", parameterToString(t, "multi"))
		}
	}
	if r.asnLt != nil {
		t := *r.asnLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asn__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asn__lt", parameterToString(t, "multi"))
		}
	}
	if r.asnLte != nil {
		t := *r.asnLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asn__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asn__lte", parameterToString(t, "multi"))
		}
	}
	if r.asnN != nil {
		t := *r.asnN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("asn__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("asn__n", parameterToString(t, "multi"))
		}
	}
	if r.contactEmail != nil {
		t := *r.contactEmail
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailIc != nil {
		t := *r.contactEmailIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__ic", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailIe != nil {
		t := *r.contactEmailIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__ie", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailIew != nil {
		t := *r.contactEmailIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__iew", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailIre != nil {
		t := *r.contactEmailIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__ire", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailIsw != nil {
		t := *r.contactEmailIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__isw", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailN != nil {
		t := *r.contactEmailN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__n", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailNic != nil {
		t := *r.contactEmailNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__nic", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailNie != nil {
		t := *r.contactEmailNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__nie", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailNiew != nil {
		t := *r.contactEmailNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__niew", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailNire != nil {
		t := *r.contactEmailNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__nire", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailNisw != nil {
		t := *r.contactEmailNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__nisw", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailNre != nil {
		t := *r.contactEmailNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__nre", parameterToString(t, "multi"))
		}
	}
	if r.contactEmailRe != nil {
		t := *r.contactEmailRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_email__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_email__re", parameterToString(t, "multi"))
		}
	}
	if r.contactName != nil {
		t := *r.contactName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name", parameterToString(t, "multi"))
		}
	}
	if r.contactNameIc != nil {
		t := *r.contactNameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__ic", parameterToString(t, "multi"))
		}
	}
	if r.contactNameIe != nil {
		t := *r.contactNameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__ie", parameterToString(t, "multi"))
		}
	}
	if r.contactNameIew != nil {
		t := *r.contactNameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__iew", parameterToString(t, "multi"))
		}
	}
	if r.contactNameIre != nil {
		t := *r.contactNameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__ire", parameterToString(t, "multi"))
		}
	}
	if r.contactNameIsw != nil {
		t := *r.contactNameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__isw", parameterToString(t, "multi"))
		}
	}
	if r.contactNameN != nil {
		t := *r.contactNameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__n", parameterToString(t, "multi"))
		}
	}
	if r.contactNameNic != nil {
		t := *r.contactNameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__nic", parameterToString(t, "multi"))
		}
	}
	if r.contactNameNie != nil {
		t := *r.contactNameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__nie", parameterToString(t, "multi"))
		}
	}
	if r.contactNameNiew != nil {
		t := *r.contactNameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__niew", parameterToString(t, "multi"))
		}
	}
	if r.contactNameNire != nil {
		t := *r.contactNameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__nire", parameterToString(t, "multi"))
		}
	}
	if r.contactNameNisw != nil {
		t := *r.contactNameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.contactNameNre != nil {
		t := *r.contactNameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__nre", parameterToString(t, "multi"))
		}
	}
	if r.contactNameRe != nil {
		t := *r.contactNameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_name__re", parameterToString(t, "multi"))
		}
	}
	if r.contactPhone != nil {
		t := *r.contactPhone
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneIc != nil {
		t := *r.contactPhoneIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__ic", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneIe != nil {
		t := *r.contactPhoneIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__ie", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneIew != nil {
		t := *r.contactPhoneIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__iew", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneIre != nil {
		t := *r.contactPhoneIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__ire", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneIsw != nil {
		t := *r.contactPhoneIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__isw", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneN != nil {
		t := *r.contactPhoneN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__n", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneNic != nil {
		t := *r.contactPhoneNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__nic", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneNie != nil {
		t := *r.contactPhoneNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__nie", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneNiew != nil {
		t := *r.contactPhoneNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__niew", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneNire != nil {
		t := *r.contactPhoneNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__nire", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneNisw != nil {
		t := *r.contactPhoneNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__nisw", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneNre != nil {
		t := *r.contactPhoneNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__nre", parameterToString(t, "multi"))
		}
	}
	if r.contactPhoneRe != nil {
		t := *r.contactPhoneRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("contact_phone__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("contact_phone__re", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.facility != nil {
		t := *r.facility
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility", parameterToString(t, "multi"))
		}
	}
	if r.facilityIc != nil {
		t := *r.facilityIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__ic", parameterToString(t, "multi"))
		}
	}
	if r.facilityIe != nil {
		t := *r.facilityIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__ie", parameterToString(t, "multi"))
		}
	}
	if r.facilityIew != nil {
		t := *r.facilityIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__iew", parameterToString(t, "multi"))
		}
	}
	if r.facilityIre != nil {
		t := *r.facilityIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__ire", parameterToString(t, "multi"))
		}
	}
	if r.facilityIsw != nil {
		t := *r.facilityIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__isw", parameterToString(t, "multi"))
		}
	}
	if r.facilityN != nil {
		t := *r.facilityN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__n", parameterToString(t, "multi"))
		}
	}
	if r.facilityNic != nil {
		t := *r.facilityNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__nic", parameterToString(t, "multi"))
		}
	}
	if r.facilityNie != nil {
		t := *r.facilityNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__nie", parameterToString(t, "multi"))
		}
	}
	if r.facilityNiew != nil {
		t := *r.facilityNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__niew", parameterToString(t, "multi"))
		}
	}
	if r.facilityNire != nil {
		t := *r.facilityNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__nire", parameterToString(t, "multi"))
		}
	}
	if r.facilityNisw != nil {
		t := *r.facilityNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__nisw", parameterToString(t, "multi"))
		}
	}
	if r.facilityNre != nil {
		t := *r.facilityNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__nre", parameterToString(t, "multi"))
		}
	}
	if r.facilityRe != nil {
		t := *r.facilityRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("facility__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("facility__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.latitude != nil {
		t := *r.latitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("latitude", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("latitude", parameterToString(t, "multi"))
		}
	}
	if r.latitudeGt != nil {
		t := *r.latitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("latitude__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("latitude__gt", parameterToString(t, "multi"))
		}
	}
	if r.latitudeGte != nil {
		t := *r.latitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("latitude__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("latitude__gte", parameterToString(t, "multi"))
		}
	}
	if r.latitudeLt != nil {
		t := *r.latitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("latitude__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("latitude__lt", parameterToString(t, "multi"))
		}
	}
	if r.latitudeLte != nil {
		t := *r.latitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("latitude__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("latitude__lte", parameterToString(t, "multi"))
		}
	}
	if r.latitudeN != nil {
		t := *r.latitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("latitude__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("latitude__n", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.longitude != nil {
		t := *r.longitude
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("longitude", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("longitude", parameterToString(t, "multi"))
		}
	}
	if r.longitudeGt != nil {
		t := *r.longitudeGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("longitude__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("longitude__gt", parameterToString(t, "multi"))
		}
	}
	if r.longitudeGte != nil {
		t := *r.longitudeGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("longitude__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("longitude__gte", parameterToString(t, "multi"))
		}
	}
	if r.longitudeLt != nil {
		t := *r.longitudeLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("longitude__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("longitude__lt", parameterToString(t, "multi"))
		}
	}
	if r.longitudeLte != nil {
		t := *r.longitudeLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("longitude__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("longitude__lte", parameterToString(t, "multi"))
		}
	}
	if r.longitudeN != nil {
		t := *r.longitudeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("longitude__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("longitude__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableSite *PatchedWritableSite
}

func (r ApiDcimSitesPartialUpdateRequest) PatchedWritableSite(patchedWritableSite PatchedWritableSite) ApiDcimSitesPartialUpdateRequest {
	r.patchedWritableSite = &patchedWritableSite
	return r
}

func (r ApiDcimSitesPartialUpdateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesPartialUpdateExecute(r)
}

/*
DcimSitesPartialUpdate Method for DcimSitesPartialUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this site.
 @return ApiDcimSitesPartialUpdateRequest
*/
func (a *DcimApiService) DcimSitesPartialUpdate(ctx context.Context, id string) ApiDcimSitesPartialUpdateRequest {
	return ApiDcimSitesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Site
func (a *DcimApiService) DcimSitesPartialUpdateExecute(r ApiDcimSitesPartialUpdateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableSite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimSitesRetrieveRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesRetrieveExecute(r)
}

/*
DcimSitesRetrieve Method for DcimSitesRetrieve

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this site.
 @return ApiDcimSitesRetrieveRequest
*/
func (a *DcimApiService) DcimSitesRetrieve(ctx context.Context, id string) ApiDcimSitesRetrieveRequest {
	return ApiDcimSitesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Site
func (a *DcimApiService) DcimSitesRetrieveExecute(r ApiDcimSitesRetrieveRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimSitesUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableSite *WritableSite
}

func (r ApiDcimSitesUpdateRequest) WritableSite(writableSite WritableSite) ApiDcimSitesUpdateRequest {
	r.writableSite = &writableSite
	return r
}

func (r ApiDcimSitesUpdateRequest) Execute() (*Site, *http.Response, error) {
	return r.ApiService.DcimSitesUpdateExecute(r)
}

/*
DcimSitesUpdate Method for DcimSitesUpdate

Mixin to set `metadata_class` to implement `status` field in model viewset metadata.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this site.
 @return ApiDcimSitesUpdateRequest
*/
func (a *DcimApiService) DcimSitesUpdate(ctx context.Context, id string) ApiDcimSitesUpdateRequest {
	return ApiDcimSitesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Site
func (a *DcimApiService) DcimSitesUpdateExecute(r ApiDcimSitesUpdateRequest) (*Site, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Site
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimSitesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/sites/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableSite == nil {
		return localVarReturnValue, nil, reportError("writableSite is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableSite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisBulkDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
}

func (r ApiDcimVirtualChassisBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimVirtualChassisBulkDestroyExecute(r)
}

/*
DcimVirtualChassisBulkDestroy Method for DcimVirtualChassisBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimVirtualChassisBulkDestroyRequest
*/
func (a *DcimApiService) DcimVirtualChassisBulkDestroy(ctx context.Context) ApiDcimVirtualChassisBulkDestroyRequest {
	return ApiDcimVirtualChassisBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimVirtualChassisBulkDestroyExecute(r ApiDcimVirtualChassisBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	patchedWritableVirtualChassis *PatchedWritableVirtualChassis
}

func (r ApiDcimVirtualChassisBulkPartialUpdateRequest) PatchedWritableVirtualChassis(patchedWritableVirtualChassis PatchedWritableVirtualChassis) ApiDcimVirtualChassisBulkPartialUpdateRequest {
	r.patchedWritableVirtualChassis = &patchedWritableVirtualChassis
	return r
}

func (r ApiDcimVirtualChassisBulkPartialUpdateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisBulkPartialUpdateExecute(r)
}

/*
DcimVirtualChassisBulkPartialUpdate Method for DcimVirtualChassisBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimVirtualChassisBulkPartialUpdateRequest
*/
func (a *DcimApiService) DcimVirtualChassisBulkPartialUpdate(ctx context.Context) ApiDcimVirtualChassisBulkPartialUpdateRequest {
	return ApiDcimVirtualChassisBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualChassis
func (a *DcimApiService) DcimVirtualChassisBulkPartialUpdateExecute(r ApiDcimVirtualChassisBulkPartialUpdateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVirtualChassis
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisBulkUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableVirtualChassis *WritableVirtualChassis
}

func (r ApiDcimVirtualChassisBulkUpdateRequest) WritableVirtualChassis(writableVirtualChassis WritableVirtualChassis) ApiDcimVirtualChassisBulkUpdateRequest {
	r.writableVirtualChassis = &writableVirtualChassis
	return r
}

func (r ApiDcimVirtualChassisBulkUpdateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisBulkUpdateExecute(r)
}

/*
DcimVirtualChassisBulkUpdate Method for DcimVirtualChassisBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimVirtualChassisBulkUpdateRequest
*/
func (a *DcimApiService) DcimVirtualChassisBulkUpdate(ctx context.Context) ApiDcimVirtualChassisBulkUpdateRequest {
	return ApiDcimVirtualChassisBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualChassis
func (a *DcimApiService) DcimVirtualChassisBulkUpdateExecute(r ApiDcimVirtualChassisBulkUpdateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualChassis == nil {
		return localVarReturnValue, nil, reportError("writableVirtualChassis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualChassis
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisCreateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	writableVirtualChassis *WritableVirtualChassis
}

func (r ApiDcimVirtualChassisCreateRequest) WritableVirtualChassis(writableVirtualChassis WritableVirtualChassis) ApiDcimVirtualChassisCreateRequest {
	r.writableVirtualChassis = &writableVirtualChassis
	return r
}

func (r ApiDcimVirtualChassisCreateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisCreateExecute(r)
}

/*
DcimVirtualChassisCreate Method for DcimVirtualChassisCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimVirtualChassisCreateRequest
*/
func (a *DcimApiService) DcimVirtualChassisCreate(ctx context.Context) ApiDcimVirtualChassisCreateRequest {
	return ApiDcimVirtualChassisCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualChassis
func (a *DcimApiService) DcimVirtualChassisCreateExecute(r ApiDcimVirtualChassisCreateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualChassis == nil {
		return localVarReturnValue, nil, reportError("writableVirtualChassis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualChassis
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisDestroyRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimVirtualChassisDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DcimVirtualChassisDestroyExecute(r)
}

/*
DcimVirtualChassisDestroy Method for DcimVirtualChassisDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual chassis.
 @return ApiDcimVirtualChassisDestroyRequest
*/
func (a *DcimApiService) DcimVirtualChassisDestroy(ctx context.Context, id string) ApiDcimVirtualChassisDestroyRequest {
	return ApiDcimVirtualChassisDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DcimApiService) DcimVirtualChassisDestroyExecute(r ApiDcimVirtualChassisDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisListRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	created *string
	createdGte *string
	createdLte *string
	domain *[]string
	domainIc *[]string
	domainIe *[]string
	domainIew *[]string
	domainIre *[]string
	domainIsw *[]string
	domainN *[]string
	domainNic *[]string
	domainNie *[]string
	domainNiew *[]string
	domainNire *[]string
	domainNisw *[]string
	domainNre *[]string
	domainRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	master *[]*string
	masterN *[]*string
	masterId *[]*string
	masterIdN *[]*string
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantId *[]string
	tenantIdN *[]string
}

func (r ApiDcimVirtualChassisListRequest) Created(created string) ApiDcimVirtualChassisListRequest {
	r.created = &created
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedGte(createdGte string) ApiDcimVirtualChassisListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiDcimVirtualChassisListRequest) CreatedLte(createdLte string) ApiDcimVirtualChassisListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiDcimVirtualChassisListRequest) Domain(domain []string) ApiDcimVirtualChassisListRequest {
	r.domain = &domain
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIc(domainIc []string) ApiDcimVirtualChassisListRequest {
	r.domainIc = &domainIc
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIe(domainIe []string) ApiDcimVirtualChassisListRequest {
	r.domainIe = &domainIe
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIew(domainIew []string) ApiDcimVirtualChassisListRequest {
	r.domainIew = &domainIew
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIre(domainIre []string) ApiDcimVirtualChassisListRequest {
	r.domainIre = &domainIre
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainIsw(domainIsw []string) ApiDcimVirtualChassisListRequest {
	r.domainIsw = &domainIsw
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainN(domainN []string) ApiDcimVirtualChassisListRequest {
	r.domainN = &domainN
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNic(domainNic []string) ApiDcimVirtualChassisListRequest {
	r.domainNic = &domainNic
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNie(domainNie []string) ApiDcimVirtualChassisListRequest {
	r.domainNie = &domainNie
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNiew(domainNiew []string) ApiDcimVirtualChassisListRequest {
	r.domainNiew = &domainNiew
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNire(domainNire []string) ApiDcimVirtualChassisListRequest {
	r.domainNire = &domainNire
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNisw(domainNisw []string) ApiDcimVirtualChassisListRequest {
	r.domainNisw = &domainNisw
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainNre(domainNre []string) ApiDcimVirtualChassisListRequest {
	r.domainNre = &domainNre
	return r
}

func (r ApiDcimVirtualChassisListRequest) DomainRe(domainRe []string) ApiDcimVirtualChassisListRequest {
	r.domainRe = &domainRe
	return r
}

func (r ApiDcimVirtualChassisListRequest) Id(id []string) ApiDcimVirtualChassisListRequest {
	r.id = &id
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdIc(idIc []string) ApiDcimVirtualChassisListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdIe(idIe []string) ApiDcimVirtualChassisListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdIew(idIew []string) ApiDcimVirtualChassisListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdIre(idIre []string) ApiDcimVirtualChassisListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdIsw(idIsw []string) ApiDcimVirtualChassisListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdN(idN []string) ApiDcimVirtualChassisListRequest {
	r.idN = &idN
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdNic(idNic []string) ApiDcimVirtualChassisListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdNie(idNie []string) ApiDcimVirtualChassisListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdNiew(idNiew []string) ApiDcimVirtualChassisListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdNire(idNire []string) ApiDcimVirtualChassisListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdNisw(idNisw []string) ApiDcimVirtualChassisListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdNre(idNre []string) ApiDcimVirtualChassisListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiDcimVirtualChassisListRequest) IdRe(idRe []string) ApiDcimVirtualChassisListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdated(lastUpdated time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiDcimVirtualChassisListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiDcimVirtualChassisListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiDcimVirtualChassisListRequest) Limit(limit int32) ApiDcimVirtualChassisListRequest {
	r.limit = &limit
	return r
}

// Master (name)
func (r ApiDcimVirtualChassisListRequest) Master(master []*string) ApiDcimVirtualChassisListRequest {
	r.master = &master
	return r
}

// Master (name)
func (r ApiDcimVirtualChassisListRequest) MasterN(masterN []*string) ApiDcimVirtualChassisListRequest {
	r.masterN = &masterN
	return r
}

// Master (ID)
func (r ApiDcimVirtualChassisListRequest) MasterId(masterId []*string) ApiDcimVirtualChassisListRequest {
	r.masterId = &masterId
	return r
}

// Master (ID)
func (r ApiDcimVirtualChassisListRequest) MasterIdN(masterIdN []*string) ApiDcimVirtualChassisListRequest {
	r.masterIdN = &masterIdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) Name(name []string) ApiDcimVirtualChassisListRequest {
	r.name = &name
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIc(nameIc []string) ApiDcimVirtualChassisListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIe(nameIe []string) ApiDcimVirtualChassisListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIew(nameIew []string) ApiDcimVirtualChassisListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIre(nameIre []string) ApiDcimVirtualChassisListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameIsw(nameIsw []string) ApiDcimVirtualChassisListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameN(nameN []string) ApiDcimVirtualChassisListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNic(nameNic []string) ApiDcimVirtualChassisListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNie(nameNie []string) ApiDcimVirtualChassisListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNiew(nameNiew []string) ApiDcimVirtualChassisListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNire(nameNire []string) ApiDcimVirtualChassisListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNisw(nameNisw []string) ApiDcimVirtualChassisListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameNre(nameNre []string) ApiDcimVirtualChassisListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiDcimVirtualChassisListRequest) NameRe(nameRe []string) ApiDcimVirtualChassisListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiDcimVirtualChassisListRequest) Offset(offset int32) ApiDcimVirtualChassisListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiDcimVirtualChassisListRequest) Q(q string) ApiDcimVirtualChassisListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiDcimVirtualChassisListRequest) Region(region []string) ApiDcimVirtualChassisListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiDcimVirtualChassisListRequest) RegionN(regionN []string) ApiDcimVirtualChassisListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiDcimVirtualChassisListRequest) RegionId(regionId []string) ApiDcimVirtualChassisListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiDcimVirtualChassisListRequest) RegionIdN(regionIdN []string) ApiDcimVirtualChassisListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site name (slug)
func (r ApiDcimVirtualChassisListRequest) Site(site []string) ApiDcimVirtualChassisListRequest {
	r.site = &site
	return r
}

// Site name (slug)
func (r ApiDcimVirtualChassisListRequest) SiteN(siteN []string) ApiDcimVirtualChassisListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiDcimVirtualChassisListRequest) SiteId(siteId []string) ApiDcimVirtualChassisListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiDcimVirtualChassisListRequest) SiteIdN(siteIdN []string) ApiDcimVirtualChassisListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) Tag(tag []string) ApiDcimVirtualChassisListRequest {
	r.tag = &tag
	return r
}

func (r ApiDcimVirtualChassisListRequest) TagN(tagN []string) ApiDcimVirtualChassisListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiDcimVirtualChassisListRequest) Tenant(tenant []string) ApiDcimVirtualChassisListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiDcimVirtualChassisListRequest) TenantN(tenantN []string) ApiDcimVirtualChassisListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant (ID)
func (r ApiDcimVirtualChassisListRequest) TenantId(tenantId []string) ApiDcimVirtualChassisListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiDcimVirtualChassisListRequest) TenantIdN(tenantIdN []string) ApiDcimVirtualChassisListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiDcimVirtualChassisListRequest) Execute() (*PaginatedVirtualChassisList, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisListExecute(r)
}

/*
DcimVirtualChassisList Method for DcimVirtualChassisList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDcimVirtualChassisListRequest
*/
func (a *DcimApiService) DcimVirtualChassisList(ctx context.Context) ApiDcimVirtualChassisListRequest {
	return ApiDcimVirtualChassisListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedVirtualChassisList
func (a *DcimApiService) DcimVirtualChassisListExecute(r ApiDcimVirtualChassisListRequest) (*PaginatedVirtualChassisList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedVirtualChassisList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.domain != nil {
		t := *r.domain
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain", parameterToString(t, "multi"))
		}
	}
	if r.domainIc != nil {
		t := *r.domainIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__ic", parameterToString(t, "multi"))
		}
	}
	if r.domainIe != nil {
		t := *r.domainIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__ie", parameterToString(t, "multi"))
		}
	}
	if r.domainIew != nil {
		t := *r.domainIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__iew", parameterToString(t, "multi"))
		}
	}
	if r.domainIre != nil {
		t := *r.domainIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__ire", parameterToString(t, "multi"))
		}
	}
	if r.domainIsw != nil {
		t := *r.domainIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__isw", parameterToString(t, "multi"))
		}
	}
	if r.domainN != nil {
		t := *r.domainN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__n", parameterToString(t, "multi"))
		}
	}
	if r.domainNic != nil {
		t := *r.domainNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__nic", parameterToString(t, "multi"))
		}
	}
	if r.domainNie != nil {
		t := *r.domainNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__nie", parameterToString(t, "multi"))
		}
	}
	if r.domainNiew != nil {
		t := *r.domainNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__niew", parameterToString(t, "multi"))
		}
	}
	if r.domainNire != nil {
		t := *r.domainNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__nire", parameterToString(t, "multi"))
		}
	}
	if r.domainNisw != nil {
		t := *r.domainNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__nisw", parameterToString(t, "multi"))
		}
	}
	if r.domainNre != nil {
		t := *r.domainNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__nre", parameterToString(t, "multi"))
		}
	}
	if r.domainRe != nil {
		t := *r.domainRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("domain__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("domain__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.master != nil {
		t := *r.master
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("master", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("master", parameterToString(t, "multi"))
		}
	}
	if r.masterN != nil {
		t := *r.masterN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("master__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("master__n", parameterToString(t, "multi"))
		}
	}
	if r.masterId != nil {
		t := *r.masterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("master_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("master_id", parameterToString(t, "multi"))
		}
	}
	if r.masterIdN != nil {
		t := *r.masterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("master_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("master_id__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisPartialUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	patchedWritableVirtualChassis *PatchedWritableVirtualChassis
}

func (r ApiDcimVirtualChassisPartialUpdateRequest) PatchedWritableVirtualChassis(patchedWritableVirtualChassis PatchedWritableVirtualChassis) ApiDcimVirtualChassisPartialUpdateRequest {
	r.patchedWritableVirtualChassis = &patchedWritableVirtualChassis
	return r
}

func (r ApiDcimVirtualChassisPartialUpdateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisPartialUpdateExecute(r)
}

/*
DcimVirtualChassisPartialUpdate Method for DcimVirtualChassisPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual chassis.
 @return ApiDcimVirtualChassisPartialUpdateRequest
*/
func (a *DcimApiService) DcimVirtualChassisPartialUpdate(ctx context.Context, id string) ApiDcimVirtualChassisPartialUpdateRequest {
	return ApiDcimVirtualChassisPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualChassis
func (a *DcimApiService) DcimVirtualChassisPartialUpdateExecute(r ApiDcimVirtualChassisPartialUpdateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVirtualChassis
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisRetrieveRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
}

func (r ApiDcimVirtualChassisRetrieveRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisRetrieveExecute(r)
}

/*
DcimVirtualChassisRetrieve Method for DcimVirtualChassisRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual chassis.
 @return ApiDcimVirtualChassisRetrieveRequest
*/
func (a *DcimApiService) DcimVirtualChassisRetrieve(ctx context.Context, id string) ApiDcimVirtualChassisRetrieveRequest {
	return ApiDcimVirtualChassisRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualChassis
func (a *DcimApiService) DcimVirtualChassisRetrieveExecute(r ApiDcimVirtualChassisRetrieveRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDcimVirtualChassisUpdateRequest struct {
	ctx context.Context
	ApiService *DcimApiService
	id string
	writableVirtualChassis *WritableVirtualChassis
}

func (r ApiDcimVirtualChassisUpdateRequest) WritableVirtualChassis(writableVirtualChassis WritableVirtualChassis) ApiDcimVirtualChassisUpdateRequest {
	r.writableVirtualChassis = &writableVirtualChassis
	return r
}

func (r ApiDcimVirtualChassisUpdateRequest) Execute() (*VirtualChassis, *http.Response, error) {
	return r.ApiService.DcimVirtualChassisUpdateExecute(r)
}

/*
DcimVirtualChassisUpdate Method for DcimVirtualChassisUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual chassis.
 @return ApiDcimVirtualChassisUpdateRequest
*/
func (a *DcimApiService) DcimVirtualChassisUpdate(ctx context.Context, id string) ApiDcimVirtualChassisUpdateRequest {
	return ApiDcimVirtualChassisUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualChassis
func (a *DcimApiService) DcimVirtualChassisUpdateExecute(r ApiDcimVirtualChassisUpdateRequest) (*VirtualChassis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualChassis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DcimApiService.DcimVirtualChassisUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/dcim/virtual-chassis/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualChassis == nil {
		return localVarReturnValue, nil, reportError("writableVirtualChassis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualChassis
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
