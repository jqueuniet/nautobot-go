/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WritableCableStatusEnum the model 'WritableCableStatusEnum'
type WritableCableStatusEnum string

// List of WritableCableStatusEnum
const (
	CONNECTED WritableCableStatusEnum = "connected"
	DECOMMISSIONING WritableCableStatusEnum = "decommissioning"
	PLANNED WritableCableStatusEnum = "planned"
)

// All allowed values of WritableCableStatusEnum enum
var AllowedWritableCableStatusEnumEnumValues = []WritableCableStatusEnum{
	"connected",
	"decommissioning",
	"planned",
}

func (v *WritableCableStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WritableCableStatusEnum(value)
	for _, existing := range AllowedWritableCableStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WritableCableStatusEnum", value)
}

// NewWritableCableStatusEnumFromValue returns a pointer to a valid WritableCableStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWritableCableStatusEnumFromValue(v string) (*WritableCableStatusEnum, error) {
	ev := WritableCableStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WritableCableStatusEnum: valid values are %v", v, AllowedWritableCableStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WritableCableStatusEnum) IsValid() bool {
	for _, existing := range AllowedWritableCableStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WritableCableStatusEnum value
func (v WritableCableStatusEnum) Ptr() *WritableCableStatusEnum {
	return &v
}

type NullableWritableCableStatusEnum struct {
	value *WritableCableStatusEnum
	isSet bool
}

func (v NullableWritableCableStatusEnum) Get() *WritableCableStatusEnum {
	return v.value
}

func (v *NullableWritableCableStatusEnum) Set(val *WritableCableStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableCableStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableCableStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableCableStatusEnum(val *WritableCableStatusEnum) *NullableWritableCableStatusEnum {
	return &NullableWritableCableStatusEnum{value: val, isSet: true}
}

func (v NullableWritableCableStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableCableStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

