/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IPAddressStatusChoices the model 'IPAddressStatusChoices'
type IPAddressStatusChoices string

// List of IPAddressStatusChoices
//const (
//	ACTIVE IPAddressStatusChoices = "active"
//	RESERVED IPAddressStatusChoices = "reserved"
//	DEPRECATED IPAddressStatusChoices = "deprecated"
//	DHCP IPAddressStatusChoices = "dhcp"
//	SLAAC IPAddressStatusChoices = "slaac"
//)

// All allowed values of IPAddressStatusChoices enum
var AllowedIPAddressStatusChoicesEnumValues = []IPAddressStatusChoices{
	"active",
	"reserved",
	"deprecated",
	"dhcp",
	"slaac",
}

func (v *IPAddressStatusChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IPAddressStatusChoices(value)
	for _, existing := range AllowedIPAddressStatusChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IPAddressStatusChoices", value)
}

// NewIPAddressStatusChoicesFromValue returns a pointer to a valid IPAddressStatusChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIPAddressStatusChoicesFromValue(v string) (*IPAddressStatusChoices, error) {
	ev := IPAddressStatusChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IPAddressStatusChoices: valid values are %v", v, AllowedIPAddressStatusChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IPAddressStatusChoices) IsValid() bool {
	for _, existing := range AllowedIPAddressStatusChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IPAddressStatusChoices value
func (v IPAddressStatusChoices) Ptr() *IPAddressStatusChoices {
	return &v
}

type NullableIPAddressStatusChoices struct {
	value *IPAddressStatusChoices
	isSet bool
}

func (v NullableIPAddressStatusChoices) Get() *IPAddressStatusChoices {
	return v.value
}

func (v *NullableIPAddressStatusChoices) Set(val *IPAddressStatusChoices) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddressStatusChoices) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddressStatusChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddressStatusChoices(val *IPAddressStatusChoices) *NullableIPAddressStatusChoices {
	return &NullableIPAddressStatusChoices{value: val, isSet: true}
}

func (v NullableIPAddressStatusChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddressStatusChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

