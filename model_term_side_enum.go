/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TermSideEnum the model 'TermSideEnum'
type TermSideEnum string

// List of TermSideEnum
const (
	A TermSideEnum = "A"
	Z TermSideEnum = "Z"
)

// All allowed values of TermSideEnum enum
var AllowedTermSideEnumEnumValues = []TermSideEnum{
	"A",
	"Z",
}

func (v *TermSideEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TermSideEnum(value)
	for _, existing := range AllowedTermSideEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TermSideEnum", value)
}

// NewTermSideEnumFromValue returns a pointer to a valid TermSideEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTermSideEnumFromValue(v string) (*TermSideEnum, error) {
	ev := TermSideEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TermSideEnum: valid values are %v", v, AllowedTermSideEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TermSideEnum) IsValid() bool {
	for _, existing := range AllowedTermSideEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TermSideEnum value
func (v TermSideEnum) Ptr() *TermSideEnum {
	return &v
}

type NullableTermSideEnum struct {
	value *TermSideEnum
	isSet bool
}

func (v NullableTermSideEnum) Get() *TermSideEnum {
	return v.value
}

func (v *NullableTermSideEnum) Set(val *TermSideEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableTermSideEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableTermSideEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTermSideEnum(val *TermSideEnum) *NullableTermSideEnum {
	return &NullableTermSideEnum{value: val, isSet: true}
}

func (v NullableTermSideEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTermSideEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

