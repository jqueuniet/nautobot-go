/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OuterUnitEnum the model 'OuterUnitEnum'
type OuterUnitEnum string

// List of OuterUnitEnum
const (
	MM OuterUnitEnum = "mm"
	IN OuterUnitEnum = "in"
)

// All allowed values of OuterUnitEnum enum
var AllowedOuterUnitEnumEnumValues = []OuterUnitEnum{
	"mm",
	"in",
}

func (v *OuterUnitEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OuterUnitEnum(value)
	for _, existing := range AllowedOuterUnitEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OuterUnitEnum", value)
}

// NewOuterUnitEnumFromValue returns a pointer to a valid OuterUnitEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOuterUnitEnumFromValue(v string) (*OuterUnitEnum, error) {
	ev := OuterUnitEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OuterUnitEnum: valid values are %v", v, AllowedOuterUnitEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OuterUnitEnum) IsValid() bool {
	for _, existing := range AllowedOuterUnitEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OuterUnitEnum value
func (v OuterUnitEnum) Ptr() *OuterUnitEnum {
	return &v
}

type NullableOuterUnitEnum struct {
	value *OuterUnitEnum
	isSet bool
}

func (v NullableOuterUnitEnum) Get() *OuterUnitEnum {
	return v.value
}

func (v *NullableOuterUnitEnum) Set(val *OuterUnitEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableOuterUnitEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableOuterUnitEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOuterUnitEnum(val *OuterUnitEnum) *NullableOuterUnitEnum {
	return &NullableOuterUnitEnum{value: val, isSet: true}
}

func (v NullableOuterUnitEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOuterUnitEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

