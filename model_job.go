/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Job Extends ModelSerializer to render any CustomFields and their values associated with an object.
type Job struct {
	Id string `json:"id"`
	Url string `json:"url"`
	// Source of the Python code for this job - local, Git repository, or plugins
	Source string `json:"source"`
	// Dotted name of the Python module providing this job
	ModuleName string `json:"module_name"`
	// Name of the Python class providing this job
	JobClassName string `json:"job_class_name"`
	// Human-readable grouping that this job belongs to
	Grouping string `json:"grouping"`
	// If set, the configured grouping will remain even if the underlying Job source code changes
	GroupingOverride *bool `json:"grouping_override,omitempty"`
	// Human-readable name of this job
	Name string `json:"name"`
	// If set, the configured name will remain even if the underlying Job source code changes
	NameOverride *bool `json:"name_override,omitempty"`
	Slug *string `json:"slug,omitempty"`
	// Markdown formatting is supported
	Description *string `json:"description,omitempty"`
	// If set, the configured description will remain even if the underlying Job source code changes
	DescriptionOverride *bool `json:"description_override,omitempty"`
	// Whether the Python module and class providing this job are presently installed and loadable
	Installed bool `json:"installed"`
	// Whether this job can be executed by users
	Enabled *bool `json:"enabled,omitempty"`
	// Whether this job contains sensitive variables
	HasSensitiveVariables *bool `json:"has_sensitive_variables,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	HasSensitiveVariablesOverride *bool `json:"has_sensitive_variables_override,omitempty"`
	// Whether the job requires approval from another user before running
	ApprovalRequired *bool `json:"approval_required,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	ApprovalRequiredOverride *bool `json:"approval_required_override,omitempty"`
	// Whether the job defaults to committing changes when run, or defaults to a dry-run
	CommitDefault *bool `json:"commit_default,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	CommitDefaultOverride *bool `json:"commit_default_override,omitempty"`
	// Whether the job defaults to not being shown in the UI
	Hidden *bool `json:"hidden,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	HiddenOverride *bool `json:"hidden_override,omitempty"`
	// Whether the job is prevented from making lasting changes to the database
	ReadOnly *bool `json:"read_only,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	ReadOnlyOverride *bool `json:"read_only_override,omitempty"`
	// Maximum runtime in seconds before the job will receive a <code>SoftTimeLimitExceeded</code> exception.<br>Set to 0 to use Nautobot system default
	SoftTimeLimit *float64 `json:"soft_time_limit,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	SoftTimeLimitOverride *bool `json:"soft_time_limit_override,omitempty"`
	// Maximum runtime in seconds before the job will be forcibly terminated.<br>Set to 0 to use Nautobot system default
	TimeLimit *float64 `json:"time_limit,omitempty"`
	// If set, the configured value will remain even if the underlying Job source code changes
	TimeLimitOverride *bool `json:"time_limit_override,omitempty"`
	Tags []TagSerializerField `json:"tags,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	Created string `json:"created"`
	LastUpdated time.Time `json:"last_updated"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(id string, url string, source string, moduleName string, jobClassName string, grouping string, name string, installed bool, created string, lastUpdated time.Time, display string) *Job {
	this := Job{}
	this.Id = id
	this.Url = url
	this.Source = source
	this.ModuleName = moduleName
	this.JobClassName = jobClassName
	this.Grouping = grouping
	this.Name = name
	this.Installed = installed
	this.Created = created
	this.LastUpdated = lastUpdated
	this.Display = display
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetId returns the Id field value
func (o *Job) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Job) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Job) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *Job) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Job) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Job) SetUrl(v string) {
	o.Url = v
}

// GetSource returns the Source field value
func (o *Job) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *Job) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *Job) SetSource(v string) {
	o.Source = v
}

// GetModuleName returns the ModuleName field value
func (o *Job) GetModuleName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ModuleName
}

// GetModuleNameOk returns a tuple with the ModuleName field value
// and a boolean to check if the value has been set.
func (o *Job) GetModuleNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ModuleName, true
}

// SetModuleName sets field value
func (o *Job) SetModuleName(v string) {
	o.ModuleName = v
}

// GetJobClassName returns the JobClassName field value
func (o *Job) GetJobClassName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobClassName
}

// GetJobClassNameOk returns a tuple with the JobClassName field value
// and a boolean to check if the value has been set.
func (o *Job) GetJobClassNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobClassName, true
}

// SetJobClassName sets field value
func (o *Job) SetJobClassName(v string) {
	o.JobClassName = v
}

// GetGrouping returns the Grouping field value
func (o *Job) GetGrouping() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Grouping
}

// GetGroupingOk returns a tuple with the Grouping field value
// and a boolean to check if the value has been set.
func (o *Job) GetGroupingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grouping, true
}

// SetGrouping sets field value
func (o *Job) SetGrouping(v string) {
	o.Grouping = v
}

// GetGroupingOverride returns the GroupingOverride field value if set, zero value otherwise.
func (o *Job) GetGroupingOverride() bool {
	if o == nil || o.GroupingOverride == nil {
		var ret bool
		return ret
	}
	return *o.GroupingOverride
}

// GetGroupingOverrideOk returns a tuple with the GroupingOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetGroupingOverrideOk() (*bool, bool) {
	if o == nil || o.GroupingOverride == nil {
		return nil, false
	}
	return o.GroupingOverride, true
}

// HasGroupingOverride returns a boolean if a field has been set.
func (o *Job) HasGroupingOverride() bool {
	if o != nil && o.GroupingOverride != nil {
		return true
	}

	return false
}

// SetGroupingOverride gets a reference to the given bool and assigns it to the GroupingOverride field.
func (o *Job) SetGroupingOverride(v bool) {
	o.GroupingOverride = &v
}

// GetName returns the Name field value
func (o *Job) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Job) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Job) SetName(v string) {
	o.Name = v
}

// GetNameOverride returns the NameOverride field value if set, zero value otherwise.
func (o *Job) GetNameOverride() bool {
	if o == nil || o.NameOverride == nil {
		var ret bool
		return ret
	}
	return *o.NameOverride
}

// GetNameOverrideOk returns a tuple with the NameOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetNameOverrideOk() (*bool, bool) {
	if o == nil || o.NameOverride == nil {
		return nil, false
	}
	return o.NameOverride, true
}

// HasNameOverride returns a boolean if a field has been set.
func (o *Job) HasNameOverride() bool {
	if o != nil && o.NameOverride != nil {
		return true
	}

	return false
}

// SetNameOverride gets a reference to the given bool and assigns it to the NameOverride field.
func (o *Job) SetNameOverride(v bool) {
	o.NameOverride = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *Job) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *Job) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *Job) SetSlug(v string) {
	o.Slug = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Job) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Job) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Job) SetDescription(v string) {
	o.Description = &v
}

// GetDescriptionOverride returns the DescriptionOverride field value if set, zero value otherwise.
func (o *Job) GetDescriptionOverride() bool {
	if o == nil || o.DescriptionOverride == nil {
		var ret bool
		return ret
	}
	return *o.DescriptionOverride
}

// GetDescriptionOverrideOk returns a tuple with the DescriptionOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetDescriptionOverrideOk() (*bool, bool) {
	if o == nil || o.DescriptionOverride == nil {
		return nil, false
	}
	return o.DescriptionOverride, true
}

// HasDescriptionOverride returns a boolean if a field has been set.
func (o *Job) HasDescriptionOverride() bool {
	if o != nil && o.DescriptionOverride != nil {
		return true
	}

	return false
}

// SetDescriptionOverride gets a reference to the given bool and assigns it to the DescriptionOverride field.
func (o *Job) SetDescriptionOverride(v bool) {
	o.DescriptionOverride = &v
}

// GetInstalled returns the Installed field value
func (o *Job) GetInstalled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Installed
}

// GetInstalledOk returns a tuple with the Installed field value
// and a boolean to check if the value has been set.
func (o *Job) GetInstalledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Installed, true
}

// SetInstalled sets field value
func (o *Job) SetInstalled(v bool) {
	o.Installed = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Job) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Job) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Job) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHasSensitiveVariables returns the HasSensitiveVariables field value if set, zero value otherwise.
func (o *Job) GetHasSensitiveVariables() bool {
	if o == nil || o.HasSensitiveVariables == nil {
		var ret bool
		return ret
	}
	return *o.HasSensitiveVariables
}

// GetHasSensitiveVariablesOk returns a tuple with the HasSensitiveVariables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHasSensitiveVariablesOk() (*bool, bool) {
	if o == nil || o.HasSensitiveVariables == nil {
		return nil, false
	}
	return o.HasSensitiveVariables, true
}

// HasHasSensitiveVariables returns a boolean if a field has been set.
func (o *Job) HasHasSensitiveVariables() bool {
	if o != nil && o.HasSensitiveVariables != nil {
		return true
	}

	return false
}

// SetHasSensitiveVariables gets a reference to the given bool and assigns it to the HasSensitiveVariables field.
func (o *Job) SetHasSensitiveVariables(v bool) {
	o.HasSensitiveVariables = &v
}

// GetHasSensitiveVariablesOverride returns the HasSensitiveVariablesOverride field value if set, zero value otherwise.
func (o *Job) GetHasSensitiveVariablesOverride() bool {
	if o == nil || o.HasSensitiveVariablesOverride == nil {
		var ret bool
		return ret
	}
	return *o.HasSensitiveVariablesOverride
}

// GetHasSensitiveVariablesOverrideOk returns a tuple with the HasSensitiveVariablesOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHasSensitiveVariablesOverrideOk() (*bool, bool) {
	if o == nil || o.HasSensitiveVariablesOverride == nil {
		return nil, false
	}
	return o.HasSensitiveVariablesOverride, true
}

// HasHasSensitiveVariablesOverride returns a boolean if a field has been set.
func (o *Job) HasHasSensitiveVariablesOverride() bool {
	if o != nil && o.HasSensitiveVariablesOverride != nil {
		return true
	}

	return false
}

// SetHasSensitiveVariablesOverride gets a reference to the given bool and assigns it to the HasSensitiveVariablesOverride field.
func (o *Job) SetHasSensitiveVariablesOverride(v bool) {
	o.HasSensitiveVariablesOverride = &v
}

// GetApprovalRequired returns the ApprovalRequired field value if set, zero value otherwise.
func (o *Job) GetApprovalRequired() bool {
	if o == nil || o.ApprovalRequired == nil {
		var ret bool
		return ret
	}
	return *o.ApprovalRequired
}

// GetApprovalRequiredOk returns a tuple with the ApprovalRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetApprovalRequiredOk() (*bool, bool) {
	if o == nil || o.ApprovalRequired == nil {
		return nil, false
	}
	return o.ApprovalRequired, true
}

// HasApprovalRequired returns a boolean if a field has been set.
func (o *Job) HasApprovalRequired() bool {
	if o != nil && o.ApprovalRequired != nil {
		return true
	}

	return false
}

// SetApprovalRequired gets a reference to the given bool and assigns it to the ApprovalRequired field.
func (o *Job) SetApprovalRequired(v bool) {
	o.ApprovalRequired = &v
}

// GetApprovalRequiredOverride returns the ApprovalRequiredOverride field value if set, zero value otherwise.
func (o *Job) GetApprovalRequiredOverride() bool {
	if o == nil || o.ApprovalRequiredOverride == nil {
		var ret bool
		return ret
	}
	return *o.ApprovalRequiredOverride
}

// GetApprovalRequiredOverrideOk returns a tuple with the ApprovalRequiredOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetApprovalRequiredOverrideOk() (*bool, bool) {
	if o == nil || o.ApprovalRequiredOverride == nil {
		return nil, false
	}
	return o.ApprovalRequiredOverride, true
}

// HasApprovalRequiredOverride returns a boolean if a field has been set.
func (o *Job) HasApprovalRequiredOverride() bool {
	if o != nil && o.ApprovalRequiredOverride != nil {
		return true
	}

	return false
}

// SetApprovalRequiredOverride gets a reference to the given bool and assigns it to the ApprovalRequiredOverride field.
func (o *Job) SetApprovalRequiredOverride(v bool) {
	o.ApprovalRequiredOverride = &v
}

// GetCommitDefault returns the CommitDefault field value if set, zero value otherwise.
func (o *Job) GetCommitDefault() bool {
	if o == nil || o.CommitDefault == nil {
		var ret bool
		return ret
	}
	return *o.CommitDefault
}

// GetCommitDefaultOk returns a tuple with the CommitDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetCommitDefaultOk() (*bool, bool) {
	if o == nil || o.CommitDefault == nil {
		return nil, false
	}
	return o.CommitDefault, true
}

// HasCommitDefault returns a boolean if a field has been set.
func (o *Job) HasCommitDefault() bool {
	if o != nil && o.CommitDefault != nil {
		return true
	}

	return false
}

// SetCommitDefault gets a reference to the given bool and assigns it to the CommitDefault field.
func (o *Job) SetCommitDefault(v bool) {
	o.CommitDefault = &v
}

// GetCommitDefaultOverride returns the CommitDefaultOverride field value if set, zero value otherwise.
func (o *Job) GetCommitDefaultOverride() bool {
	if o == nil || o.CommitDefaultOverride == nil {
		var ret bool
		return ret
	}
	return *o.CommitDefaultOverride
}

// GetCommitDefaultOverrideOk returns a tuple with the CommitDefaultOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetCommitDefaultOverrideOk() (*bool, bool) {
	if o == nil || o.CommitDefaultOverride == nil {
		return nil, false
	}
	return o.CommitDefaultOverride, true
}

// HasCommitDefaultOverride returns a boolean if a field has been set.
func (o *Job) HasCommitDefaultOverride() bool {
	if o != nil && o.CommitDefaultOverride != nil {
		return true
	}

	return false
}

// SetCommitDefaultOverride gets a reference to the given bool and assigns it to the CommitDefaultOverride field.
func (o *Job) SetCommitDefaultOverride(v bool) {
	o.CommitDefaultOverride = &v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *Job) GetHidden() bool {
	if o == nil || o.Hidden == nil {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHiddenOk() (*bool, bool) {
	if o == nil || o.Hidden == nil {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *Job) HasHidden() bool {
	if o != nil && o.Hidden != nil {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *Job) SetHidden(v bool) {
	o.Hidden = &v
}

// GetHiddenOverride returns the HiddenOverride field value if set, zero value otherwise.
func (o *Job) GetHiddenOverride() bool {
	if o == nil || o.HiddenOverride == nil {
		var ret bool
		return ret
	}
	return *o.HiddenOverride
}

// GetHiddenOverrideOk returns a tuple with the HiddenOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetHiddenOverrideOk() (*bool, bool) {
	if o == nil || o.HiddenOverride == nil {
		return nil, false
	}
	return o.HiddenOverride, true
}

// HasHiddenOverride returns a boolean if a field has been set.
func (o *Job) HasHiddenOverride() bool {
	if o != nil && o.HiddenOverride != nil {
		return true
	}

	return false
}

// SetHiddenOverride gets a reference to the given bool and assigns it to the HiddenOverride field.
func (o *Job) SetHiddenOverride(v bool) {
	o.HiddenOverride = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *Job) GetReadOnly() bool {
	if o == nil || o.ReadOnly == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetReadOnlyOk() (*bool, bool) {
	if o == nil || o.ReadOnly == nil {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *Job) HasReadOnly() bool {
	if o != nil && o.ReadOnly != nil {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *Job) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetReadOnlyOverride returns the ReadOnlyOverride field value if set, zero value otherwise.
func (o *Job) GetReadOnlyOverride() bool {
	if o == nil || o.ReadOnlyOverride == nil {
		var ret bool
		return ret
	}
	return *o.ReadOnlyOverride
}

// GetReadOnlyOverrideOk returns a tuple with the ReadOnlyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetReadOnlyOverrideOk() (*bool, bool) {
	if o == nil || o.ReadOnlyOverride == nil {
		return nil, false
	}
	return o.ReadOnlyOverride, true
}

// HasReadOnlyOverride returns a boolean if a field has been set.
func (o *Job) HasReadOnlyOverride() bool {
	if o != nil && o.ReadOnlyOverride != nil {
		return true
	}

	return false
}

// SetReadOnlyOverride gets a reference to the given bool and assigns it to the ReadOnlyOverride field.
func (o *Job) SetReadOnlyOverride(v bool) {
	o.ReadOnlyOverride = &v
}

// GetSoftTimeLimit returns the SoftTimeLimit field value if set, zero value otherwise.
func (o *Job) GetSoftTimeLimit() float64 {
	if o == nil || o.SoftTimeLimit == nil {
		var ret float64
		return ret
	}
	return *o.SoftTimeLimit
}

// GetSoftTimeLimitOk returns a tuple with the SoftTimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetSoftTimeLimitOk() (*float64, bool) {
	if o == nil || o.SoftTimeLimit == nil {
		return nil, false
	}
	return o.SoftTimeLimit, true
}

// HasSoftTimeLimit returns a boolean if a field has been set.
func (o *Job) HasSoftTimeLimit() bool {
	if o != nil && o.SoftTimeLimit != nil {
		return true
	}

	return false
}

// SetSoftTimeLimit gets a reference to the given float64 and assigns it to the SoftTimeLimit field.
func (o *Job) SetSoftTimeLimit(v float64) {
	o.SoftTimeLimit = &v
}

// GetSoftTimeLimitOverride returns the SoftTimeLimitOverride field value if set, zero value otherwise.
func (o *Job) GetSoftTimeLimitOverride() bool {
	if o == nil || o.SoftTimeLimitOverride == nil {
		var ret bool
		return ret
	}
	return *o.SoftTimeLimitOverride
}

// GetSoftTimeLimitOverrideOk returns a tuple with the SoftTimeLimitOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetSoftTimeLimitOverrideOk() (*bool, bool) {
	if o == nil || o.SoftTimeLimitOverride == nil {
		return nil, false
	}
	return o.SoftTimeLimitOverride, true
}

// HasSoftTimeLimitOverride returns a boolean if a field has been set.
func (o *Job) HasSoftTimeLimitOverride() bool {
	if o != nil && o.SoftTimeLimitOverride != nil {
		return true
	}

	return false
}

// SetSoftTimeLimitOverride gets a reference to the given bool and assigns it to the SoftTimeLimitOverride field.
func (o *Job) SetSoftTimeLimitOverride(v bool) {
	o.SoftTimeLimitOverride = &v
}

// GetTimeLimit returns the TimeLimit field value if set, zero value otherwise.
func (o *Job) GetTimeLimit() float64 {
	if o == nil || o.TimeLimit == nil {
		var ret float64
		return ret
	}
	return *o.TimeLimit
}

// GetTimeLimitOk returns a tuple with the TimeLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTimeLimitOk() (*float64, bool) {
	if o == nil || o.TimeLimit == nil {
		return nil, false
	}
	return o.TimeLimit, true
}

// HasTimeLimit returns a boolean if a field has been set.
func (o *Job) HasTimeLimit() bool {
	if o != nil && o.TimeLimit != nil {
		return true
	}

	return false
}

// SetTimeLimit gets a reference to the given float64 and assigns it to the TimeLimit field.
func (o *Job) SetTimeLimit(v float64) {
	o.TimeLimit = &v
}

// GetTimeLimitOverride returns the TimeLimitOverride field value if set, zero value otherwise.
func (o *Job) GetTimeLimitOverride() bool {
	if o == nil || o.TimeLimitOverride == nil {
		var ret bool
		return ret
	}
	return *o.TimeLimitOverride
}

// GetTimeLimitOverrideOk returns a tuple with the TimeLimitOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTimeLimitOverrideOk() (*bool, bool) {
	if o == nil || o.TimeLimitOverride == nil {
		return nil, false
	}
	return o.TimeLimitOverride, true
}

// HasTimeLimitOverride returns a boolean if a field has been set.
func (o *Job) HasTimeLimitOverride() bool {
	if o != nil && o.TimeLimitOverride != nil {
		return true
	}

	return false
}

// SetTimeLimitOverride gets a reference to the given bool and assigns it to the TimeLimitOverride field.
func (o *Job) SetTimeLimitOverride(v bool) {
	o.TimeLimitOverride = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Job) GetTags() []TagSerializerField {
	if o == nil || o.Tags == nil {
		var ret []TagSerializerField
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetTagsOk() ([]TagSerializerField, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Job) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagSerializerField and assigns it to the Tags field.
func (o *Job) SetTags(v []TagSerializerField) {
	o.Tags = v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *Job) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Job) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *Job) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *Job) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetCreated returns the Created field value
func (o *Job) GetCreated() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *Job) GetCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *Job) SetCreated(v string) {
	o.Created = v
}

// GetLastUpdated returns the LastUpdated field value
func (o *Job) GetLastUpdated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value
// and a boolean to check if the value has been set.
func (o *Job) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastUpdated, true
}

// SetLastUpdated sets field value
func (o *Job) SetLastUpdated(v time.Time) {
	o.LastUpdated = v
}

// GetDisplay returns the Display field value
func (o *Job) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *Job) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *Job) SetDisplay(v string) {
	o.Display = v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if true {
		toSerialize["module_name"] = o.ModuleName
	}
	if true {
		toSerialize["job_class_name"] = o.JobClassName
	}
	if true {
		toSerialize["grouping"] = o.Grouping
	}
	if o.GroupingOverride != nil {
		toSerialize["grouping_override"] = o.GroupingOverride
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.NameOverride != nil {
		toSerialize["name_override"] = o.NameOverride
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DescriptionOverride != nil {
		toSerialize["description_override"] = o.DescriptionOverride
	}
	if true {
		toSerialize["installed"] = o.Installed
	}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.HasSensitiveVariables != nil {
		toSerialize["has_sensitive_variables"] = o.HasSensitiveVariables
	}
	if o.HasSensitiveVariablesOverride != nil {
		toSerialize["has_sensitive_variables_override"] = o.HasSensitiveVariablesOverride
	}
	if o.ApprovalRequired != nil {
		toSerialize["approval_required"] = o.ApprovalRequired
	}
	if o.ApprovalRequiredOverride != nil {
		toSerialize["approval_required_override"] = o.ApprovalRequiredOverride
	}
	if o.CommitDefault != nil {
		toSerialize["commit_default"] = o.CommitDefault
	}
	if o.CommitDefaultOverride != nil {
		toSerialize["commit_default_override"] = o.CommitDefaultOverride
	}
	if o.Hidden != nil {
		toSerialize["hidden"] = o.Hidden
	}
	if o.HiddenOverride != nil {
		toSerialize["hidden_override"] = o.HiddenOverride
	}
	if o.ReadOnly != nil {
		toSerialize["read_only"] = o.ReadOnly
	}
	if o.ReadOnlyOverride != nil {
		toSerialize["read_only_override"] = o.ReadOnlyOverride
	}
	if o.SoftTimeLimit != nil {
		toSerialize["soft_time_limit"] = o.SoftTimeLimit
	}
	if o.SoftTimeLimitOverride != nil {
		toSerialize["soft_time_limit_override"] = o.SoftTimeLimitOverride
	}
	if o.TimeLimit != nil {
		toSerialize["time_limit"] = o.TimeLimit
	}
	if o.TimeLimitOverride != nil {
		toSerialize["time_limit_override"] = o.TimeLimitOverride
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


