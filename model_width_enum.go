/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WidthEnum the model 'WidthEnum'
type WidthEnum int32

// List of WidthEnum
const (
	_10 WidthEnum = 10
	_19 WidthEnum = 19
	_21 WidthEnum = 21
	_23 WidthEnum = 23
)

// All allowed values of WidthEnum enum
var AllowedWidthEnumEnumValues = []WidthEnum{
	10,
	19,
	21,
	23,
}

func (v *WidthEnum) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WidthEnum(value)
	for _, existing := range AllowedWidthEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WidthEnum", value)
}

// NewWidthEnumFromValue returns a pointer to a valid WidthEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWidthEnumFromValue(v int32) (*WidthEnum, error) {
	ev := WidthEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WidthEnum: valid values are %v", v, AllowedWidthEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WidthEnum) IsValid() bool {
	for _, existing := range AllowedWidthEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WidthEnum value
func (v WidthEnum) Ptr() *WidthEnum {
	return &v
}

type NullableWidthEnum struct {
	value *WidthEnum
	isSet bool
}

func (v NullableWidthEnum) Get() *WidthEnum {
	return v.value
}

func (v *NullableWidthEnum) Set(val *WidthEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWidthEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWidthEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWidthEnum(val *WidthEnum) *NullableWidthEnum {
	return &NullableWidthEnum{value: val, isSet: true}
}

func (v NullableWidthEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWidthEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

