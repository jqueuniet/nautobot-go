/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ButtonClassEnum the model 'ButtonClassEnum'
type ButtonClassEnum string

// List of ButtonClassEnum
const (
	//DEFAULT ButtonClassEnum = "default"
	//PRIMARY ButtonClassEnum = "primary"
	//SUCCESS ButtonClassEnum = "success"
	//INFO ButtonClassEnum = "info"
	//WARNING ButtonClassEnum = "warning"
	DANGER ButtonClassEnum = "danger"
	LINK   ButtonClassEnum = "link"
)

// All allowed values of ButtonClassEnum enum
var AllowedButtonClassEnumEnumValues = []ButtonClassEnum{
	"default",
	"primary",
	"success",
	"info",
	"warning",
	"danger",
	"link",
}

func (v *ButtonClassEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ButtonClassEnum(value)
	for _, existing := range AllowedButtonClassEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ButtonClassEnum", value)
}

// NewButtonClassEnumFromValue returns a pointer to a valid ButtonClassEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewButtonClassEnumFromValue(v string) (*ButtonClassEnum, error) {
	ev := ButtonClassEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ButtonClassEnum: valid values are %v", v, AllowedButtonClassEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ButtonClassEnum) IsValid() bool {
	for _, existing := range AllowedButtonClassEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ButtonClassEnum value
func (v ButtonClassEnum) Ptr() *ButtonClassEnum {
	return &v
}

type NullableButtonClassEnum struct {
	value *ButtonClassEnum
	isSet bool
}

func (v NullableButtonClassEnum) Get() *ButtonClassEnum {
	return v.value
}

func (v *NullableButtonClassEnum) Set(val *ButtonClassEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableButtonClassEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableButtonClassEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableButtonClassEnum(val *ButtonClassEnum) *NullableButtonClassEnum {
	return &NullableButtonClassEnum{value: val, isSet: true}
}

func (v NullableButtonClassEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableButtonClassEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
