/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// JobResultSchedule struct for JobResultSchedule
type JobResultSchedule struct {
	Name *string `json:"name,omitempty"`
	StartTime *time.Time `json:"start_time,omitempty"`
	Interval IntervalEnum `json:"interval"`
	// Cronjob syntax string for custom scheduling
	Crontab *string `json:"crontab,omitempty"`
}

// NewJobResultSchedule instantiates a new JobResultSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobResultSchedule(interval IntervalEnum) *JobResultSchedule {
	this := JobResultSchedule{}
	this.Interval = interval
	return &this
}

// NewJobResultScheduleWithDefaults instantiates a new JobResultSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobResultScheduleWithDefaults() *JobResultSchedule {
	this := JobResultSchedule{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JobResultSchedule) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResultSchedule) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JobResultSchedule) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JobResultSchedule) SetName(v string) {
	o.Name = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *JobResultSchedule) GetStartTime() time.Time {
	if o == nil || o.StartTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResultSchedule) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || o.StartTime == nil {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *JobResultSchedule) HasStartTime() bool {
	if o != nil && o.StartTime != nil {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *JobResultSchedule) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetInterval returns the Interval field value
func (o *JobResultSchedule) GetInterval() IntervalEnum {
	if o == nil {
		var ret IntervalEnum
		return ret
	}

	return o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value
// and a boolean to check if the value has been set.
func (o *JobResultSchedule) GetIntervalOk() (*IntervalEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Interval, true
}

// SetInterval sets field value
func (o *JobResultSchedule) SetInterval(v IntervalEnum) {
	o.Interval = v
}

// GetCrontab returns the Crontab field value if set, zero value otherwise.
func (o *JobResultSchedule) GetCrontab() string {
	if o == nil || o.Crontab == nil {
		var ret string
		return ret
	}
	return *o.Crontab
}

// GetCrontabOk returns a tuple with the Crontab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobResultSchedule) GetCrontabOk() (*string, bool) {
	if o == nil || o.Crontab == nil {
		return nil, false
	}
	return o.Crontab, true
}

// HasCrontab returns a boolean if a field has been set.
func (o *JobResultSchedule) HasCrontab() bool {
	if o != nil && o.Crontab != nil {
		return true
	}

	return false
}

// SetCrontab gets a reference to the given string and assigns it to the Crontab field.
func (o *JobResultSchedule) SetCrontab(v string) {
	o.Crontab = &v
}

func (o JobResultSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.StartTime != nil {
		toSerialize["start_time"] = o.StartTime
	}
	if true {
		toSerialize["interval"] = o.Interval
	}
	if o.Crontab != nil {
		toSerialize["crontab"] = o.Crontab
	}
	return json.Marshal(toSerialize)
}

type NullableJobResultSchedule struct {
	value *JobResultSchedule
	isSet bool
}

func (v NullableJobResultSchedule) Get() *JobResultSchedule {
	return v.value
}

func (v *NullableJobResultSchedule) Set(val *JobResultSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableJobResultSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableJobResultSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobResultSchedule(val *JobResultSchedule) *NullableJobResultSchedule {
	return &NullableJobResultSchedule{value: val, isSet: true}
}

func (v NullableJobResultSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobResultSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


