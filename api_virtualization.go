/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// VirtualizationApiService VirtualizationApi service
type VirtualizationApiService service

type ApiVirtualizationClusterGroupsBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
}

func (r ApiVirtualizationClusterGroupsBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsBulkDestroyExecute(r)
}

/*
VirtualizationClusterGroupsBulkDestroy Method for VirtualizationClusterGroupsBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsBulkDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsBulkDestroy(ctx context.Context) ApiVirtualizationClusterGroupsBulkDestroyRequest {
	return ApiVirtualizationClusterGroupsBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationClusterGroupsBulkDestroyExecute(r ApiVirtualizationClusterGroupsBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	patchedClusterGroup *PatchedClusterGroup
}

func (r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) PatchedClusterGroup(patchedClusterGroup PatchedClusterGroup) ApiVirtualizationClusterGroupsBulkPartialUpdateRequest {
	r.patchedClusterGroup = &patchedClusterGroup
	return r
}

func (r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsBulkPartialUpdateExecute(r)
}

/*
VirtualizationClusterGroupsBulkPartialUpdate Method for VirtualizationClusterGroupsBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsBulkPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsBulkPartialUpdate(ctx context.Context) ApiVirtualizationClusterGroupsBulkPartialUpdateRequest {
	return ApiVirtualizationClusterGroupsBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationApiService) VirtualizationClusterGroupsBulkPartialUpdateExecute(r ApiVirtualizationClusterGroupsBulkPartialUpdateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	clusterGroup *ClusterGroup
}

func (r ApiVirtualizationClusterGroupsBulkUpdateRequest) ClusterGroup(clusterGroup ClusterGroup) ApiVirtualizationClusterGroupsBulkUpdateRequest {
	r.clusterGroup = &clusterGroup
	return r
}

func (r ApiVirtualizationClusterGroupsBulkUpdateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsBulkUpdateExecute(r)
}

/*
VirtualizationClusterGroupsBulkUpdate Method for VirtualizationClusterGroupsBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsBulkUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsBulkUpdate(ctx context.Context) ApiVirtualizationClusterGroupsBulkUpdateRequest {
	return ApiVirtualizationClusterGroupsBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationApiService) VirtualizationClusterGroupsBulkUpdateExecute(r ApiVirtualizationClusterGroupsBulkUpdateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterGroup == nil {
		return localVarReturnValue, nil, reportError("clusterGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	clusterGroup *ClusterGroup
}

func (r ApiVirtualizationClusterGroupsCreateRequest) ClusterGroup(clusterGroup ClusterGroup) ApiVirtualizationClusterGroupsCreateRequest {
	r.clusterGroup = &clusterGroup
	return r
}

func (r ApiVirtualizationClusterGroupsCreateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsCreateExecute(r)
}

/*
VirtualizationClusterGroupsCreate Method for VirtualizationClusterGroupsCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsCreateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsCreate(ctx context.Context) ApiVirtualizationClusterGroupsCreateRequest {
	return ApiVirtualizationClusterGroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationApiService) VirtualizationClusterGroupsCreateExecute(r ApiVirtualizationClusterGroupsCreateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterGroup == nil {
		return localVarReturnValue, nil, reportError("clusterGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationClusterGroupsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsDestroyExecute(r)
}

/*
VirtualizationClusterGroupsDestroy Method for VirtualizationClusterGroupsDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsDestroy(ctx context.Context, id string) ApiVirtualizationClusterGroupsDestroyRequest {
	return ApiVirtualizationClusterGroupsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationClusterGroupsDestroyExecute(r ApiVirtualizationClusterGroupsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsListRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiVirtualizationClusterGroupsListRequest) Created(created string) ApiVirtualizationClusterGroupsListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedGte(createdGte string) ApiVirtualizationClusterGroupsListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) CreatedLte(createdLte string) ApiVirtualizationClusterGroupsListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Description(description []string) ApiVirtualizationClusterGroupsListRequest {
	r.description = &description
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIc(descriptionIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIe(descriptionIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIew(descriptionIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIre(descriptionIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionIsw(descriptionIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionN(descriptionN []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNic(descriptionNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNie(descriptionNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNiew(descriptionNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNire(descriptionNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNisw(descriptionNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionNre(descriptionNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) DescriptionRe(descriptionRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Id(id []string) ApiVirtualizationClusterGroupsListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIc(idIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIe(idIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIew(idIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIre(idIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdIsw(idIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdN(idN []string) ApiVirtualizationClusterGroupsListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNic(idNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNie(idNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNiew(idNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNire(idNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNisw(idNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdNre(idNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) IdRe(idRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdated(lastUpdated time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiVirtualizationClusterGroupsListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClusterGroupsListRequest) Limit(limit int32) ApiVirtualizationClusterGroupsListRequest {
	r.limit = &limit
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Name(name []string) ApiVirtualizationClusterGroupsListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIc(nameIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIe(nameIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIew(nameIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIre(nameIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameIsw(nameIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameN(nameN []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNic(nameNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNie(nameNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNiew(nameNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNire(nameNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNisw(nameNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameNre(nameNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) NameRe(nameRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClusterGroupsListRequest) Offset(offset int32) ApiVirtualizationClusterGroupsListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationClusterGroupsListRequest) Q(q string) ApiVirtualizationClusterGroupsListRequest {
	r.q = &q
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Slug(slug []string) ApiVirtualizationClusterGroupsListRequest {
	r.slug = &slug
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugIc(slugIc []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugIe(slugIe []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugIew(slugIew []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugIre(slugIre []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugIsw(slugIsw []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugN(slugN []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugNic(slugNic []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugNie(slugNie []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugNiew(slugNiew []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugNire(slugNire []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugNisw(slugNisw []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugNre(slugNre []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) SlugRe(slugRe []string) ApiVirtualizationClusterGroupsListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiVirtualizationClusterGroupsListRequest) Execute() (*PaginatedClusterGroupList, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsListExecute(r)
}

/*
VirtualizationClusterGroupsList Method for VirtualizationClusterGroupsList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterGroupsListRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsList(ctx context.Context) ApiVirtualizationClusterGroupsListRequest {
	return ApiVirtualizationClusterGroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedClusterGroupList
func (a *VirtualizationApiService) VirtualizationClusterGroupsListExecute(r ApiVirtualizationClusterGroupsListRequest) (*PaginatedClusterGroupList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedClusterGroupList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	patchedClusterGroup *PatchedClusterGroup
}

func (r ApiVirtualizationClusterGroupsPartialUpdateRequest) PatchedClusterGroup(patchedClusterGroup PatchedClusterGroup) ApiVirtualizationClusterGroupsPartialUpdateRequest {
	r.patchedClusterGroup = &patchedClusterGroup
	return r
}

func (r ApiVirtualizationClusterGroupsPartialUpdateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsPartialUpdateExecute(r)
}

/*
VirtualizationClusterGroupsPartialUpdate Method for VirtualizationClusterGroupsPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsPartialUpdate(ctx context.Context, id string) ApiVirtualizationClusterGroupsPartialUpdateRequest {
	return ApiVirtualizationClusterGroupsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationApiService) VirtualizationClusterGroupsPartialUpdateExecute(r ApiVirtualizationClusterGroupsPartialUpdateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationClusterGroupsRetrieveRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsRetrieveExecute(r)
}

/*
VirtualizationClusterGroupsRetrieve Method for VirtualizationClusterGroupsRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsRetrieveRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsRetrieve(ctx context.Context, id string) ApiVirtualizationClusterGroupsRetrieveRequest {
	return ApiVirtualizationClusterGroupsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationApiService) VirtualizationClusterGroupsRetrieveExecute(r ApiVirtualizationClusterGroupsRetrieveRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterGroupsUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	clusterGroup *ClusterGroup
}

func (r ApiVirtualizationClusterGroupsUpdateRequest) ClusterGroup(clusterGroup ClusterGroup) ApiVirtualizationClusterGroupsUpdateRequest {
	r.clusterGroup = &clusterGroup
	return r
}

func (r ApiVirtualizationClusterGroupsUpdateRequest) Execute() (*ClusterGroup, *http.Response, error) {
	return r.ApiService.VirtualizationClusterGroupsUpdateExecute(r)
}

/*
VirtualizationClusterGroupsUpdate Method for VirtualizationClusterGroupsUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster group.
 @return ApiVirtualizationClusterGroupsUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterGroupsUpdate(ctx context.Context, id string) ApiVirtualizationClusterGroupsUpdateRequest {
	return ApiVirtualizationClusterGroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterGroup
func (a *VirtualizationApiService) VirtualizationClusterGroupsUpdateExecute(r ApiVirtualizationClusterGroupsUpdateRequest) (*ClusterGroup, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterGroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterGroup == nil {
		return localVarReturnValue, nil, reportError("clusterGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterGroup
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
}

func (r ApiVirtualizationClusterTypesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesBulkDestroyExecute(r)
}

/*
VirtualizationClusterTypesBulkDestroy Method for VirtualizationClusterTypesBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesBulkDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesBulkDestroy(ctx context.Context) ApiVirtualizationClusterTypesBulkDestroyRequest {
	return ApiVirtualizationClusterTypesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationClusterTypesBulkDestroyExecute(r ApiVirtualizationClusterTypesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	patchedClusterType *PatchedClusterType
}

func (r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) PatchedClusterType(patchedClusterType PatchedClusterType) ApiVirtualizationClusterTypesBulkPartialUpdateRequest {
	r.patchedClusterType = &patchedClusterType
	return r
}

func (r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesBulkPartialUpdateExecute(r)
}

/*
VirtualizationClusterTypesBulkPartialUpdate Method for VirtualizationClusterTypesBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesBulkPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesBulkPartialUpdate(ctx context.Context) ApiVirtualizationClusterTypesBulkPartialUpdateRequest {
	return ApiVirtualizationClusterTypesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationApiService) VirtualizationClusterTypesBulkPartialUpdateExecute(r ApiVirtualizationClusterTypesBulkPartialUpdateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	clusterType *ClusterType
}

func (r ApiVirtualizationClusterTypesBulkUpdateRequest) ClusterType(clusterType ClusterType) ApiVirtualizationClusterTypesBulkUpdateRequest {
	r.clusterType = &clusterType
	return r
}

func (r ApiVirtualizationClusterTypesBulkUpdateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesBulkUpdateExecute(r)
}

/*
VirtualizationClusterTypesBulkUpdate Method for VirtualizationClusterTypesBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesBulkUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesBulkUpdate(ctx context.Context) ApiVirtualizationClusterTypesBulkUpdateRequest {
	return ApiVirtualizationClusterTypesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationApiService) VirtualizationClusterTypesBulkUpdateExecute(r ApiVirtualizationClusterTypesBulkUpdateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterType == nil {
		return localVarReturnValue, nil, reportError("clusterType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	clusterType *ClusterType
}

func (r ApiVirtualizationClusterTypesCreateRequest) ClusterType(clusterType ClusterType) ApiVirtualizationClusterTypesCreateRequest {
	r.clusterType = &clusterType
	return r
}

func (r ApiVirtualizationClusterTypesCreateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesCreateExecute(r)
}

/*
VirtualizationClusterTypesCreate Method for VirtualizationClusterTypesCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesCreateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesCreate(ctx context.Context) ApiVirtualizationClusterTypesCreateRequest {
	return ApiVirtualizationClusterTypesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationApiService) VirtualizationClusterTypesCreateExecute(r ApiVirtualizationClusterTypesCreateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterType == nil {
		return localVarReturnValue, nil, reportError("clusterType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationClusterTypesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesDestroyExecute(r)
}

/*
VirtualizationClusterTypesDestroy Method for VirtualizationClusterTypesDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesDestroy(ctx context.Context, id string) ApiVirtualizationClusterTypesDestroyRequest {
	return ApiVirtualizationClusterTypesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationClusterTypesDestroyExecute(r ApiVirtualizationClusterTypesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	created *string
	createdGte *string
	createdLte *string
	description *[]string
	descriptionIc *[]string
	descriptionIe *[]string
	descriptionIew *[]string
	descriptionIre *[]string
	descriptionIsw *[]string
	descriptionN *[]string
	descriptionNic *[]string
	descriptionNie *[]string
	descriptionNiew *[]string
	descriptionNire *[]string
	descriptionNisw *[]string
	descriptionNre *[]string
	descriptionRe *[]string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	slug *[]string
	slugIc *[]string
	slugIe *[]string
	slugIew *[]string
	slugIre *[]string
	slugIsw *[]string
	slugN *[]string
	slugNic *[]string
	slugNie *[]string
	slugNiew *[]string
	slugNire *[]string
	slugNisw *[]string
	slugNre *[]string
	slugRe *[]string
}

func (r ApiVirtualizationClusterTypesListRequest) Created(created string) ApiVirtualizationClusterTypesListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedGte(createdGte string) ApiVirtualizationClusterTypesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) CreatedLte(createdLte string) ApiVirtualizationClusterTypesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Description(description []string) ApiVirtualizationClusterTypesListRequest {
	r.description = &description
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIc(descriptionIc []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIc = &descriptionIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIe(descriptionIe []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIe = &descriptionIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIew(descriptionIew []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIew = &descriptionIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIre(descriptionIre []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIre = &descriptionIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionIsw(descriptionIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionIsw = &descriptionIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionN(descriptionN []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionN = &descriptionN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNic(descriptionNic []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNic = &descriptionNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNie(descriptionNie []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNie = &descriptionNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNiew(descriptionNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNiew = &descriptionNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNire(descriptionNire []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNire = &descriptionNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNisw(descriptionNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNisw = &descriptionNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionNre(descriptionNre []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionNre = &descriptionNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) DescriptionRe(descriptionRe []string) ApiVirtualizationClusterTypesListRequest {
	r.descriptionRe = &descriptionRe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Id(id []string) ApiVirtualizationClusterTypesListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIc(idIc []string) ApiVirtualizationClusterTypesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIe(idIe []string) ApiVirtualizationClusterTypesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIew(idIew []string) ApiVirtualizationClusterTypesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIre(idIre []string) ApiVirtualizationClusterTypesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdIsw(idIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdN(idN []string) ApiVirtualizationClusterTypesListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNic(idNic []string) ApiVirtualizationClusterTypesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNie(idNie []string) ApiVirtualizationClusterTypesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNiew(idNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNire(idNire []string) ApiVirtualizationClusterTypesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNisw(idNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdNre(idNre []string) ApiVirtualizationClusterTypesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) IdRe(idRe []string) ApiVirtualizationClusterTypesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdated(lastUpdated time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiVirtualizationClusterTypesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClusterTypesListRequest) Limit(limit int32) ApiVirtualizationClusterTypesListRequest {
	r.limit = &limit
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Name(name []string) ApiVirtualizationClusterTypesListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIc(nameIc []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIe(nameIe []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIew(nameIew []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIre(nameIre []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameIsw(nameIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameN(nameN []string) ApiVirtualizationClusterTypesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNic(nameNic []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNie(nameNie []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNiew(nameNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNire(nameNire []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNisw(nameNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameNre(nameNre []string) ApiVirtualizationClusterTypesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) NameRe(nameRe []string) ApiVirtualizationClusterTypesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClusterTypesListRequest) Offset(offset int32) ApiVirtualizationClusterTypesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationClusterTypesListRequest) Q(q string) ApiVirtualizationClusterTypesListRequest {
	r.q = &q
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Slug(slug []string) ApiVirtualizationClusterTypesListRequest {
	r.slug = &slug
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugIc(slugIc []string) ApiVirtualizationClusterTypesListRequest {
	r.slugIc = &slugIc
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugIe(slugIe []string) ApiVirtualizationClusterTypesListRequest {
	r.slugIe = &slugIe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugIew(slugIew []string) ApiVirtualizationClusterTypesListRequest {
	r.slugIew = &slugIew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugIre(slugIre []string) ApiVirtualizationClusterTypesListRequest {
	r.slugIre = &slugIre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugIsw(slugIsw []string) ApiVirtualizationClusterTypesListRequest {
	r.slugIsw = &slugIsw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugN(slugN []string) ApiVirtualizationClusterTypesListRequest {
	r.slugN = &slugN
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugNic(slugNic []string) ApiVirtualizationClusterTypesListRequest {
	r.slugNic = &slugNic
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugNie(slugNie []string) ApiVirtualizationClusterTypesListRequest {
	r.slugNie = &slugNie
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugNiew(slugNiew []string) ApiVirtualizationClusterTypesListRequest {
	r.slugNiew = &slugNiew
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugNire(slugNire []string) ApiVirtualizationClusterTypesListRequest {
	r.slugNire = &slugNire
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugNisw(slugNisw []string) ApiVirtualizationClusterTypesListRequest {
	r.slugNisw = &slugNisw
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugNre(slugNre []string) ApiVirtualizationClusterTypesListRequest {
	r.slugNre = &slugNre
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) SlugRe(slugRe []string) ApiVirtualizationClusterTypesListRequest {
	r.slugRe = &slugRe
	return r
}

func (r ApiVirtualizationClusterTypesListRequest) Execute() (*PaginatedClusterTypeList, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesListExecute(r)
}

/*
VirtualizationClusterTypesList Method for VirtualizationClusterTypesList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClusterTypesListRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesList(ctx context.Context) ApiVirtualizationClusterTypesListRequest {
	return ApiVirtualizationClusterTypesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedClusterTypeList
func (a *VirtualizationApiService) VirtualizationClusterTypesListExecute(r ApiVirtualizationClusterTypesListRequest) (*PaginatedClusterTypeList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedClusterTypeList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.description != nil {
		t := *r.description
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIc != nil {
		t := *r.descriptionIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIe != nil {
		t := *r.descriptionIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIew != nil {
		t := *r.descriptionIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__iew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIre != nil {
		t := *r.descriptionIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__ire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionIsw != nil {
		t := *r.descriptionIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__isw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionN != nil {
		t := *r.descriptionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__n", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNic != nil {
		t := *r.descriptionNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nic", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNie != nil {
		t := *r.descriptionNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nie", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNiew != nil {
		t := *r.descriptionNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__niew", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNire != nil {
		t := *r.descriptionNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nire", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNisw != nil {
		t := *r.descriptionNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nisw", parameterToString(t, "multi"))
		}
	}
	if r.descriptionNre != nil {
		t := *r.descriptionNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__nre", parameterToString(t, "multi"))
		}
	}
	if r.descriptionRe != nil {
		t := *r.descriptionRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("description__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("description__re", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.slug != nil {
		t := *r.slug
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug", parameterToString(t, "multi"))
		}
	}
	if r.slugIc != nil {
		t := *r.slugIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ic", parameterToString(t, "multi"))
		}
	}
	if r.slugIe != nil {
		t := *r.slugIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ie", parameterToString(t, "multi"))
		}
	}
	if r.slugIew != nil {
		t := *r.slugIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__iew", parameterToString(t, "multi"))
		}
	}
	if r.slugIre != nil {
		t := *r.slugIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__ire", parameterToString(t, "multi"))
		}
	}
	if r.slugIsw != nil {
		t := *r.slugIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__isw", parameterToString(t, "multi"))
		}
	}
	if r.slugN != nil {
		t := *r.slugN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__n", parameterToString(t, "multi"))
		}
	}
	if r.slugNic != nil {
		t := *r.slugNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nic", parameterToString(t, "multi"))
		}
	}
	if r.slugNie != nil {
		t := *r.slugNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nie", parameterToString(t, "multi"))
		}
	}
	if r.slugNiew != nil {
		t := *r.slugNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__niew", parameterToString(t, "multi"))
		}
	}
	if r.slugNire != nil {
		t := *r.slugNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nire", parameterToString(t, "multi"))
		}
	}
	if r.slugNisw != nil {
		t := *r.slugNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nisw", parameterToString(t, "multi"))
		}
	}
	if r.slugNre != nil {
		t := *r.slugNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__nre", parameterToString(t, "multi"))
		}
	}
	if r.slugRe != nil {
		t := *r.slugRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("slug__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("slug__re", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	patchedClusterType *PatchedClusterType
}

func (r ApiVirtualizationClusterTypesPartialUpdateRequest) PatchedClusterType(patchedClusterType PatchedClusterType) ApiVirtualizationClusterTypesPartialUpdateRequest {
	r.patchedClusterType = &patchedClusterType
	return r
}

func (r ApiVirtualizationClusterTypesPartialUpdateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesPartialUpdateExecute(r)
}

/*
VirtualizationClusterTypesPartialUpdate Method for VirtualizationClusterTypesPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesPartialUpdate(ctx context.Context, id string) ApiVirtualizationClusterTypesPartialUpdateRequest {
	return ApiVirtualizationClusterTypesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationApiService) VirtualizationClusterTypesPartialUpdateExecute(r ApiVirtualizationClusterTypesPartialUpdateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedClusterType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationClusterTypesRetrieveRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesRetrieveExecute(r)
}

/*
VirtualizationClusterTypesRetrieve Method for VirtualizationClusterTypesRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesRetrieveRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesRetrieve(ctx context.Context, id string) ApiVirtualizationClusterTypesRetrieveRequest {
	return ApiVirtualizationClusterTypesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationApiService) VirtualizationClusterTypesRetrieveExecute(r ApiVirtualizationClusterTypesRetrieveRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClusterTypesUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	clusterType *ClusterType
}

func (r ApiVirtualizationClusterTypesUpdateRequest) ClusterType(clusterType ClusterType) ApiVirtualizationClusterTypesUpdateRequest {
	r.clusterType = &clusterType
	return r
}

func (r ApiVirtualizationClusterTypesUpdateRequest) Execute() (*ClusterType, *http.Response, error) {
	return r.ApiService.VirtualizationClusterTypesUpdateExecute(r)
}

/*
VirtualizationClusterTypesUpdate Method for VirtualizationClusterTypesUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster type.
 @return ApiVirtualizationClusterTypesUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClusterTypesUpdate(ctx context.Context, id string) ApiVirtualizationClusterTypesUpdateRequest {
	return ApiVirtualizationClusterTypesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ClusterType
func (a *VirtualizationApiService) VirtualizationClusterTypesUpdateExecute(r ApiVirtualizationClusterTypesUpdateRequest) (*ClusterType, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ClusterType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClusterTypesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/cluster-types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.clusterType == nil {
		return localVarReturnValue, nil, reportError("clusterType is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.clusterType
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
}

func (r ApiVirtualizationClustersBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClustersBulkDestroyExecute(r)
}

/*
VirtualizationClustersBulkDestroy Method for VirtualizationClustersBulkDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersBulkDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersBulkDestroy(ctx context.Context) ApiVirtualizationClustersBulkDestroyRequest {
	return ApiVirtualizationClustersBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationClustersBulkDestroyExecute(r ApiVirtualizationClustersBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClustersBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	patchedWritableCluster *PatchedWritableCluster
}

func (r ApiVirtualizationClustersBulkPartialUpdateRequest) PatchedWritableCluster(patchedWritableCluster PatchedWritableCluster) ApiVirtualizationClustersBulkPartialUpdateRequest {
	r.patchedWritableCluster = &patchedWritableCluster
	return r
}

func (r ApiVirtualizationClustersBulkPartialUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersBulkPartialUpdateExecute(r)
}

/*
VirtualizationClustersBulkPartialUpdate Method for VirtualizationClustersBulkPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersBulkPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersBulkPartialUpdate(ctx context.Context) ApiVirtualizationClustersBulkPartialUpdateRequest {
	return ApiVirtualizationClustersBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationApiService) VirtualizationClustersBulkPartialUpdateExecute(r ApiVirtualizationClustersBulkPartialUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	writableCluster *WritableCluster
}

func (r ApiVirtualizationClustersBulkUpdateRequest) WritableCluster(writableCluster WritableCluster) ApiVirtualizationClustersBulkUpdateRequest {
	r.writableCluster = &writableCluster
	return r
}

func (r ApiVirtualizationClustersBulkUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersBulkUpdateExecute(r)
}

/*
VirtualizationClustersBulkUpdate Method for VirtualizationClustersBulkUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersBulkUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersBulkUpdate(ctx context.Context) ApiVirtualizationClustersBulkUpdateRequest {
	return ApiVirtualizationClustersBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationApiService) VirtualizationClustersBulkUpdateExecute(r ApiVirtualizationClustersBulkUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCluster == nil {
		return localVarReturnValue, nil, reportError("writableCluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	writableCluster *WritableCluster
}

func (r ApiVirtualizationClustersCreateRequest) WritableCluster(writableCluster WritableCluster) ApiVirtualizationClustersCreateRequest {
	r.writableCluster = &writableCluster
	return r
}

func (r ApiVirtualizationClustersCreateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersCreateExecute(r)
}

/*
VirtualizationClustersCreate Method for VirtualizationClustersCreate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersCreateRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersCreate(ctx context.Context) ApiVirtualizationClustersCreateRequest {
	return ApiVirtualizationClustersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationApiService) VirtualizationClustersCreateExecute(r ApiVirtualizationClustersCreateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCluster == nil {
		return localVarReturnValue, nil, reportError("writableCluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationClustersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationClustersDestroyExecute(r)
}

/*
VirtualizationClustersDestroy Method for VirtualizationClustersDestroy

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersDestroy(ctx context.Context, id string) ApiVirtualizationClustersDestroyRequest {
	return ApiVirtualizationClustersDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationClustersDestroyExecute(r ApiVirtualizationClustersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationClustersListRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	created *string
	createdGte *string
	createdLte *string
	group *[]string
	groupN *[]string
	groupId *[]*string
	groupIdN *[]*string
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	site *[]string
	siteN *[]string
	siteId *[]*string
	siteIdN *[]*string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
	type_ *[]string
	typeN *[]string
	typeId *[]string
	typeIdN *[]string
}

func (r ApiVirtualizationClustersListRequest) Created(created string) ApiVirtualizationClustersListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedGte(createdGte string) ApiVirtualizationClustersListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationClustersListRequest) CreatedLte(createdLte string) ApiVirtualizationClustersListRequest {
	r.createdLte = &createdLte
	return r
}

// Parent group (slug)
func (r ApiVirtualizationClustersListRequest) Group(group []string) ApiVirtualizationClustersListRequest {
	r.group = &group
	return r
}

// Parent group (slug)
func (r ApiVirtualizationClustersListRequest) GroupN(groupN []string) ApiVirtualizationClustersListRequest {
	r.groupN = &groupN
	return r
}

// Parent group (ID)
func (r ApiVirtualizationClustersListRequest) GroupId(groupId []*string) ApiVirtualizationClustersListRequest {
	r.groupId = &groupId
	return r
}

// Parent group (ID)
func (r ApiVirtualizationClustersListRequest) GroupIdN(groupIdN []*string) ApiVirtualizationClustersListRequest {
	r.groupIdN = &groupIdN
	return r
}

func (r ApiVirtualizationClustersListRequest) Id(id []string) ApiVirtualizationClustersListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIc(idIc []string) ApiVirtualizationClustersListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIe(idIe []string) ApiVirtualizationClustersListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIew(idIew []string) ApiVirtualizationClustersListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIre(idIre []string) ApiVirtualizationClustersListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationClustersListRequest) IdIsw(idIsw []string) ApiVirtualizationClustersListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationClustersListRequest) IdN(idN []string) ApiVirtualizationClustersListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNic(idNic []string) ApiVirtualizationClustersListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNie(idNie []string) ApiVirtualizationClustersListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNiew(idNiew []string) ApiVirtualizationClustersListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNire(idNire []string) ApiVirtualizationClustersListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNisw(idNisw []string) ApiVirtualizationClustersListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationClustersListRequest) IdNre(idNre []string) ApiVirtualizationClustersListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationClustersListRequest) IdRe(idRe []string) ApiVirtualizationClustersListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdated(lastUpdated time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationClustersListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiVirtualizationClustersListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationClustersListRequest) Limit(limit int32) ApiVirtualizationClustersListRequest {
	r.limit = &limit
	return r
}

func (r ApiVirtualizationClustersListRequest) Name(name []string) ApiVirtualizationClustersListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIc(nameIc []string) ApiVirtualizationClustersListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIe(nameIe []string) ApiVirtualizationClustersListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIew(nameIew []string) ApiVirtualizationClustersListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIre(nameIre []string) ApiVirtualizationClustersListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationClustersListRequest) NameIsw(nameIsw []string) ApiVirtualizationClustersListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationClustersListRequest) NameN(nameN []string) ApiVirtualizationClustersListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNic(nameNic []string) ApiVirtualizationClustersListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNie(nameNie []string) ApiVirtualizationClustersListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNiew(nameNiew []string) ApiVirtualizationClustersListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNire(nameNire []string) ApiVirtualizationClustersListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNisw(nameNisw []string) ApiVirtualizationClustersListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationClustersListRequest) NameNre(nameNre []string) ApiVirtualizationClustersListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationClustersListRequest) NameRe(nameRe []string) ApiVirtualizationClustersListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationClustersListRequest) Offset(offset int32) ApiVirtualizationClustersListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationClustersListRequest) Q(q string) ApiVirtualizationClustersListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiVirtualizationClustersListRequest) Region(region []string) ApiVirtualizationClustersListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiVirtualizationClustersListRequest) RegionN(regionN []string) ApiVirtualizationClustersListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiVirtualizationClustersListRequest) RegionId(regionId []string) ApiVirtualizationClustersListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiVirtualizationClustersListRequest) RegionIdN(regionIdN []string) ApiVirtualizationClustersListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Site (slug)
func (r ApiVirtualizationClustersListRequest) Site(site []string) ApiVirtualizationClustersListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiVirtualizationClustersListRequest) SiteN(siteN []string) ApiVirtualizationClustersListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiVirtualizationClustersListRequest) SiteId(siteId []*string) ApiVirtualizationClustersListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiVirtualizationClustersListRequest) SiteIdN(siteIdN []*string) ApiVirtualizationClustersListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiVirtualizationClustersListRequest) Tag(tag []string) ApiVirtualizationClustersListRequest {
	r.tag = &tag
	return r
}

func (r ApiVirtualizationClustersListRequest) TagN(tagN []string) ApiVirtualizationClustersListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiVirtualizationClustersListRequest) Tenant(tenant []string) ApiVirtualizationClustersListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiVirtualizationClustersListRequest) TenantN(tenantN []string) ApiVirtualizationClustersListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiVirtualizationClustersListRequest) TenantGroup(tenantGroup []string) ApiVirtualizationClustersListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiVirtualizationClustersListRequest) TenantGroupN(tenantGroupN []string) ApiVirtualizationClustersListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiVirtualizationClustersListRequest) TenantGroupId(tenantGroupId []string) ApiVirtualizationClustersListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiVirtualizationClustersListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiVirtualizationClustersListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiVirtualizationClustersListRequest) TenantId(tenantId []*string) ApiVirtualizationClustersListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiVirtualizationClustersListRequest) TenantIdN(tenantIdN []*string) ApiVirtualizationClustersListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

// Cluster type (slug)
func (r ApiVirtualizationClustersListRequest) Type_(type_ []string) ApiVirtualizationClustersListRequest {
	r.type_ = &type_
	return r
}

// Cluster type (slug)
func (r ApiVirtualizationClustersListRequest) TypeN(typeN []string) ApiVirtualizationClustersListRequest {
	r.typeN = &typeN
	return r
}

// Cluster type (ID)
func (r ApiVirtualizationClustersListRequest) TypeId(typeId []string) ApiVirtualizationClustersListRequest {
	r.typeId = &typeId
	return r
}

// Cluster type (ID)
func (r ApiVirtualizationClustersListRequest) TypeIdN(typeIdN []string) ApiVirtualizationClustersListRequest {
	r.typeIdN = &typeIdN
	return r
}

func (r ApiVirtualizationClustersListRequest) Execute() (*PaginatedClusterList, *http.Response, error) {
	return r.ApiService.VirtualizationClustersListExecute(r)
}

/*
VirtualizationClustersList Method for VirtualizationClustersList

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationClustersListRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersList(ctx context.Context) ApiVirtualizationClustersListRequest {
	return ApiVirtualizationClustersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedClusterList
func (a *VirtualizationApiService) VirtualizationClustersListExecute(r ApiVirtualizationClustersListRequest) (*PaginatedClusterList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedClusterList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.group != nil {
		t := *r.group
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group", parameterToString(t, "multi"))
		}
	}
	if r.groupN != nil {
		t := *r.groupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group__n", parameterToString(t, "multi"))
		}
	}
	if r.groupId != nil {
		t := *r.groupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id", parameterToString(t, "multi"))
		}
	}
	if r.groupIdN != nil {
		t := *r.groupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	if r.type_ != nil {
		t := *r.type_
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type", parameterToString(t, "multi"))
		}
	}
	if r.typeN != nil {
		t := *r.typeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type__n", parameterToString(t, "multi"))
		}
	}
	if r.typeId != nil {
		t := *r.typeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type_id", parameterToString(t, "multi"))
		}
	}
	if r.typeIdN != nil {
		t := *r.typeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("type_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("type_id__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	patchedWritableCluster *PatchedWritableCluster
}

func (r ApiVirtualizationClustersPartialUpdateRequest) PatchedWritableCluster(patchedWritableCluster PatchedWritableCluster) ApiVirtualizationClustersPartialUpdateRequest {
	r.patchedWritableCluster = &patchedWritableCluster
	return r
}

func (r ApiVirtualizationClustersPartialUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersPartialUpdateExecute(r)
}

/*
VirtualizationClustersPartialUpdate Method for VirtualizationClustersPartialUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersPartialUpdate(ctx context.Context, id string) ApiVirtualizationClustersPartialUpdateRequest {
	return ApiVirtualizationClustersPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationApiService) VirtualizationClustersPartialUpdateExecute(r ApiVirtualizationClustersPartialUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationClustersRetrieveRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersRetrieveExecute(r)
}

/*
VirtualizationClustersRetrieve Method for VirtualizationClustersRetrieve

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersRetrieveRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersRetrieve(ctx context.Context, id string) ApiVirtualizationClustersRetrieveRequest {
	return ApiVirtualizationClustersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationApiService) VirtualizationClustersRetrieveExecute(r ApiVirtualizationClustersRetrieveRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationClustersUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	writableCluster *WritableCluster
}

func (r ApiVirtualizationClustersUpdateRequest) WritableCluster(writableCluster WritableCluster) ApiVirtualizationClustersUpdateRequest {
	r.writableCluster = &writableCluster
	return r
}

func (r ApiVirtualizationClustersUpdateRequest) Execute() (*Cluster, *http.Response, error) {
	return r.ApiService.VirtualizationClustersUpdateExecute(r)
}

/*
VirtualizationClustersUpdate Method for VirtualizationClustersUpdate

Include the applicable set of CustomFields in the ModelViewSet context.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this cluster.
 @return ApiVirtualizationClustersUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationClustersUpdate(ctx context.Context, id string) ApiVirtualizationClustersUpdateRequest {
	return ApiVirtualizationClustersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return Cluster
func (a *VirtualizationApiService) VirtualizationClustersUpdateExecute(r ApiVirtualizationClustersUpdateRequest) (*Cluster, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Cluster
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationClustersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/clusters/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableCluster == nil {
		return localVarReturnValue, nil, reportError("writableCluster is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableCluster
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
}

func (r ApiVirtualizationInterfacesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationInterfacesBulkDestroyExecute(r)
}

/*
VirtualizationInterfacesBulkDestroy Method for VirtualizationInterfacesBulkDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesBulkDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesBulkDestroy(ctx context.Context) ApiVirtualizationInterfacesBulkDestroyRequest {
	return ApiVirtualizationInterfacesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationInterfacesBulkDestroyExecute(r ApiVirtualizationInterfacesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	patchedWritableVMInterface *PatchedWritableVMInterface
}

func (r ApiVirtualizationInterfacesBulkPartialUpdateRequest) PatchedWritableVMInterface(patchedWritableVMInterface PatchedWritableVMInterface) ApiVirtualizationInterfacesBulkPartialUpdateRequest {
	r.patchedWritableVMInterface = &patchedWritableVMInterface
	return r
}

func (r ApiVirtualizationInterfacesBulkPartialUpdateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesBulkPartialUpdateExecute(r)
}

/*
VirtualizationInterfacesBulkPartialUpdate Method for VirtualizationInterfacesBulkPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesBulkPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesBulkPartialUpdate(ctx context.Context) ApiVirtualizationInterfacesBulkPartialUpdateRequest {
	return ApiVirtualizationInterfacesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationApiService) VirtualizationInterfacesBulkPartialUpdateExecute(r ApiVirtualizationInterfacesBulkPartialUpdateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVMInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	writableVMInterface *WritableVMInterface
}

func (r ApiVirtualizationInterfacesBulkUpdateRequest) WritableVMInterface(writableVMInterface WritableVMInterface) ApiVirtualizationInterfacesBulkUpdateRequest {
	r.writableVMInterface = &writableVMInterface
	return r
}

func (r ApiVirtualizationInterfacesBulkUpdateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesBulkUpdateExecute(r)
}

/*
VirtualizationInterfacesBulkUpdate Method for VirtualizationInterfacesBulkUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesBulkUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesBulkUpdate(ctx context.Context) ApiVirtualizationInterfacesBulkUpdateRequest {
	return ApiVirtualizationInterfacesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationApiService) VirtualizationInterfacesBulkUpdateExecute(r ApiVirtualizationInterfacesBulkUpdateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVMInterface == nil {
		return localVarReturnValue, nil, reportError("writableVMInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVMInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	writableVMInterface *WritableVMInterface
}

func (r ApiVirtualizationInterfacesCreateRequest) WritableVMInterface(writableVMInterface WritableVMInterface) ApiVirtualizationInterfacesCreateRequest {
	r.writableVMInterface = &writableVMInterface
	return r
}

func (r ApiVirtualizationInterfacesCreateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesCreateExecute(r)
}

/*
VirtualizationInterfacesCreate Method for VirtualizationInterfacesCreate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesCreateRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesCreate(ctx context.Context) ApiVirtualizationInterfacesCreateRequest {
	return ApiVirtualizationInterfacesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationApiService) VirtualizationInterfacesCreateExecute(r ApiVirtualizationInterfacesCreateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVMInterface == nil {
		return localVarReturnValue, nil, reportError("writableVMInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVMInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationInterfacesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationInterfacesDestroyExecute(r)
}

/*
VirtualizationInterfacesDestroy Method for VirtualizationInterfacesDestroy

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesDestroy(ctx context.Context, id string) ApiVirtualizationInterfacesDestroyRequest {
	return ApiVirtualizationInterfacesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationInterfacesDestroyExecute(r ApiVirtualizationInterfacesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	cluster *[]string
	clusterN *[]string
	clusterId *[]string
	clusterIdN *[]string
	enabled *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	limit *int32
	macAddress *[]*string
	macAddressIc *[]*string
	macAddressIe *[]*string
	macAddressIew *[]*string
	macAddressIre *[]*string
	macAddressIsw *[]*string
	macAddressN *[]*string
	macAddressNic *[]*string
	macAddressNie *[]*string
	macAddressNiew *[]*string
	macAddressNire *[]*string
	macAddressNisw *[]*string
	macAddressNre *[]*string
	macAddressRe *[]*string
	mtu *[]int32
	mtuGt *[]int32
	mtuGte *[]int32
	mtuLt *[]int32
	mtuLte *[]int32
	mtuN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	q *string
	tag *[]string
	tagN *[]string
	virtualMachine *[]string
	virtualMachineN *[]string
	virtualMachineId *[]string
	virtualMachineIdN *[]string
}

// Cluster
func (r ApiVirtualizationInterfacesListRequest) Cluster(cluster []string) ApiVirtualizationInterfacesListRequest {
	r.cluster = &cluster
	return r
}

// Cluster
func (r ApiVirtualizationInterfacesListRequest) ClusterN(clusterN []string) ApiVirtualizationInterfacesListRequest {
	r.clusterN = &clusterN
	return r
}

// Cluster (ID)
func (r ApiVirtualizationInterfacesListRequest) ClusterId(clusterId []string) ApiVirtualizationInterfacesListRequest {
	r.clusterId = &clusterId
	return r
}

// Cluster (ID)
func (r ApiVirtualizationInterfacesListRequest) ClusterIdN(clusterIdN []string) ApiVirtualizationInterfacesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Enabled(enabled bool) ApiVirtualizationInterfacesListRequest {
	r.enabled = &enabled
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Id(id []string) ApiVirtualizationInterfacesListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIc(idIc []string) ApiVirtualizationInterfacesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIe(idIe []string) ApiVirtualizationInterfacesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIew(idIew []string) ApiVirtualizationInterfacesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIre(idIre []string) ApiVirtualizationInterfacesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdIsw(idIsw []string) ApiVirtualizationInterfacesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdN(idN []string) ApiVirtualizationInterfacesListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNic(idNic []string) ApiVirtualizationInterfacesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNie(idNie []string) ApiVirtualizationInterfacesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNiew(idNiew []string) ApiVirtualizationInterfacesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNire(idNire []string) ApiVirtualizationInterfacesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNisw(idNisw []string) ApiVirtualizationInterfacesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdNre(idNre []string) ApiVirtualizationInterfacesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) IdRe(idRe []string) ApiVirtualizationInterfacesListRequest {
	r.idRe = &idRe
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationInterfacesListRequest) Limit(limit int32) ApiVirtualizationInterfacesListRequest {
	r.limit = &limit
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddress(macAddress []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddress = &macAddress
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIc(macAddressIc []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIe(macAddressIe []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIew(macAddressIew []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIre(macAddressIre []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIre = &macAddressIre
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressIsw(macAddressIsw []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressN(macAddressN []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressN = &macAddressN
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNic(macAddressNic []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNie(macAddressNie []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNiew(macAddressNiew []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNire(macAddressNire []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNire = &macAddressNire
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNisw(macAddressNisw []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressNre(macAddressNre []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressNre = &macAddressNre
	return r
}

// MAC address
func (r ApiVirtualizationInterfacesListRequest) MacAddressRe(macAddressRe []*string) ApiVirtualizationInterfacesListRequest {
	r.macAddressRe = &macAddressRe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Mtu(mtu []int32) ApiVirtualizationInterfacesListRequest {
	r.mtu = &mtu
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuGt(mtuGt []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuGt = &mtuGt
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuGte(mtuGte []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuGte = &mtuGte
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuLt(mtuLt []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuLt = &mtuLt
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuLte(mtuLte []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuLte = &mtuLte
	return r
}

func (r ApiVirtualizationInterfacesListRequest) MtuN(mtuN []int32) ApiVirtualizationInterfacesListRequest {
	r.mtuN = &mtuN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Name(name []string) ApiVirtualizationInterfacesListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIc(nameIc []string) ApiVirtualizationInterfacesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIe(nameIe []string) ApiVirtualizationInterfacesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIew(nameIew []string) ApiVirtualizationInterfacesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIre(nameIre []string) ApiVirtualizationInterfacesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameIsw(nameIsw []string) ApiVirtualizationInterfacesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameN(nameN []string) ApiVirtualizationInterfacesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNic(nameNic []string) ApiVirtualizationInterfacesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNie(nameNie []string) ApiVirtualizationInterfacesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNiew(nameNiew []string) ApiVirtualizationInterfacesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNire(nameNire []string) ApiVirtualizationInterfacesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNisw(nameNisw []string) ApiVirtualizationInterfacesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameNre(nameNre []string) ApiVirtualizationInterfacesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationInterfacesListRequest) NameRe(nameRe []string) ApiVirtualizationInterfacesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationInterfacesListRequest) Offset(offset int32) ApiVirtualizationInterfacesListRequest {
	r.offset = &offset
	return r
}

// Search
func (r ApiVirtualizationInterfacesListRequest) Q(q string) ApiVirtualizationInterfacesListRequest {
	r.q = &q
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Tag(tag []string) ApiVirtualizationInterfacesListRequest {
	r.tag = &tag
	return r
}

func (r ApiVirtualizationInterfacesListRequest) TagN(tagN []string) ApiVirtualizationInterfacesListRequest {
	r.tagN = &tagN
	return r
}

// Virtual machine
func (r ApiVirtualizationInterfacesListRequest) VirtualMachine(virtualMachine []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachine = &virtualMachine
	return r
}

// Virtual machine
func (r ApiVirtualizationInterfacesListRequest) VirtualMachineN(virtualMachineN []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachineN = &virtualMachineN
	return r
}

// Virtual machine (ID)
func (r ApiVirtualizationInterfacesListRequest) VirtualMachineId(virtualMachineId []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachineId = &virtualMachineId
	return r
}

// Virtual machine (ID)
func (r ApiVirtualizationInterfacesListRequest) VirtualMachineIdN(virtualMachineIdN []string) ApiVirtualizationInterfacesListRequest {
	r.virtualMachineIdN = &virtualMachineIdN
	return r
}

func (r ApiVirtualizationInterfacesListRequest) Execute() (*PaginatedVMInterfaceList, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesListExecute(r)
}

/*
VirtualizationInterfacesList Method for VirtualizationInterfacesList

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationInterfacesListRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesList(ctx context.Context) ApiVirtualizationInterfacesListRequest {
	return ApiVirtualizationInterfacesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedVMInterfaceList
func (a *VirtualizationApiService) VirtualizationInterfacesListExecute(r ApiVirtualizationInterfacesListRequest) (*PaginatedVMInterfaceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedVMInterfaceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cluster != nil {
		t := *r.cluster
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster", parameterToString(t, "multi"))
		}
	}
	if r.clusterN != nil {
		t := *r.clusterN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id__n", parameterToString(t, "multi"))
		}
	}
	if r.enabled != nil {
		localVarQueryParams.Add("enabled", parameterToString(*r.enabled, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__iew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIre != nil {
		t := *r.macAddressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__isw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__n", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__niew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNire != nil {
		t := *r.macAddressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nisw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNre != nil {
		t := *r.macAddressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nre", parameterToString(t, "multi"))
		}
	}
	if r.macAddressRe != nil {
		t := *r.macAddressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__re", parameterToString(t, "multi"))
		}
	}
	if r.mtu != nil {
		t := *r.mtu
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu", parameterToString(t, "multi"))
		}
	}
	if r.mtuGt != nil {
		t := *r.mtuGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__gt", parameterToString(t, "multi"))
		}
	}
	if r.mtuGte != nil {
		t := *r.mtuGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__gte", parameterToString(t, "multi"))
		}
	}
	if r.mtuLt != nil {
		t := *r.mtuLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__lt", parameterToString(t, "multi"))
		}
	}
	if r.mtuLte != nil {
		t := *r.mtuLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__lte", parameterToString(t, "multi"))
		}
	}
	if r.mtuN != nil {
		t := *r.mtuN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mtu__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mtu__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.virtualMachine != nil {
		t := *r.virtualMachine
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("virtual_machine", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("virtual_machine", parameterToString(t, "multi"))
		}
	}
	if r.virtualMachineN != nil {
		t := *r.virtualMachineN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("virtual_machine__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("virtual_machine__n", parameterToString(t, "multi"))
		}
	}
	if r.virtualMachineId != nil {
		t := *r.virtualMachineId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("virtual_machine_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("virtual_machine_id", parameterToString(t, "multi"))
		}
	}
	if r.virtualMachineIdN != nil {
		t := *r.virtualMachineIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("virtual_machine_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("virtual_machine_id__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	patchedWritableVMInterface *PatchedWritableVMInterface
}

func (r ApiVirtualizationInterfacesPartialUpdateRequest) PatchedWritableVMInterface(patchedWritableVMInterface PatchedWritableVMInterface) ApiVirtualizationInterfacesPartialUpdateRequest {
	r.patchedWritableVMInterface = &patchedWritableVMInterface
	return r
}

func (r ApiVirtualizationInterfacesPartialUpdateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesPartialUpdateExecute(r)
}

/*
VirtualizationInterfacesPartialUpdate Method for VirtualizationInterfacesPartialUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesPartialUpdate(ctx context.Context, id string) ApiVirtualizationInterfacesPartialUpdateRequest {
	return ApiVirtualizationInterfacesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationApiService) VirtualizationInterfacesPartialUpdateExecute(r ApiVirtualizationInterfacesPartialUpdateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVMInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationInterfacesRetrieveRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesRetrieveExecute(r)
}

/*
VirtualizationInterfacesRetrieve Method for VirtualizationInterfacesRetrieve

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesRetrieveRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesRetrieve(ctx context.Context, id string) ApiVirtualizationInterfacesRetrieveRequest {
	return ApiVirtualizationInterfacesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationApiService) VirtualizationInterfacesRetrieveExecute(r ApiVirtualizationInterfacesRetrieveRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationInterfacesUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	writableVMInterface *WritableVMInterface
}

func (r ApiVirtualizationInterfacesUpdateRequest) WritableVMInterface(writableVMInterface WritableVMInterface) ApiVirtualizationInterfacesUpdateRequest {
	r.writableVMInterface = &writableVMInterface
	return r
}

func (r ApiVirtualizationInterfacesUpdateRequest) Execute() (*VMInterface, *http.Response, error) {
	return r.ApiService.VirtualizationInterfacesUpdateExecute(r)
}

/*
VirtualizationInterfacesUpdate Method for VirtualizationInterfacesUpdate

Extend DRF's ModelViewSet to support bulk update and delete functions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this VM interface.
 @return ApiVirtualizationInterfacesUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationInterfacesUpdate(ctx context.Context, id string) ApiVirtualizationInterfacesUpdateRequest {
	return ApiVirtualizationInterfacesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VMInterface
func (a *VirtualizationApiService) VirtualizationInterfacesUpdateExecute(r ApiVirtualizationInterfacesUpdateRequest) (*VMInterface, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VMInterface
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationInterfacesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/interfaces/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVMInterface == nil {
		return localVarReturnValue, nil, reportError("writableVMInterface is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVMInterface
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesBulkDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
}

func (r ApiVirtualizationVirtualMachinesBulkDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesBulkDestroyExecute(r)
}

/*
VirtualizationVirtualMachinesBulkDestroy Method for VirtualizationVirtualMachinesBulkDestroy

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesBulkDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesBulkDestroy(ctx context.Context) ApiVirtualizationVirtualMachinesBulkDestroyRequest {
	return ApiVirtualizationVirtualMachinesBulkDestroyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationVirtualMachinesBulkDestroyExecute(r ApiVirtualizationVirtualMachinesBulkDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesBulkDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	patchedWritableVirtualMachineWithConfigContext *PatchedWritableVirtualMachineWithConfigContext
}

func (r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) PatchedWritableVirtualMachineWithConfigContext(patchedWritableVirtualMachineWithConfigContext PatchedWritableVirtualMachineWithConfigContext) ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest {
	r.patchedWritableVirtualMachineWithConfigContext = &patchedWritableVirtualMachineWithConfigContext
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) Execute() (*VirtualMachineWithConfigContext, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesBulkPartialUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesBulkPartialUpdate Method for VirtualizationVirtualMachinesBulkPartialUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesBulkPartialUpdate(ctx context.Context) ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest {
	return ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualMachineWithConfigContext
func (a *VirtualizationApiService) VirtualizationVirtualMachinesBulkPartialUpdateExecute(r ApiVirtualizationVirtualMachinesBulkPartialUpdateRequest) (*VirtualMachineWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachineWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesBulkPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVirtualMachineWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesBulkUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	writableVirtualMachineWithConfigContext *WritableVirtualMachineWithConfigContext
}

func (r ApiVirtualizationVirtualMachinesBulkUpdateRequest) WritableVirtualMachineWithConfigContext(writableVirtualMachineWithConfigContext WritableVirtualMachineWithConfigContext) ApiVirtualizationVirtualMachinesBulkUpdateRequest {
	r.writableVirtualMachineWithConfigContext = &writableVirtualMachineWithConfigContext
	return r
}

func (r ApiVirtualizationVirtualMachinesBulkUpdateRequest) Execute() (*VirtualMachineWithConfigContext, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesBulkUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesBulkUpdate Method for VirtualizationVirtualMachinesBulkUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesBulkUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesBulkUpdate(ctx context.Context) ApiVirtualizationVirtualMachinesBulkUpdateRequest {
	return ApiVirtualizationVirtualMachinesBulkUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualMachineWithConfigContext
func (a *VirtualizationApiService) VirtualizationVirtualMachinesBulkUpdateExecute(r ApiVirtualizationVirtualMachinesBulkUpdateRequest) (*VirtualMachineWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachineWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesBulkUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualMachineWithConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableVirtualMachineWithConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualMachineWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesCreateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	writableVirtualMachineWithConfigContext *WritableVirtualMachineWithConfigContext
}

func (r ApiVirtualizationVirtualMachinesCreateRequest) WritableVirtualMachineWithConfigContext(writableVirtualMachineWithConfigContext WritableVirtualMachineWithConfigContext) ApiVirtualizationVirtualMachinesCreateRequest {
	r.writableVirtualMachineWithConfigContext = &writableVirtualMachineWithConfigContext
	return r
}

func (r ApiVirtualizationVirtualMachinesCreateRequest) Execute() (*VirtualMachineWithConfigContext, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesCreateExecute(r)
}

/*
VirtualizationVirtualMachinesCreate Method for VirtualizationVirtualMachinesCreate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesCreateRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesCreate(ctx context.Context) ApiVirtualizationVirtualMachinesCreateRequest {
	return ApiVirtualizationVirtualMachinesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return VirtualMachineWithConfigContext
func (a *VirtualizationApiService) VirtualizationVirtualMachinesCreateExecute(r ApiVirtualizationVirtualMachinesCreateRequest) (*VirtualMachineWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachineWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualMachineWithConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableVirtualMachineWithConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualMachineWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesDestroyRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationVirtualMachinesDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesDestroyExecute(r)
}

/*
VirtualizationVirtualMachinesDestroy Method for VirtualizationVirtualMachinesDestroy

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesDestroyRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesDestroy(ctx context.Context, id string) ApiVirtualizationVirtualMachinesDestroyRequest {
	return ApiVirtualizationVirtualMachinesDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *VirtualizationApiService) VirtualizationVirtualMachinesDestroyExecute(r ApiVirtualizationVirtualMachinesDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesListRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	cluster *string
	clusterN *string
	clusterGroup *[]string
	clusterGroupN *[]string
	clusterGroupId *[]string
	clusterGroupIdN *[]string
	clusterId *[]string
	clusterIdN *[]string
	clusterType *[]string
	clusterTypeN *[]string
	clusterTypeId *[]string
	clusterTypeIdN *[]string
	created *string
	createdGte *string
	createdLte *string
	disk *[]int32
	diskGt *[]int32
	diskGte *[]int32
	diskLt *[]int32
	diskLte *[]int32
	diskN *[]int32
	hasPrimaryIp *bool
	id *[]string
	idIc *[]string
	idIe *[]string
	idIew *[]string
	idIre *[]string
	idIsw *[]string
	idN *[]string
	idNic *[]string
	idNie *[]string
	idNiew *[]string
	idNire *[]string
	idNisw *[]string
	idNre *[]string
	idRe *[]string
	lastUpdated *time.Time
	lastUpdatedGte *time.Time
	lastUpdatedLte *time.Time
	limit *int32
	localContextData *bool
	localContextSchema *[]string
	localContextSchemaN *[]string
	localContextSchemaId *[]*string
	localContextSchemaIdN *[]*string
	macAddress *[]*string
	macAddressIc *[]*string
	macAddressIe *[]*string
	macAddressIew *[]*string
	macAddressIre *[]*string
	macAddressIsw *[]*string
	macAddressN *[]*string
	macAddressNic *[]*string
	macAddressNie *[]*string
	macAddressNiew *[]*string
	macAddressNire *[]*string
	macAddressNisw *[]*string
	macAddressNre *[]*string
	macAddressRe *[]*string
	memory *[]int32
	memoryGt *[]int32
	memoryGte *[]int32
	memoryLt *[]int32
	memoryLte *[]int32
	memoryN *[]int32
	name *[]string
	nameIc *[]string
	nameIe *[]string
	nameIew *[]string
	nameIre *[]string
	nameIsw *[]string
	nameN *[]string
	nameNic *[]string
	nameNie *[]string
	nameNiew *[]string
	nameNire *[]string
	nameNisw *[]string
	nameNre *[]string
	nameRe *[]string
	offset *int32
	platform *[]string
	platformN *[]string
	platformId *[]*string
	platformIdN *[]*string
	q *string
	region *[]string
	regionN *[]string
	regionId *[]string
	regionIdN *[]string
	role *[]string
	roleN *[]string
	roleId *[]*string
	roleIdN *[]*string
	site *[]string
	siteN *[]string
	siteId *[]string
	siteIdN *[]string
	status *[]string
	statusN *[]string
	tag *[]string
	tagN *[]string
	tenant *[]string
	tenantN *[]string
	tenantGroup *[]string
	tenantGroupN *[]string
	tenantGroupId *[]string
	tenantGroupIdN *[]string
	tenantId *[]*string
	tenantIdN *[]*string
	vcpus *[]int32
	vcpusGt *[]int32
	vcpusGte *[]int32
	vcpusLt *[]int32
	vcpusLte *[]int32
	vcpusN *[]int32
}

func (r ApiVirtualizationVirtualMachinesListRequest) Cluster(cluster string) ApiVirtualizationVirtualMachinesListRequest {
	r.cluster = &cluster
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) ClusterN(clusterN string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterN = &clusterN
	return r
}

// Cluster group (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroup(clusterGroup []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroup = &clusterGroup
	return r
}

// Cluster group (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupN(clusterGroupN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupN = &clusterGroupN
	return r
}

// Cluster group (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupId(clusterGroupId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupId = &clusterGroupId
	return r
}

// Cluster group (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterGroupIdN(clusterGroupIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterGroupIdN = &clusterGroupIdN
	return r
}

// Cluster (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterId(clusterId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterId = &clusterId
	return r
}

// Cluster (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterIdN(clusterIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterIdN = &clusterIdN
	return r
}

// Cluster type (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterType(clusterType []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterType = &clusterType
	return r
}

// Cluster type (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterTypeN(clusterTypeN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterTypeN = &clusterTypeN
	return r
}

// Cluster type (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterTypeId(clusterTypeId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterTypeId = &clusterTypeId
	return r
}

// Cluster type (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) ClusterTypeIdN(clusterTypeIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.clusterTypeIdN = &clusterTypeIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Created(created string) ApiVirtualizationVirtualMachinesListRequest {
	r.created = &created
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedGte(createdGte string) ApiVirtualizationVirtualMachinesListRequest {
	r.createdGte = &createdGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) CreatedLte(createdLte string) ApiVirtualizationVirtualMachinesListRequest {
	r.createdLte = &createdLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Disk(disk []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.disk = &disk
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskGt(diskGt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskGt = &diskGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskGte(diskGte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskGte = &diskGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskLt(diskLt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskLt = &diskLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskLte(diskLte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskLte = &diskLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) DiskN(diskN []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.diskN = &diskN
	return r
}

// Has a primary IP
func (r ApiVirtualizationVirtualMachinesListRequest) HasPrimaryIp(hasPrimaryIp bool) ApiVirtualizationVirtualMachinesListRequest {
	r.hasPrimaryIp = &hasPrimaryIp
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Id(id []string) ApiVirtualizationVirtualMachinesListRequest {
	r.id = &id
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIc(idIc []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIc = &idIc
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIe(idIe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIe = &idIe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIew(idIew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIew = &idIew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIre(idIre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIre = &idIre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdIsw(idIsw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idIsw = &idIsw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdN(idN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idN = &idN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNic(idNic []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNic = &idNic
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNie(idNie []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNie = &idNie
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNiew(idNiew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNiew = &idNiew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNire(idNire []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNire = &idNire
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNisw(idNisw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNisw = &idNisw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdNre(idNre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idNre = &idNre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) IdRe(idRe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.idRe = &idRe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdated(lastUpdated time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdated = &lastUpdated
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedGte(lastUpdatedGte time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedGte = &lastUpdatedGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) LastUpdatedLte(lastUpdatedLte time.Time) ApiVirtualizationVirtualMachinesListRequest {
	r.lastUpdatedLte = &lastUpdatedLte
	return r
}

// Number of results to return per page.
func (r ApiVirtualizationVirtualMachinesListRequest) Limit(limit int32) ApiVirtualizationVirtualMachinesListRequest {
	r.limit = &limit
	return r
}

// Has local config context data
func (r ApiVirtualizationVirtualMachinesListRequest) LocalContextData(localContextData bool) ApiVirtualizationVirtualMachinesListRequest {
	r.localContextData = &localContextData
	return r
}

// Schema (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) LocalContextSchema(localContextSchema []string) ApiVirtualizationVirtualMachinesListRequest {
	r.localContextSchema = &localContextSchema
	return r
}

// Schema (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) LocalContextSchemaN(localContextSchemaN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.localContextSchemaN = &localContextSchemaN
	return r
}

// Schema (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) LocalContextSchemaId(localContextSchemaId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.localContextSchemaId = &localContextSchemaId
	return r
}

// Schema (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) LocalContextSchemaIdN(localContextSchemaIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.localContextSchemaIdN = &localContextSchemaIdN
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddress(macAddress []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddress = &macAddress
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIc(macAddressIc []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIc = &macAddressIc
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIe(macAddressIe []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIe = &macAddressIe
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIew(macAddressIew []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIew = &macAddressIew
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIre(macAddressIre []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIre = &macAddressIre
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressIsw(macAddressIsw []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressIsw = &macAddressIsw
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressN(macAddressN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressN = &macAddressN
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNic(macAddressNic []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNic = &macAddressNic
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNie(macAddressNie []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNie = &macAddressNie
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNiew(macAddressNiew []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNiew = &macAddressNiew
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNire(macAddressNire []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNire = &macAddressNire
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNisw(macAddressNisw []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNisw = &macAddressNisw
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressNre(macAddressNre []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressNre = &macAddressNre
	return r
}

// MAC address
func (r ApiVirtualizationVirtualMachinesListRequest) MacAddressRe(macAddressRe []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.macAddressRe = &macAddressRe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Memory(memory []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memory = &memory
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryGt(memoryGt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryGt = &memoryGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryGte(memoryGte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryGte = &memoryGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryLt(memoryLt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryLt = &memoryLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryLte(memoryLte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryLte = &memoryLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) MemoryN(memoryN []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.memoryN = &memoryN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Name(name []string) ApiVirtualizationVirtualMachinesListRequest {
	r.name = &name
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIc(nameIc []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIc = &nameIc
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIe(nameIe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIe = &nameIe
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIew(nameIew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIew = &nameIew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIre(nameIre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIre = &nameIre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameIsw(nameIsw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameIsw = &nameIsw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameN(nameN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameN = &nameN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNic(nameNic []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNic = &nameNic
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNie(nameNie []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNie = &nameNie
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNiew(nameNiew []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNiew = &nameNiew
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNire(nameNire []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNire = &nameNire
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNisw(nameNisw []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNisw = &nameNisw
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameNre(nameNre []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameNre = &nameNre
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) NameRe(nameRe []string) ApiVirtualizationVirtualMachinesListRequest {
	r.nameRe = &nameRe
	return r
}

// The initial index from which to return the results.
func (r ApiVirtualizationVirtualMachinesListRequest) Offset(offset int32) ApiVirtualizationVirtualMachinesListRequest {
	r.offset = &offset
	return r
}

// Platform (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) Platform(platform []string) ApiVirtualizationVirtualMachinesListRequest {
	r.platform = &platform
	return r
}

// Platform (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) PlatformN(platformN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.platformN = &platformN
	return r
}

// Platform (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) PlatformId(platformId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.platformId = &platformId
	return r
}

// Platform (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) PlatformIdN(platformIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.platformIdN = &platformIdN
	return r
}

// Search
func (r ApiVirtualizationVirtualMachinesListRequest) Q(q string) ApiVirtualizationVirtualMachinesListRequest {
	r.q = &q
	return r
}

// Region (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) Region(region []string) ApiVirtualizationVirtualMachinesListRequest {
	r.region = &region
	return r
}

// Region (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) RegionN(regionN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.regionN = &regionN
	return r
}

// Region (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) RegionId(regionId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.regionId = &regionId
	return r
}

// Region (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) RegionIdN(regionIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.regionIdN = &regionIdN
	return r
}

// Role (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) Role(role []string) ApiVirtualizationVirtualMachinesListRequest {
	r.role = &role
	return r
}

// Role (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) RoleN(roleN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.roleN = &roleN
	return r
}

// Role (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) RoleId(roleId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.roleId = &roleId
	return r
}

// Role (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) RoleIdN(roleIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.roleIdN = &roleIdN
	return r
}

// Site (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) Site(site []string) ApiVirtualizationVirtualMachinesListRequest {
	r.site = &site
	return r
}

// Site (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) SiteN(siteN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.siteN = &siteN
	return r
}

// Site (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) SiteId(siteId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.siteId = &siteId
	return r
}

// Site (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) SiteIdN(siteIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.siteIdN = &siteIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Status(status []string) ApiVirtualizationVirtualMachinesListRequest {
	r.status = &status
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) StatusN(statusN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.statusN = &statusN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Tag(tag []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tag = &tag
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) TagN(tagN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tagN = &tagN
	return r
}

// Tenant (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) Tenant(tenant []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenant = &tenant
	return r
}

// Tenant (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantN(tenantN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantN = &tenantN
	return r
}

// Tenant Group (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroup(tenantGroup []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroup = &tenantGroup
	return r
}

// Tenant Group (slug)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroupN(tenantGroupN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroupN = &tenantGroupN
	return r
}

// Tenant Group (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroupId(tenantGroupId []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroupId = &tenantGroupId
	return r
}

// Tenant Group (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantGroupIdN(tenantGroupIdN []string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantGroupIdN = &tenantGroupIdN
	return r
}

// Tenant (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantId(tenantId []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantId = &tenantId
	return r
}

// Tenant (ID)
func (r ApiVirtualizationVirtualMachinesListRequest) TenantIdN(tenantIdN []*string) ApiVirtualizationVirtualMachinesListRequest {
	r.tenantIdN = &tenantIdN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Vcpus(vcpus []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpus = &vcpus
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusGt(vcpusGt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusGt = &vcpusGt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusGte(vcpusGte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusGte = &vcpusGte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusLt(vcpusLt []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusLt = &vcpusLt
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusLte(vcpusLte []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusLte = &vcpusLte
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) VcpusN(vcpusN []int32) ApiVirtualizationVirtualMachinesListRequest {
	r.vcpusN = &vcpusN
	return r
}

func (r ApiVirtualizationVirtualMachinesListRequest) Execute() (*PaginatedVirtualMachineWithConfigContextList, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesListExecute(r)
}

/*
VirtualizationVirtualMachinesList Method for VirtualizationVirtualMachinesList

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiVirtualizationVirtualMachinesListRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesList(ctx context.Context) ApiVirtualizationVirtualMachinesListRequest {
	return ApiVirtualizationVirtualMachinesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedVirtualMachineWithConfigContextList
func (a *VirtualizationApiService) VirtualizationVirtualMachinesListExecute(r ApiVirtualizationVirtualMachinesListRequest) (*PaginatedVirtualMachineWithConfigContextList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedVirtualMachineWithConfigContextList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.cluster != nil {
		localVarQueryParams.Add("cluster", parameterToString(*r.cluster, ""))
	}
	if r.clusterN != nil {
		localVarQueryParams.Add("cluster__n", parameterToString(*r.clusterN, ""))
	}
	if r.clusterGroup != nil {
		t := *r.clusterGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group", parameterToString(t, "multi"))
		}
	}
	if r.clusterGroupN != nil {
		t := *r.clusterGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterGroupId != nil {
		t := *r.clusterGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterGroupIdN != nil {
		t := *r.clusterGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterId != nil {
		t := *r.clusterId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterIdN != nil {
		t := *r.clusterIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_id__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterType != nil {
		t := *r.clusterType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_type", parameterToString(t, "multi"))
		}
	}
	if r.clusterTypeN != nil {
		t := *r.clusterTypeN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_type__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_type__n", parameterToString(t, "multi"))
		}
	}
	if r.clusterTypeId != nil {
		t := *r.clusterTypeId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_type_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_type_id", parameterToString(t, "multi"))
		}
	}
	if r.clusterTypeIdN != nil {
		t := *r.clusterTypeIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("cluster_type_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("cluster_type_id__n", parameterToString(t, "multi"))
		}
	}
	if r.created != nil {
		localVarQueryParams.Add("created", parameterToString(*r.created, ""))
	}
	if r.createdGte != nil {
		localVarQueryParams.Add("created__gte", parameterToString(*r.createdGte, ""))
	}
	if r.createdLte != nil {
		localVarQueryParams.Add("created__lte", parameterToString(*r.createdLte, ""))
	}
	if r.disk != nil {
		t := *r.disk
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disk", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disk", parameterToString(t, "multi"))
		}
	}
	if r.diskGt != nil {
		t := *r.diskGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disk__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disk__gt", parameterToString(t, "multi"))
		}
	}
	if r.diskGte != nil {
		t := *r.diskGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disk__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disk__gte", parameterToString(t, "multi"))
		}
	}
	if r.diskLt != nil {
		t := *r.diskLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disk__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disk__lt", parameterToString(t, "multi"))
		}
	}
	if r.diskLte != nil {
		t := *r.diskLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disk__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disk__lte", parameterToString(t, "multi"))
		}
	}
	if r.diskN != nil {
		t := *r.diskN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("disk__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("disk__n", parameterToString(t, "multi"))
		}
	}
	if r.hasPrimaryIp != nil {
		localVarQueryParams.Add("has_primary_ip", parameterToString(*r.hasPrimaryIp, ""))
	}
	if r.id != nil {
		t := *r.id
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id", parameterToString(t, "multi"))
		}
	}
	if r.idIc != nil {
		t := *r.idIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ic", parameterToString(t, "multi"))
		}
	}
	if r.idIe != nil {
		t := *r.idIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ie", parameterToString(t, "multi"))
		}
	}
	if r.idIew != nil {
		t := *r.idIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__iew", parameterToString(t, "multi"))
		}
	}
	if r.idIre != nil {
		t := *r.idIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__ire", parameterToString(t, "multi"))
		}
	}
	if r.idIsw != nil {
		t := *r.idIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__isw", parameterToString(t, "multi"))
		}
	}
	if r.idN != nil {
		t := *r.idN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__n", parameterToString(t, "multi"))
		}
	}
	if r.idNic != nil {
		t := *r.idNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nic", parameterToString(t, "multi"))
		}
	}
	if r.idNie != nil {
		t := *r.idNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nie", parameterToString(t, "multi"))
		}
	}
	if r.idNiew != nil {
		t := *r.idNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__niew", parameterToString(t, "multi"))
		}
	}
	if r.idNire != nil {
		t := *r.idNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nire", parameterToString(t, "multi"))
		}
	}
	if r.idNisw != nil {
		t := *r.idNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nisw", parameterToString(t, "multi"))
		}
	}
	if r.idNre != nil {
		t := *r.idNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__nre", parameterToString(t, "multi"))
		}
	}
	if r.idRe != nil {
		t := *r.idRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("id__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("id__re", parameterToString(t, "multi"))
		}
	}
	if r.lastUpdated != nil {
		localVarQueryParams.Add("last_updated", parameterToString(*r.lastUpdated, ""))
	}
	if r.lastUpdatedGte != nil {
		localVarQueryParams.Add("last_updated__gte", parameterToString(*r.lastUpdatedGte, ""))
	}
	if r.lastUpdatedLte != nil {
		localVarQueryParams.Add("last_updated__lte", parameterToString(*r.lastUpdatedLte, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.localContextData != nil {
		localVarQueryParams.Add("local_context_data", parameterToString(*r.localContextData, ""))
	}
	if r.localContextSchema != nil {
		t := *r.localContextSchema
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema", parameterToString(t, "multi"))
		}
	}
	if r.localContextSchemaN != nil {
		t := *r.localContextSchemaN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema__n", parameterToString(t, "multi"))
		}
	}
	if r.localContextSchemaId != nil {
		t := *r.localContextSchemaId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema_id", parameterToString(t, "multi"))
		}
	}
	if r.localContextSchemaIdN != nil {
		t := *r.localContextSchemaIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("local_context_schema_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("local_context_schema_id__n", parameterToString(t, "multi"))
		}
	}
	if r.macAddress != nil {
		t := *r.macAddress
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIc != nil {
		t := *r.macAddressIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIe != nil {
		t := *r.macAddressIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIew != nil {
		t := *r.macAddressIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__iew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIre != nil {
		t := *r.macAddressIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__ire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressIsw != nil {
		t := *r.macAddressIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__isw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressN != nil {
		t := *r.macAddressN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__n", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNic != nil {
		t := *r.macAddressNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nic", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNie != nil {
		t := *r.macAddressNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nie", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNiew != nil {
		t := *r.macAddressNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__niew", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNire != nil {
		t := *r.macAddressNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nire", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNisw != nil {
		t := *r.macAddressNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nisw", parameterToString(t, "multi"))
		}
	}
	if r.macAddressNre != nil {
		t := *r.macAddressNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__nre", parameterToString(t, "multi"))
		}
	}
	if r.macAddressRe != nil {
		t := *r.macAddressRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("mac_address__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("mac_address__re", parameterToString(t, "multi"))
		}
	}
	if r.memory != nil {
		t := *r.memory
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("memory", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("memory", parameterToString(t, "multi"))
		}
	}
	if r.memoryGt != nil {
		t := *r.memoryGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("memory__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("memory__gt", parameterToString(t, "multi"))
		}
	}
	if r.memoryGte != nil {
		t := *r.memoryGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("memory__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("memory__gte", parameterToString(t, "multi"))
		}
	}
	if r.memoryLt != nil {
		t := *r.memoryLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("memory__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("memory__lt", parameterToString(t, "multi"))
		}
	}
	if r.memoryLte != nil {
		t := *r.memoryLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("memory__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("memory__lte", parameterToString(t, "multi"))
		}
	}
	if r.memoryN != nil {
		t := *r.memoryN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("memory__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("memory__n", parameterToString(t, "multi"))
		}
	}
	if r.name != nil {
		t := *r.name
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name", parameterToString(t, "multi"))
		}
	}
	if r.nameIc != nil {
		t := *r.nameIc
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ic", parameterToString(t, "multi"))
		}
	}
	if r.nameIe != nil {
		t := *r.nameIe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ie", parameterToString(t, "multi"))
		}
	}
	if r.nameIew != nil {
		t := *r.nameIew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__iew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__iew", parameterToString(t, "multi"))
		}
	}
	if r.nameIre != nil {
		t := *r.nameIre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__ire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__ire", parameterToString(t, "multi"))
		}
	}
	if r.nameIsw != nil {
		t := *r.nameIsw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__isw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__isw", parameterToString(t, "multi"))
		}
	}
	if r.nameN != nil {
		t := *r.nameN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__n", parameterToString(t, "multi"))
		}
	}
	if r.nameNic != nil {
		t := *r.nameNic
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nic", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nic", parameterToString(t, "multi"))
		}
	}
	if r.nameNie != nil {
		t := *r.nameNie
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nie", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nie", parameterToString(t, "multi"))
		}
	}
	if r.nameNiew != nil {
		t := *r.nameNiew
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__niew", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__niew", parameterToString(t, "multi"))
		}
	}
	if r.nameNire != nil {
		t := *r.nameNire
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nire", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nire", parameterToString(t, "multi"))
		}
	}
	if r.nameNisw != nil {
		t := *r.nameNisw
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nisw", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nisw", parameterToString(t, "multi"))
		}
	}
	if r.nameNre != nil {
		t := *r.nameNre
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__nre", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__nre", parameterToString(t, "multi"))
		}
	}
	if r.nameRe != nil {
		t := *r.nameRe
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("name__re", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("name__re", parameterToString(t, "multi"))
		}
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.platform != nil {
		t := *r.platform
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform", parameterToString(t, "multi"))
		}
	}
	if r.platformN != nil {
		t := *r.platformN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform__n", parameterToString(t, "multi"))
		}
	}
	if r.platformId != nil {
		t := *r.platformId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform_id", parameterToString(t, "multi"))
		}
	}
	if r.platformIdN != nil {
		t := *r.platformIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("platform_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("platform_id__n", parameterToString(t, "multi"))
		}
	}
	if r.q != nil {
		localVarQueryParams.Add("q", parameterToString(*r.q, ""))
	}
	if r.region != nil {
		t := *r.region
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region", parameterToString(t, "multi"))
		}
	}
	if r.regionN != nil {
		t := *r.regionN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region__n", parameterToString(t, "multi"))
		}
	}
	if r.regionId != nil {
		t := *r.regionId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id", parameterToString(t, "multi"))
		}
	}
	if r.regionIdN != nil {
		t := *r.regionIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("region_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("region_id__n", parameterToString(t, "multi"))
		}
	}
	if r.role != nil {
		t := *r.role
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role", parameterToString(t, "multi"))
		}
	}
	if r.roleN != nil {
		t := *r.roleN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role__n", parameterToString(t, "multi"))
		}
	}
	if r.roleId != nil {
		t := *r.roleId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id", parameterToString(t, "multi"))
		}
	}
	if r.roleIdN != nil {
		t := *r.roleIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("role_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("role_id__n", parameterToString(t, "multi"))
		}
	}
	if r.site != nil {
		t := *r.site
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site", parameterToString(t, "multi"))
		}
	}
	if r.siteN != nil {
		t := *r.siteN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site__n", parameterToString(t, "multi"))
		}
	}
	if r.siteId != nil {
		t := *r.siteId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id", parameterToString(t, "multi"))
		}
	}
	if r.siteIdN != nil {
		t := *r.siteIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("site_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("site_id__n", parameterToString(t, "multi"))
		}
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status", parameterToString(t, "multi"))
		}
	}
	if r.statusN != nil {
		t := *r.statusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("status__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("status__n", parameterToString(t, "multi"))
		}
	}
	if r.tag != nil {
		t := *r.tag
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag", parameterToString(t, "multi"))
		}
	}
	if r.tagN != nil {
		t := *r.tagN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tag__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tag__n", parameterToString(t, "multi"))
		}
	}
	if r.tenant != nil {
		t := *r.tenant
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant", parameterToString(t, "multi"))
		}
	}
	if r.tenantN != nil {
		t := *r.tenantN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroup != nil {
		t := *r.tenantGroup
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupN != nil {
		t := *r.tenantGroupN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupId != nil {
		t := *r.tenantGroupId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantGroupIdN != nil {
		t := *r.tenantGroupIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_group_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_group_id__n", parameterToString(t, "multi"))
		}
	}
	if r.tenantId != nil {
		t := *r.tenantId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id", parameterToString(t, "multi"))
		}
	}
	if r.tenantIdN != nil {
		t := *r.tenantIdN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("tenant_id__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("tenant_id__n", parameterToString(t, "multi"))
		}
	}
	if r.vcpus != nil {
		t := *r.vcpus
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vcpus", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vcpus", parameterToString(t, "multi"))
		}
	}
	if r.vcpusGt != nil {
		t := *r.vcpusGt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vcpus__gt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vcpus__gt", parameterToString(t, "multi"))
		}
	}
	if r.vcpusGte != nil {
		t := *r.vcpusGte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vcpus__gte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vcpus__gte", parameterToString(t, "multi"))
		}
	}
	if r.vcpusLt != nil {
		t := *r.vcpusLt
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vcpus__lt", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vcpus__lt", parameterToString(t, "multi"))
		}
	}
	if r.vcpusLte != nil {
		t := *r.vcpusLte
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vcpus__lte", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vcpus__lte", parameterToString(t, "multi"))
		}
	}
	if r.vcpusN != nil {
		t := *r.vcpusN
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("vcpus__n", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("vcpus__n", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesPartialUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	patchedWritableVirtualMachineWithConfigContext *PatchedWritableVirtualMachineWithConfigContext
}

func (r ApiVirtualizationVirtualMachinesPartialUpdateRequest) PatchedWritableVirtualMachineWithConfigContext(patchedWritableVirtualMachineWithConfigContext PatchedWritableVirtualMachineWithConfigContext) ApiVirtualizationVirtualMachinesPartialUpdateRequest {
	r.patchedWritableVirtualMachineWithConfigContext = &patchedWritableVirtualMachineWithConfigContext
	return r
}

func (r ApiVirtualizationVirtualMachinesPartialUpdateRequest) Execute() (*VirtualMachineWithConfigContext, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesPartialUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesPartialUpdate Method for VirtualizationVirtualMachinesPartialUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesPartialUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesPartialUpdate(ctx context.Context, id string) ApiVirtualizationVirtualMachinesPartialUpdateRequest {
	return ApiVirtualizationVirtualMachinesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualMachineWithConfigContext
func (a *VirtualizationApiService) VirtualizationVirtualMachinesPartialUpdateExecute(r ApiVirtualizationVirtualMachinesPartialUpdateRequest) (*VirtualMachineWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachineWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedWritableVirtualMachineWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesRetrieveRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
}

func (r ApiVirtualizationVirtualMachinesRetrieveRequest) Execute() (*VirtualMachineWithConfigContext, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesRetrieveExecute(r)
}

/*
VirtualizationVirtualMachinesRetrieve Method for VirtualizationVirtualMachinesRetrieve

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesRetrieveRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesRetrieve(ctx context.Context, id string) ApiVirtualizationVirtualMachinesRetrieveRequest {
	return ApiVirtualizationVirtualMachinesRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualMachineWithConfigContext
func (a *VirtualizationApiService) VirtualizationVirtualMachinesRetrieveExecute(r ApiVirtualizationVirtualMachinesRetrieveRequest) (*VirtualMachineWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachineWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVirtualizationVirtualMachinesUpdateRequest struct {
	ctx context.Context
	ApiService *VirtualizationApiService
	id string
	writableVirtualMachineWithConfigContext *WritableVirtualMachineWithConfigContext
}

func (r ApiVirtualizationVirtualMachinesUpdateRequest) WritableVirtualMachineWithConfigContext(writableVirtualMachineWithConfigContext WritableVirtualMachineWithConfigContext) ApiVirtualizationVirtualMachinesUpdateRequest {
	r.writableVirtualMachineWithConfigContext = &writableVirtualMachineWithConfigContext
	return r
}

func (r ApiVirtualizationVirtualMachinesUpdateRequest) Execute() (*VirtualMachineWithConfigContext, *http.Response, error) {
	return r.ApiService.VirtualizationVirtualMachinesUpdateExecute(r)
}

/*
VirtualizationVirtualMachinesUpdate Method for VirtualizationVirtualMachinesUpdate

Used by views that work with config context models (device and virtual machine).
Provides a get_queryset() method which deals with adding the config context
data annotation or not.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A UUID string identifying this virtual machine.
 @return ApiVirtualizationVirtualMachinesUpdateRequest
*/
func (a *VirtualizationApiService) VirtualizationVirtualMachinesUpdate(ctx context.Context, id string) ApiVirtualizationVirtualMachinesUpdateRequest {
	return ApiVirtualizationVirtualMachinesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return VirtualMachineWithConfigContext
func (a *VirtualizationApiService) VirtualizationVirtualMachinesUpdateExecute(r ApiVirtualizationVirtualMachinesUpdateRequest) (*VirtualMachineWithConfigContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VirtualMachineWithConfigContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VirtualizationApiService.VirtualizationVirtualMachinesUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/virtualization/virtual-machines/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.writableVirtualMachineWithConfigContext == nil {
		return localVarReturnValue, nil, reportError("writableVirtualMachineWithConfigContext is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.writableVirtualMachineWithConfigContext
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
