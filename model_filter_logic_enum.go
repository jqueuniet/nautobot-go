/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FilterLogicEnum the model 'FilterLogicEnum'
type FilterLogicEnum string

// List of FilterLogicEnum
const (
	DISABLED FilterLogicEnum = "disabled"
	LOOSE FilterLogicEnum = "loose"
	EXACT FilterLogicEnum = "exact"
)

// All allowed values of FilterLogicEnum enum
var AllowedFilterLogicEnumEnumValues = []FilterLogicEnum{
	"disabled",
	"loose",
	"exact",
}

func (v *FilterLogicEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilterLogicEnum(value)
	for _, existing := range AllowedFilterLogicEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilterLogicEnum", value)
}

// NewFilterLogicEnumFromValue returns a pointer to a valid FilterLogicEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilterLogicEnumFromValue(v string) (*FilterLogicEnum, error) {
	ev := FilterLogicEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilterLogicEnum: valid values are %v", v, AllowedFilterLogicEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilterLogicEnum) IsValid() bool {
	for _, existing := range AllowedFilterLogicEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilterLogicEnum value
func (v FilterLogicEnum) Ptr() *FilterLogicEnum {
	return &v
}

type NullableFilterLogicEnum struct {
	value *FilterLogicEnum
	isSet bool
}

func (v NullableFilterLogicEnum) Get() *FilterLogicEnum {
	return v.value
}

func (v *NullableFilterLogicEnum) Set(val *FilterLogicEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterLogicEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterLogicEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterLogicEnum(val *FilterLogicEnum) *NullableFilterLogicEnum {
	return &NullableFilterLogicEnum{value: val, isSet: true}
}

func (v NullableFilterLogicEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterLogicEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

