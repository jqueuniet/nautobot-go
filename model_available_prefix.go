/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AvailablePrefix Representation of a prefix which does not exist in the database.
type AvailablePrefix struct {
	Family int32 `json:"family"`
	Prefix string `json:"prefix"`
	Vrf AvailableIPVrf `json:"vrf"`
}

// NewAvailablePrefix instantiates a new AvailablePrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailablePrefix(family int32, prefix string, vrf AvailableIPVrf) *AvailablePrefix {
	this := AvailablePrefix{}
	this.Family = family
	this.Prefix = prefix
	this.Vrf = vrf
	return &this
}

// NewAvailablePrefixWithDefaults instantiates a new AvailablePrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailablePrefixWithDefaults() *AvailablePrefix {
	this := AvailablePrefix{}
	return &this
}

// GetFamily returns the Family field value
func (o *AvailablePrefix) GetFamily() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Family
}

// GetFamilyOk returns a tuple with the Family field value
// and a boolean to check if the value has been set.
func (o *AvailablePrefix) GetFamilyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Family, true
}

// SetFamily sets field value
func (o *AvailablePrefix) SetFamily(v int32) {
	o.Family = v
}

// GetPrefix returns the Prefix field value
func (o *AvailablePrefix) GetPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value
// and a boolean to check if the value has been set.
func (o *AvailablePrefix) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Prefix, true
}

// SetPrefix sets field value
func (o *AvailablePrefix) SetPrefix(v string) {
	o.Prefix = v
}

// GetVrf returns the Vrf field value
func (o *AvailablePrefix) GetVrf() AvailableIPVrf {
	if o == nil {
		var ret AvailableIPVrf
		return ret
	}

	return o.Vrf
}

// GetVrfOk returns a tuple with the Vrf field value
// and a boolean to check if the value has been set.
func (o *AvailablePrefix) GetVrfOk() (*AvailableIPVrf, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Vrf, true
}

// SetVrf sets field value
func (o *AvailablePrefix) SetVrf(v AvailableIPVrf) {
	o.Vrf = v
}

func (o AvailablePrefix) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["family"] = o.Family
	}
	if true {
		toSerialize["prefix"] = o.Prefix
	}
	if true {
		toSerialize["vrf"] = o.Vrf
	}
	return json.Marshal(toSerialize)
}

type NullableAvailablePrefix struct {
	value *AvailablePrefix
	isSet bool
}

func (v NullableAvailablePrefix) Get() *AvailablePrefix {
	return v.value
}

func (v *NullableAvailablePrefix) Set(val *AvailablePrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailablePrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailablePrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailablePrefix(val *AvailablePrefix) *NullableAvailablePrefix {
	return &NullableAvailablePrefix{value: val, isSet: true}
}

func (v NullableAvailablePrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailablePrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


