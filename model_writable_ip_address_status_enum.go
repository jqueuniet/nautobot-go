/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WritableIPAddressStatusEnum the model 'WritableIPAddressStatusEnum'
type WritableIPAddressStatusEnum string

// List of WritableIPAddressStatusEnum
const (
	//ACTIVE WritableIPAddressStatusEnum = "active"
	//DEPRECATED WritableIPAddressStatusEnum = "deprecated"
	DHCP WritableIPAddressStatusEnum = "dhcp"
	//RESERVED WritableIPAddressStatusEnum = "reserved"
	SLAAC WritableIPAddressStatusEnum = "slaac"
)

// All allowed values of WritableIPAddressStatusEnum enum
var AllowedWritableIPAddressStatusEnumEnumValues = []WritableIPAddressStatusEnum{
	"active",
	"deprecated",
	"dhcp",
	"reserved",
	"slaac",
}

func (v *WritableIPAddressStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WritableIPAddressStatusEnum(value)
	for _, existing := range AllowedWritableIPAddressStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WritableIPAddressStatusEnum", value)
}

// NewWritableIPAddressStatusEnumFromValue returns a pointer to a valid WritableIPAddressStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWritableIPAddressStatusEnumFromValue(v string) (*WritableIPAddressStatusEnum, error) {
	ev := WritableIPAddressStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WritableIPAddressStatusEnum: valid values are %v", v, AllowedWritableIPAddressStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WritableIPAddressStatusEnum) IsValid() bool {
	for _, existing := range AllowedWritableIPAddressStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WritableIPAddressStatusEnum value
func (v WritableIPAddressStatusEnum) Ptr() *WritableIPAddressStatusEnum {
	return &v
}

type NullableWritableIPAddressStatusEnum struct {
	value *WritableIPAddressStatusEnum
	isSet bool
}

func (v NullableWritableIPAddressStatusEnum) Get() *WritableIPAddressStatusEnum {
	return v.value
}

func (v *NullableWritableIPAddressStatusEnum) Set(val *WritableIPAddressStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableIPAddressStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableIPAddressStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableIPAddressStatusEnum(val *WritableIPAddressStatusEnum) *NullableWritableIPAddressStatusEnum {
	return &NullableWritableIPAddressStatusEnum{value: val, isSet: true}
}

func (v NullableWritableIPAddressStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableIPAddressStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
