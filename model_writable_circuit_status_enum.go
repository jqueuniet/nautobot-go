/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WritableCircuitStatusEnum the model 'WritableCircuitStatusEnum'
type WritableCircuitStatusEnum string

// List of WritableCircuitStatusEnum
const (
	ACTIVE WritableCircuitStatusEnum = "active"
	DECOMMISSIONED WritableCircuitStatusEnum = "decommissioned"
	DEPROVISIONING WritableCircuitStatusEnum = "deprovisioning"
	OFFLINE WritableCircuitStatusEnum = "offline"
	PLANNED WritableCircuitStatusEnum = "planned"
	PROVISIONING WritableCircuitStatusEnum = "provisioning"
)

// All allowed values of WritableCircuitStatusEnum enum
var AllowedWritableCircuitStatusEnumEnumValues = []WritableCircuitStatusEnum{
	"active",
	"decommissioned",
	"deprovisioning",
	"offline",
	"planned",
	"provisioning",
}

func (v *WritableCircuitStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WritableCircuitStatusEnum(value)
	for _, existing := range AllowedWritableCircuitStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WritableCircuitStatusEnum", value)
}

// NewWritableCircuitStatusEnumFromValue returns a pointer to a valid WritableCircuitStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWritableCircuitStatusEnumFromValue(v string) (*WritableCircuitStatusEnum, error) {
	ev := WritableCircuitStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WritableCircuitStatusEnum: valid values are %v", v, AllowedWritableCircuitStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WritableCircuitStatusEnum) IsValid() bool {
	for _, existing := range AllowedWritableCircuitStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WritableCircuitStatusEnum value
func (v WritableCircuitStatusEnum) Ptr() *WritableCircuitStatusEnum {
	return &v
}

type NullableWritableCircuitStatusEnum struct {
	value *WritableCircuitStatusEnum
	isSet bool
}

func (v NullableWritableCircuitStatusEnum) Get() *WritableCircuitStatusEnum {
	return v.value
}

func (v *NullableWritableCircuitStatusEnum) Set(val *WritableCircuitStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableCircuitStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableCircuitStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableCircuitStatusEnum(val *WritableCircuitStatusEnum) *NullableWritableCircuitStatusEnum {
	return &NullableWritableCircuitStatusEnum{value: val, isSet: true}
}

func (v NullableWritableCircuitStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableCircuitStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

