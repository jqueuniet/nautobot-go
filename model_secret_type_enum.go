/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SecretTypeEnum the model 'SecretTypeEnum'
type SecretTypeEnum string

// List of SecretTypeEnum
const (
	KEY SecretTypeEnum = "key"
	PASSWORD SecretTypeEnum = "password"
	SECRET SecretTypeEnum = "secret"
	TOKEN SecretTypeEnum = "token"
	USERNAME SecretTypeEnum = "username"
)

// All allowed values of SecretTypeEnum enum
var AllowedSecretTypeEnumEnumValues = []SecretTypeEnum{
	"key",
	"password",
	"secret",
	"token",
	"username",
}

func (v *SecretTypeEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SecretTypeEnum(value)
	for _, existing := range AllowedSecretTypeEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SecretTypeEnum", value)
}

// NewSecretTypeEnumFromValue returns a pointer to a valid SecretTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSecretTypeEnumFromValue(v string) (*SecretTypeEnum, error) {
	ev := SecretTypeEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SecretTypeEnum: valid values are %v", v, AllowedSecretTypeEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SecretTypeEnum) IsValid() bool {
	for _, existing := range AllowedSecretTypeEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SecretTypeEnum value
func (v SecretTypeEnum) Ptr() *SecretTypeEnum {
	return &v
}

type NullableSecretTypeEnum struct {
	value *SecretTypeEnum
	isSet bool
}

func (v NullableSecretTypeEnum) Get() *SecretTypeEnum {
	return v.value
}

func (v *NullableSecretTypeEnum) Set(val *SecretTypeEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretTypeEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretTypeEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretTypeEnum(val *SecretTypeEnum) *NullableSecretTypeEnum {
	return &NullableSecretTypeEnum{value: val, isSet: true}
}

func (v NullableSecretTypeEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretTypeEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

