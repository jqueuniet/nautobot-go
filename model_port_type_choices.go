/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PortTypeChoices the model 'PortTypeChoices'
type PortTypeChoices string

// List of PortTypeChoices
const (
	_8P8C PortTypeChoices = "8p8c"
	_8P6C PortTypeChoices = "8p6c"
	_8P4C PortTypeChoices = "8p4c"
	_8P2C PortTypeChoices = "8p2c"
	GG45 PortTypeChoices = "gg45"
	TERA_4P PortTypeChoices = "tera-4p"
	TERA_2P PortTypeChoices = "tera-2p"
	TERA_1P PortTypeChoices = "tera-1p"
	_110_PUNCH PortTypeChoices = "110-punch"
	BNC PortTypeChoices = "bnc"
	MRJ21 PortTypeChoices = "mrj21"
	FC PortTypeChoices = "fc"
	LC PortTypeChoices = "lc"
	LC_APC PortTypeChoices = "lc-apc"
	LSH PortTypeChoices = "lsh"
	LSH_APC PortTypeChoices = "lsh-apc"
	MPO PortTypeChoices = "mpo"
	MTRJ PortTypeChoices = "mtrj"
	SC PortTypeChoices = "sc"
	SC_APC PortTypeChoices = "sc-apc"
	ST PortTypeChoices = "st"
	CS PortTypeChoices = "cs"
	SN PortTypeChoices = "sn"
	URM_P2 PortTypeChoices = "urm-p2"
	URM_P4 PortTypeChoices = "urm-p4"
	URM_P8 PortTypeChoices = "urm-p8"
	SPLICE PortTypeChoices = "splice"
)

// All allowed values of PortTypeChoices enum
var AllowedPortTypeChoicesEnumValues = []PortTypeChoices{
	"8p8c",
	"8p6c",
	"8p4c",
	"8p2c",
	"gg45",
	"tera-4p",
	"tera-2p",
	"tera-1p",
	"110-punch",
	"bnc",
	"mrj21",
	"fc",
	"lc",
	"lc-apc",
	"lsh",
	"lsh-apc",
	"mpo",
	"mtrj",
	"sc",
	"sc-apc",
	"st",
	"cs",
	"sn",
	"urm-p2",
	"urm-p4",
	"urm-p8",
	"splice",
}

func (v *PortTypeChoices) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PortTypeChoices(value)
	for _, existing := range AllowedPortTypeChoicesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PortTypeChoices", value)
}

// NewPortTypeChoicesFromValue returns a pointer to a valid PortTypeChoices
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPortTypeChoicesFromValue(v string) (*PortTypeChoices, error) {
	ev := PortTypeChoices(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PortTypeChoices: valid values are %v", v, AllowedPortTypeChoicesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PortTypeChoices) IsValid() bool {
	for _, existing := range AllowedPortTypeChoicesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PortTypeChoices value
func (v PortTypeChoices) Ptr() *PortTypeChoices {
	return &v
}

type NullablePortTypeChoices struct {
	value *PortTypeChoices
	isSet bool
}

func (v NullablePortTypeChoices) Get() *PortTypeChoices {
	return v.value
}

func (v *NullablePortTypeChoices) Set(val *PortTypeChoices) {
	v.value = val
	v.isSet = true
}

func (v NullablePortTypeChoices) IsSet() bool {
	return v.isSet
}

func (v *NullablePortTypeChoices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePortTypeChoices(val *PortTypeChoices) *NullablePortTypeChoices {
	return &NullablePortTypeChoices{value: val, isSet: true}
}

func (v NullablePortTypeChoices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePortTypeChoices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

