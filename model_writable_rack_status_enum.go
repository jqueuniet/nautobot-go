/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WritableRackStatusEnum the model 'WritableRackStatusEnum'
type WritableRackStatusEnum string

// List of WritableRackStatusEnum
const (
	//ACTIVE WritableRackStatusEnum = "active"
	AVAILABLE WritableRackStatusEnum = "available"
	//DEPRECATED WritableRackStatusEnum = "deprecated"
	//PLANNED WritableRackStatusEnum = "planned"
	//RESERVED WritableRackStatusEnum = "reserved"
)

// All allowed values of WritableRackStatusEnum enum
var AllowedWritableRackStatusEnumEnumValues = []WritableRackStatusEnum{
	"active",
	"available",
	"deprecated",
	"planned",
	"reserved",
}

func (v *WritableRackStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WritableRackStatusEnum(value)
	for _, existing := range AllowedWritableRackStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WritableRackStatusEnum", value)
}

// NewWritableRackStatusEnumFromValue returns a pointer to a valid WritableRackStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWritableRackStatusEnumFromValue(v string) (*WritableRackStatusEnum, error) {
	ev := WritableRackStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WritableRackStatusEnum: valid values are %v", v, AllowedWritableRackStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WritableRackStatusEnum) IsValid() bool {
	for _, existing := range AllowedWritableRackStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WritableRackStatusEnum value
func (v WritableRackStatusEnum) Ptr() *WritableRackStatusEnum {
	return &v
}

type NullableWritableRackStatusEnum struct {
	value *WritableRackStatusEnum
	isSet bool
}

func (v NullableWritableRackStatusEnum) Get() *WritableRackStatusEnum {
	return v.value
}

func (v *NullableWritableRackStatusEnum) Set(val *WritableRackStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableRackStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableRackStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableRackStatusEnum(val *WritableRackStatusEnum) *NullableWritableRackStatusEnum {
	return &NullableWritableRackStatusEnum{value: val, isSet: true}
}

func (v NullableWritableRackStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableRackStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
