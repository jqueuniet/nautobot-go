/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WritableVLANStatusEnum the model 'WritableVLANStatusEnum'
type WritableVLANStatusEnum string

// List of WritableVLANStatusEnum
//const (
//	ACTIVE WritableVLANStatusEnum = "active"
//	DEPRECATED WritableVLANStatusEnum = "deprecated"
//	RESERVED WritableVLANStatusEnum = "reserved"
//)

// All allowed values of WritableVLANStatusEnum enum
var AllowedWritableVLANStatusEnumEnumValues = []WritableVLANStatusEnum{
	"active",
	"deprecated",
	"reserved",
}

func (v *WritableVLANStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WritableVLANStatusEnum(value)
	for _, existing := range AllowedWritableVLANStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WritableVLANStatusEnum", value)
}

// NewWritableVLANStatusEnumFromValue returns a pointer to a valid WritableVLANStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWritableVLANStatusEnumFromValue(v string) (*WritableVLANStatusEnum, error) {
	ev := WritableVLANStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WritableVLANStatusEnum: valid values are %v", v, AllowedWritableVLANStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WritableVLANStatusEnum) IsValid() bool {
	for _, existing := range AllowedWritableVLANStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WritableVLANStatusEnum value
func (v WritableVLANStatusEnum) Ptr() *WritableVLANStatusEnum {
	return &v
}

type NullableWritableVLANStatusEnum struct {
	value *WritableVLANStatusEnum
	isSet bool
}

func (v NullableWritableVLANStatusEnum) Get() *WritableVLANStatusEnum {
	return v.value
}

func (v *NullableWritableVLANStatusEnum) Set(val *WritableVLANStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableVLANStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableVLANStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableVLANStatusEnum(val *WritableVLANStatusEnum) *NullableWritableVLANStatusEnum {
	return &NullableWritableVLANStatusEnum{value: val, isSet: true}
}

func (v NullableWritableVLANStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableVLANStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
