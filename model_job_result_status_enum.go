/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// JobResultStatusEnum the model 'JobResultStatusEnum'
type JobResultStatusEnum string

// List of JobResultStatusEnum
const (
	PENDING JobResultStatusEnum = "pending"
	RUNNING JobResultStatusEnum = "running"
	COMPLETED JobResultStatusEnum = "completed"
	ERRORED JobResultStatusEnum = "errored"
	FAILED JobResultStatusEnum = "failed"
)

// All allowed values of JobResultStatusEnum enum
var AllowedJobResultStatusEnumEnumValues = []JobResultStatusEnum{
	"pending",
	"running",
	"completed",
	"errored",
	"failed",
}

func (v *JobResultStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JobResultStatusEnum(value)
	for _, existing := range AllowedJobResultStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JobResultStatusEnum", value)
}

// NewJobResultStatusEnumFromValue returns a pointer to a valid JobResultStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJobResultStatusEnumFromValue(v string) (*JobResultStatusEnum, error) {
	ev := JobResultStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JobResultStatusEnum: valid values are %v", v, AllowedJobResultStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JobResultStatusEnum) IsValid() bool {
	for _, existing := range AllowedJobResultStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JobResultStatusEnum value
func (v JobResultStatusEnum) Ptr() *JobResultStatusEnum {
	return &v
}

type NullableJobResultStatusEnum struct {
	value *JobResultStatusEnum
	isSet bool
}

func (v NullableJobResultStatusEnum) Get() *JobResultStatusEnum {
	return v.value
}

func (v *NullableJobResultStatusEnum) Set(val *JobResultStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableJobResultStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableJobResultStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobResultStatusEnum(val *JobResultStatusEnum) *NullableJobResultStatusEnum {
	return &NullableJobResultStatusEnum{value: val, isSet: true}
}

func (v NullableJobResultStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobResultStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

