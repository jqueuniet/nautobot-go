/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ObjectChange struct for ObjectChange
type ObjectChange struct {
	Id string `json:"id"`
	Url string `json:"url"`
	Time time.Time `json:"time"`
	User JobResultUser `json:"user"`
	UserName string `json:"user_name"`
	RequestId string `json:"request_id"`
	Action ObjectChangeAction `json:"action"`
	ChangedObjectType string `json:"changed_object_type"`
	ChangedObjectId string `json:"changed_object_id"`
	ChangedObject map[string]interface{} `json:"changed_object"`
	ObjectData map[string]interface{} `json:"object_data"`
}

// NewObjectChange instantiates a new ObjectChange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectChange(id string, url string, time time.Time, user JobResultUser, userName string, requestId string, action ObjectChangeAction, changedObjectType string, changedObjectId string, changedObject map[string]interface{}, objectData map[string]interface{}) *ObjectChange {
	this := ObjectChange{}
	this.Id = id
	this.Url = url
	this.Time = time
	this.User = user
	this.UserName = userName
	this.RequestId = requestId
	this.Action = action
	this.ChangedObjectType = changedObjectType
	this.ChangedObjectId = changedObjectId
	this.ChangedObject = changedObject
	this.ObjectData = objectData
	return &this
}

// NewObjectChangeWithDefaults instantiates a new ObjectChange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectChangeWithDefaults() *ObjectChange {
	this := ObjectChange{}
	return &this
}

// GetId returns the Id field value
func (o *ObjectChange) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjectChange) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *ObjectChange) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ObjectChange) SetUrl(v string) {
	o.Url = v
}

// GetTime returns the Time field value
func (o *ObjectChange) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ObjectChange) SetTime(v time.Time) {
	o.Time = v
}

// GetUser returns the User field value
func (o *ObjectChange) GetUser() JobResultUser {
	if o == nil {
		var ret JobResultUser
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUserOk() (*JobResultUser, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ObjectChange) SetUser(v JobResultUser) {
	o.User = v
}

// GetUserName returns the UserName field value
func (o *ObjectChange) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *ObjectChange) SetUserName(v string) {
	o.UserName = v
}

// GetRequestId returns the RequestId field value
func (o *ObjectChange) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *ObjectChange) SetRequestId(v string) {
	o.RequestId = v
}

// GetAction returns the Action field value
func (o *ObjectChange) GetAction() ObjectChangeAction {
	if o == nil {
		var ret ObjectChangeAction
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetActionOk() (*ObjectChangeAction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ObjectChange) SetAction(v ObjectChangeAction) {
	o.Action = v
}

// GetChangedObjectType returns the ChangedObjectType field value
func (o *ObjectChange) GetChangedObjectType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangedObjectType
}

// GetChangedObjectTypeOk returns a tuple with the ChangedObjectType field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedObjectType, true
}

// SetChangedObjectType sets field value
func (o *ObjectChange) SetChangedObjectType(v string) {
	o.ChangedObjectType = v
}

// GetChangedObjectId returns the ChangedObjectId field value
func (o *ObjectChange) GetChangedObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChangedObjectId
}

// GetChangedObjectIdOk returns a tuple with the ChangedObjectId field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetChangedObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChangedObjectId, true
}

// SetChangedObjectId sets field value
func (o *ObjectChange) SetChangedObjectId(v string) {
	o.ChangedObjectId = v
}

// GetChangedObject returns the ChangedObject field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *ObjectChange) GetChangedObject() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ChangedObject
}

// GetChangedObjectOk returns a tuple with the ChangedObject field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectChange) GetChangedObjectOk() (map[string]interface{}, bool) {
	if o == nil || o.ChangedObject == nil {
		return nil, false
	}
	return o.ChangedObject, true
}

// SetChangedObject sets field value
func (o *ObjectChange) SetChangedObject(v map[string]interface{}) {
	o.ChangedObject = v
}

// GetObjectData returns the ObjectData field value
func (o *ObjectChange) GetObjectData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.ObjectData
}

// GetObjectDataOk returns a tuple with the ObjectData field value
// and a boolean to check if the value has been set.
func (o *ObjectChange) GetObjectDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectData, true
}

// SetObjectData sets field value
func (o *ObjectChange) SetObjectData(v map[string]interface{}) {
	o.ObjectData = v
}

func (o ObjectChange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["user_name"] = o.UserName
	}
	if true {
		toSerialize["request_id"] = o.RequestId
	}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["changed_object_type"] = o.ChangedObjectType
	}
	if true {
		toSerialize["changed_object_id"] = o.ChangedObjectId
	}
	if o.ChangedObject != nil {
		toSerialize["changed_object"] = o.ChangedObject
	}
	if true {
		toSerialize["object_data"] = o.ObjectData
	}
	return json.Marshal(toSerialize)
}

type NullableObjectChange struct {
	value *ObjectChange
	isSet bool
}

func (v NullableObjectChange) Get() *ObjectChange {
	return v.value
}

func (v *NullableObjectChange) Set(val *ObjectChange) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectChange) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectChange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectChange(val *ObjectChange) *NullableObjectChange {
	return &NullableObjectChange{value: val, isSet: true}
}

func (v NullableObjectChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectChange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


