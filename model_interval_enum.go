/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IntervalEnum the model 'IntervalEnum'
type IntervalEnum string

// List of IntervalEnum
const (
	IMMEDIATELY IntervalEnum = "immediately"
	FUTURE IntervalEnum = "future"
	HOURLY IntervalEnum = "hourly"
	DAILY IntervalEnum = "daily"
	WEEKLY IntervalEnum = "weekly"
	CUSTOM IntervalEnum = "custom"
)

// All allowed values of IntervalEnum enum
var AllowedIntervalEnumEnumValues = []IntervalEnum{
	"immediately",
	"future",
	"hourly",
	"daily",
	"weekly",
	"custom",
}

func (v *IntervalEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IntervalEnum(value)
	for _, existing := range AllowedIntervalEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IntervalEnum", value)
}

// NewIntervalEnumFromValue returns a pointer to a valid IntervalEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIntervalEnumFromValue(v string) (*IntervalEnum, error) {
	ev := IntervalEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IntervalEnum: valid values are %v", v, AllowedIntervalEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IntervalEnum) IsValid() bool {
	for _, existing := range AllowedIntervalEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IntervalEnum value
func (v IntervalEnum) Ptr() *IntervalEnum {
	return &v
}

type NullableIntervalEnum struct {
	value *IntervalEnum
	isSet bool
}

func (v NullableIntervalEnum) Get() *IntervalEnum {
	return v.value
}

func (v *NullableIntervalEnum) Set(val *IntervalEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableIntervalEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableIntervalEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntervalEnum(val *IntervalEnum) *NullableIntervalEnum {
	return &NullableIntervalEnum{value: val, isSet: true}
}

func (v NullableIntervalEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntervalEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

