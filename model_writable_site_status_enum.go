/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WritableSiteStatusEnum the model 'WritableSiteStatusEnum'
type WritableSiteStatusEnum string

// List of WritableSiteStatusEnum
const (
	ACTIVE WritableSiteStatusEnum = "active"
	DECOMMISSIONING WritableSiteStatusEnum = "decommissioning"
	PLANNED WritableSiteStatusEnum = "planned"
	RETIRED WritableSiteStatusEnum = "retired"
	STAGING WritableSiteStatusEnum = "staging"
)

// All allowed values of WritableSiteStatusEnum enum
var AllowedWritableSiteStatusEnumEnumValues = []WritableSiteStatusEnum{
	"active",
	"decommissioning",
	"planned",
	"retired",
	"staging",
}

func (v *WritableSiteStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WritableSiteStatusEnum(value)
	for _, existing := range AllowedWritableSiteStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WritableSiteStatusEnum", value)
}

// NewWritableSiteStatusEnumFromValue returns a pointer to a valid WritableSiteStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWritableSiteStatusEnumFromValue(v string) (*WritableSiteStatusEnum, error) {
	ev := WritableSiteStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WritableSiteStatusEnum: valid values are %v", v, AllowedWritableSiteStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WritableSiteStatusEnum) IsValid() bool {
	for _, existing := range AllowedWritableSiteStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WritableSiteStatusEnum value
func (v WritableSiteStatusEnum) Ptr() *WritableSiteStatusEnum {
	return &v
}

type NullableWritableSiteStatusEnum struct {
	value *WritableSiteStatusEnum
	isSet bool
}

func (v NullableWritableSiteStatusEnum) Get() *WritableSiteStatusEnum {
	return v.value
}

func (v *NullableWritableSiteStatusEnum) Set(val *WritableSiteStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableWritableSiteStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableWritableSiteStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritableSiteStatusEnum(val *WritableSiteStatusEnum) *NullableWritableSiteStatusEnum {
	return &NullableWritableSiteStatusEnum{value: val, isSet: true}
}

func (v NullableWritableSiteStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritableSiteStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

