/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NestedRack Returns a nested representation of an object on read, but accepts either the nested representation or the primary key value on write operations.
type NestedRack struct {
	Id string `json:"id"`
	Url string `json:"url"`
	Name string `json:"name"`
	DeviceCount int32 `json:"device_count"`
	// Human friendly display value
	Display string `json:"display"`
}

// NewNestedRack instantiates a new NestedRack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNestedRack(id string, url string, name string, deviceCount int32, display string) *NestedRack {
	this := NestedRack{}
	this.Id = id
	this.Url = url
	this.Name = name
	this.DeviceCount = deviceCount
	this.Display = display
	return &this
}

// NewNestedRackWithDefaults instantiates a new NestedRack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNestedRackWithDefaults() *NestedRack {
	this := NestedRack{}
	return &this
}

// GetId returns the Id field value
func (o *NestedRack) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NestedRack) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NestedRack) SetId(v string) {
	o.Id = v
}

// GetUrl returns the Url field value
func (o *NestedRack) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *NestedRack) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *NestedRack) SetUrl(v string) {
	o.Url = v
}

// GetName returns the Name field value
func (o *NestedRack) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NestedRack) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NestedRack) SetName(v string) {
	o.Name = v
}

// GetDeviceCount returns the DeviceCount field value
func (o *NestedRack) GetDeviceCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DeviceCount
}

// GetDeviceCountOk returns a tuple with the DeviceCount field value
// and a boolean to check if the value has been set.
func (o *NestedRack) GetDeviceCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceCount, true
}

// SetDeviceCount sets field value
func (o *NestedRack) SetDeviceCount(v int32) {
	o.DeviceCount = v
}

// GetDisplay returns the Display field value
func (o *NestedRack) GetDisplay() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Display
}

// GetDisplayOk returns a tuple with the Display field value
// and a boolean to check if the value has been set.
func (o *NestedRack) GetDisplayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Display, true
}

// SetDisplay sets field value
func (o *NestedRack) SetDisplay(v string) {
	o.Display = v
}

func (o NestedRack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["device_count"] = o.DeviceCount
	}
	if true {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullableNestedRack struct {
	value *NestedRack
	isSet bool
}

func (v NullableNestedRack) Get() *NestedRack {
	return v.value
}

func (v *NullableNestedRack) Set(val *NestedRack) {
	v.value = val
	v.isSet = true
}

func (v NullableNestedRack) IsSet() bool {
	return v.isSet
}

func (v *NullableNestedRack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNestedRack(val *NestedRack) *NullableNestedRack {
	return &NullableNestedRack{value: val, isSet: true}
}

func (v NullableNestedRack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNestedRack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


