/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PatchedWritableConfigContext Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedWritableConfigContext struct {
	Id *string `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Name *string `json:"name,omitempty"`
	OwnerContentType NullableString `json:"owner_content_type,omitempty"`
	OwnerObjectId NullableString `json:"owner_object_id,omitempty"`
	Owner map[string]interface{} `json:"owner,omitempty"`
	Weight *int32 `json:"weight,omitempty"`
	Description *string `json:"description,omitempty"`
	// Optional schema to validate the structure of the data
	Schema NullableString `json:"schema,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	Regions []string `json:"regions,omitempty"`
	Sites []string `json:"sites,omitempty"`
	Roles []string `json:"roles,omitempty"`
	DeviceTypes []string `json:"device_types,omitempty"`
	Platforms []string `json:"platforms,omitempty"`
	ClusterGroups []string `json:"cluster_groups,omitempty"`
	Clusters []string `json:"clusters,omitempty"`
	TenantGroups []string `json:"tenant_groups,omitempty"`
	Tenants []string `json:"tenants,omitempty"`
	Tags []string `json:"tags,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	Created *string `json:"created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	// Human friendly display value
	Display *string `json:"display,omitempty"`
}

// NewPatchedWritableConfigContext instantiates a new PatchedWritableConfigContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedWritableConfigContext() *PatchedWritableConfigContext {
	this := PatchedWritableConfigContext{}
	return &this
}

// NewPatchedWritableConfigContextWithDefaults instantiates a new PatchedWritableConfigContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedWritableConfigContextWithDefaults() *PatchedWritableConfigContext {
	this := PatchedWritableConfigContext{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedWritableConfigContext) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedWritableConfigContext) SetUrl(v string) {
	o.Url = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedWritableConfigContext) SetName(v string) {
	o.Name = &v
}

// GetOwnerContentType returns the OwnerContentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedWritableConfigContext) GetOwnerContentType() string {
	if o == nil || o.OwnerContentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerContentType.Get()
}

// GetOwnerContentTypeOk returns a tuple with the OwnerContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedWritableConfigContext) GetOwnerContentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerContentType.Get(), o.OwnerContentType.IsSet()
}

// HasOwnerContentType returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasOwnerContentType() bool {
	if o != nil && o.OwnerContentType.IsSet() {
		return true
	}

	return false
}

// SetOwnerContentType gets a reference to the given NullableString and assigns it to the OwnerContentType field.
func (o *PatchedWritableConfigContext) SetOwnerContentType(v string) {
	o.OwnerContentType.Set(&v)
}
// SetOwnerContentTypeNil sets the value for OwnerContentType to be an explicit nil
func (o *PatchedWritableConfigContext) SetOwnerContentTypeNil() {
	o.OwnerContentType.Set(nil)
}

// UnsetOwnerContentType ensures that no value is present for OwnerContentType, not even an explicit nil
func (o *PatchedWritableConfigContext) UnsetOwnerContentType() {
	o.OwnerContentType.Unset()
}

// GetOwnerObjectId returns the OwnerObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedWritableConfigContext) GetOwnerObjectId() string {
	if o == nil || o.OwnerObjectId.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerObjectId.Get()
}

// GetOwnerObjectIdOk returns a tuple with the OwnerObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedWritableConfigContext) GetOwnerObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnerObjectId.Get(), o.OwnerObjectId.IsSet()
}

// HasOwnerObjectId returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasOwnerObjectId() bool {
	if o != nil && o.OwnerObjectId.IsSet() {
		return true
	}

	return false
}

// SetOwnerObjectId gets a reference to the given NullableString and assigns it to the OwnerObjectId field.
func (o *PatchedWritableConfigContext) SetOwnerObjectId(v string) {
	o.OwnerObjectId.Set(&v)
}
// SetOwnerObjectIdNil sets the value for OwnerObjectId to be an explicit nil
func (o *PatchedWritableConfigContext) SetOwnerObjectIdNil() {
	o.OwnerObjectId.Set(nil)
}

// UnsetOwnerObjectId ensures that no value is present for OwnerObjectId, not even an explicit nil
func (o *PatchedWritableConfigContext) UnsetOwnerObjectId() {
	o.OwnerObjectId.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedWritableConfigContext) GetOwner() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedWritableConfigContext) GetOwnerOk() (map[string]interface{}, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given map[string]interface{} and assigns it to the Owner field.
func (o *PatchedWritableConfigContext) SetOwner(v map[string]interface{}) {
	o.Owner = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetWeight() int32 {
	if o == nil || o.Weight == nil {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetWeightOk() (*int32, bool) {
	if o == nil || o.Weight == nil {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasWeight() bool {
	if o != nil && o.Weight != nil {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *PatchedWritableConfigContext) SetWeight(v int32) {
	o.Weight = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedWritableConfigContext) SetDescription(v string) {
	o.Description = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedWritableConfigContext) GetSchema() string {
	if o == nil || o.Schema.Get() == nil {
		var ret string
		return ret
	}
	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedWritableConfigContext) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// HasSchema returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasSchema() bool {
	if o != nil && o.Schema.IsSet() {
		return true
	}

	return false
}

// SetSchema gets a reference to the given NullableString and assigns it to the Schema field.
func (o *PatchedWritableConfigContext) SetSchema(v string) {
	o.Schema.Set(&v)
}
// SetSchemaNil sets the value for Schema to be an explicit nil
func (o *PatchedWritableConfigContext) SetSchemaNil() {
	o.Schema.Set(nil)
}

// UnsetSchema ensures that no value is present for Schema, not even an explicit nil
func (o *PatchedWritableConfigContext) UnsetSchema() {
	o.Schema.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *PatchedWritableConfigContext) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetRegions() []string {
	if o == nil || o.Regions == nil {
		var ret []string
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetRegionsOk() ([]string, bool) {
	if o == nil || o.Regions == nil {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasRegions() bool {
	if o != nil && o.Regions != nil {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []string and assigns it to the Regions field.
func (o *PatchedWritableConfigContext) SetRegions(v []string) {
	o.Regions = v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetSites() []string {
	if o == nil || o.Sites == nil {
		var ret []string
		return ret
	}
	return o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetSitesOk() ([]string, bool) {
	if o == nil || o.Sites == nil {
		return nil, false
	}
	return o.Sites, true
}

// HasSites returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasSites() bool {
	if o != nil && o.Sites != nil {
		return true
	}

	return false
}

// SetSites gets a reference to the given []string and assigns it to the Sites field.
func (o *PatchedWritableConfigContext) SetSites(v []string) {
	o.Sites = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *PatchedWritableConfigContext) SetRoles(v []string) {
	o.Roles = v
}

// GetDeviceTypes returns the DeviceTypes field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetDeviceTypes() []string {
	if o == nil || o.DeviceTypes == nil {
		var ret []string
		return ret
	}
	return o.DeviceTypes
}

// GetDeviceTypesOk returns a tuple with the DeviceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetDeviceTypesOk() ([]string, bool) {
	if o == nil || o.DeviceTypes == nil {
		return nil, false
	}
	return o.DeviceTypes, true
}

// HasDeviceTypes returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasDeviceTypes() bool {
	if o != nil && o.DeviceTypes != nil {
		return true
	}

	return false
}

// SetDeviceTypes gets a reference to the given []string and assigns it to the DeviceTypes field.
func (o *PatchedWritableConfigContext) SetDeviceTypes(v []string) {
	o.DeviceTypes = v
}

// GetPlatforms returns the Platforms field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetPlatforms() []string {
	if o == nil || o.Platforms == nil {
		var ret []string
		return ret
	}
	return o.Platforms
}

// GetPlatformsOk returns a tuple with the Platforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetPlatformsOk() ([]string, bool) {
	if o == nil || o.Platforms == nil {
		return nil, false
	}
	return o.Platforms, true
}

// HasPlatforms returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasPlatforms() bool {
	if o != nil && o.Platforms != nil {
		return true
	}

	return false
}

// SetPlatforms gets a reference to the given []string and assigns it to the Platforms field.
func (o *PatchedWritableConfigContext) SetPlatforms(v []string) {
	o.Platforms = v
}

// GetClusterGroups returns the ClusterGroups field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetClusterGroups() []string {
	if o == nil || o.ClusterGroups == nil {
		var ret []string
		return ret
	}
	return o.ClusterGroups
}

// GetClusterGroupsOk returns a tuple with the ClusterGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetClusterGroupsOk() ([]string, bool) {
	if o == nil || o.ClusterGroups == nil {
		return nil, false
	}
	return o.ClusterGroups, true
}

// HasClusterGroups returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasClusterGroups() bool {
	if o != nil && o.ClusterGroups != nil {
		return true
	}

	return false
}

// SetClusterGroups gets a reference to the given []string and assigns it to the ClusterGroups field.
func (o *PatchedWritableConfigContext) SetClusterGroups(v []string) {
	o.ClusterGroups = v
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetClusters() []string {
	if o == nil || o.Clusters == nil {
		var ret []string
		return ret
	}
	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetClustersOk() ([]string, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []string and assigns it to the Clusters field.
func (o *PatchedWritableConfigContext) SetClusters(v []string) {
	o.Clusters = v
}

// GetTenantGroups returns the TenantGroups field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetTenantGroups() []string {
	if o == nil || o.TenantGroups == nil {
		var ret []string
		return ret
	}
	return o.TenantGroups
}

// GetTenantGroupsOk returns a tuple with the TenantGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetTenantGroupsOk() ([]string, bool) {
	if o == nil || o.TenantGroups == nil {
		return nil, false
	}
	return o.TenantGroups, true
}

// HasTenantGroups returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasTenantGroups() bool {
	if o != nil && o.TenantGroups != nil {
		return true
	}

	return false
}

// SetTenantGroups gets a reference to the given []string and assigns it to the TenantGroups field.
func (o *PatchedWritableConfigContext) SetTenantGroups(v []string) {
	o.TenantGroups = v
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetTenants() []string {
	if o == nil || o.Tenants == nil {
		var ret []string
		return ret
	}
	return o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetTenantsOk() ([]string, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []string and assigns it to the Tenants field.
func (o *PatchedWritableConfigContext) SetTenants(v []string) {
	o.Tenants = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PatchedWritableConfigContext) SetTags(v []string) {
	o.Tags = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *PatchedWritableConfigContext) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *PatchedWritableConfigContext) SetCreated(v string) {
	o.Created = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *PatchedWritableConfigContext) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *PatchedWritableConfigContext) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableConfigContext) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *PatchedWritableConfigContext) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *PatchedWritableConfigContext) SetDisplay(v string) {
	o.Display = &v
}

func (o PatchedWritableConfigContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.OwnerContentType.IsSet() {
		toSerialize["owner_content_type"] = o.OwnerContentType.Get()
	}
	if o.OwnerObjectId.IsSet() {
		toSerialize["owner_object_id"] = o.OwnerObjectId.Get()
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Weight != nil {
		toSerialize["weight"] = o.Weight
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Schema.IsSet() {
		toSerialize["schema"] = o.Schema.Get()
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.Regions != nil {
		toSerialize["regions"] = o.Regions
	}
	if o.Sites != nil {
		toSerialize["sites"] = o.Sites
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.DeviceTypes != nil {
		toSerialize["device_types"] = o.DeviceTypes
	}
	if o.Platforms != nil {
		toSerialize["platforms"] = o.Platforms
	}
	if o.ClusterGroups != nil {
		toSerialize["cluster_groups"] = o.ClusterGroups
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	if o.TenantGroups != nil {
		toSerialize["tenant_groups"] = o.TenantGroups
	}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedWritableConfigContext struct {
	value *PatchedWritableConfigContext
	isSet bool
}

func (v NullablePatchedWritableConfigContext) Get() *PatchedWritableConfigContext {
	return v.value
}

func (v *NullablePatchedWritableConfigContext) Set(val *PatchedWritableConfigContext) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableConfigContext) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableConfigContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableConfigContext(val *PatchedWritableConfigContext) *NullablePatchedWritableConfigContext {
	return &NullablePatchedWritableConfigContext{value: val, isSet: true}
}

func (v NullablePatchedWritableConfigContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableConfigContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


