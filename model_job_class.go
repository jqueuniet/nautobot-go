/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JobClass struct for JobClass
type JobClass struct {
	Url string `json:"url"`
	Id string `json:"id"`
	Pk NullableString `json:"pk"`
	Name string `json:"name"`
	Description string `json:"description"`
	TestMethods []string `json:"test_methods"`
	Vars map[string]interface{} `json:"vars"`
	Result *NestedJobResult `json:"result,omitempty"`
}

// NewJobClass instantiates a new JobClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobClass(url string, id string, pk NullableString, name string, description string, testMethods []string, vars map[string]interface{}) *JobClass {
	this := JobClass{}
	this.Url = url
	this.Id = id
	this.Pk = pk
	this.Name = name
	this.Description = description
	this.TestMethods = testMethods
	this.Vars = vars
	return &this
}

// NewJobClassWithDefaults instantiates a new JobClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobClassWithDefaults() *JobClass {
	this := JobClass{}
	return &this
}

// GetUrl returns the Url field value
func (o *JobClass) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *JobClass) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *JobClass) SetUrl(v string) {
	o.Url = v
}

// GetId returns the Id field value
func (o *JobClass) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JobClass) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JobClass) SetId(v string) {
	o.Id = v
}

// GetPk returns the Pk field value
// If the value is explicit nil, the zero value for string will be returned
func (o *JobClass) GetPk() string {
	if o == nil || o.Pk.Get() == nil {
		var ret string
		return ret
	}

	return *o.Pk.Get()
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobClass) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pk.Get(), o.Pk.IsSet()
}

// SetPk sets field value
func (o *JobClass) SetPk(v string) {
	o.Pk.Set(&v)
}

// GetName returns the Name field value
func (o *JobClass) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JobClass) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JobClass) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *JobClass) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *JobClass) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *JobClass) SetDescription(v string) {
	o.Description = v
}

// GetTestMethods returns the TestMethods field value
func (o *JobClass) GetTestMethods() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TestMethods
}

// GetTestMethodsOk returns a tuple with the TestMethods field value
// and a boolean to check if the value has been set.
func (o *JobClass) GetTestMethodsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestMethods, true
}

// SetTestMethods sets field value
func (o *JobClass) SetTestMethods(v []string) {
	o.TestMethods = v
}

// GetVars returns the Vars field value
func (o *JobClass) GetVars() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Vars
}

// GetVarsOk returns a tuple with the Vars field value
// and a boolean to check if the value has been set.
func (o *JobClass) GetVarsOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vars, true
}

// SetVars sets field value
func (o *JobClass) SetVars(v map[string]interface{}) {
	o.Vars = v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *JobClass) GetResult() NestedJobResult {
	if o == nil || o.Result == nil {
		var ret NestedJobResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobClass) GetResultOk() (*NestedJobResult, bool) {
	if o == nil || o.Result == nil {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *JobClass) HasResult() bool {
	if o != nil && o.Result != nil {
		return true
	}

	return false
}

// SetResult gets a reference to the given NestedJobResult and assigns it to the Result field.
func (o *JobClass) SetResult(v NestedJobResult) {
	o.Result = &v
}

func (o JobClass) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["url"] = o.Url
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["pk"] = o.Pk.Get()
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["test_methods"] = o.TestMethods
	}
	if true {
		toSerialize["vars"] = o.Vars
	}
	if o.Result != nil {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullableJobClass struct {
	value *JobClass
	isSet bool
}

func (v NullableJobClass) Get() *JobClass {
	return v.value
}

func (v *NullableJobClass) Set(val *JobClass) {
	v.value = val
	v.isSet = true
}

func (v NullableJobClass) IsSet() bool {
	return v.isSet
}

func (v *NullableJobClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobClass(val *JobClass) *NullableJobClass {
	return &NullableJobClass{value: val, isSet: true}
}

func (v NullableJobClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


