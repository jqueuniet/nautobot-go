/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProvidedContentsEnum the model 'ProvidedContentsEnum'
type ProvidedContentsEnum string

// List of ProvidedContentsEnum
const (
	CONFIGCONTEXT ProvidedContentsEnum = "extras.configcontext"
	CONFIGCONTEXTSCHEMA ProvidedContentsEnum = "extras.configcontextschema"
	EXPORTTEMPLATE ProvidedContentsEnum = "extras.exporttemplate"
	JOB ProvidedContentsEnum = "extras.job"
)

// All allowed values of ProvidedContentsEnum enum
var AllowedProvidedContentsEnumEnumValues = []ProvidedContentsEnum{
	"extras.configcontext",
	"extras.configcontextschema",
	"extras.exporttemplate",
	"extras.job",
}

func (v *ProvidedContentsEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvidedContentsEnum(value)
	for _, existing := range AllowedProvidedContentsEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvidedContentsEnum", value)
}

// NewProvidedContentsEnumFromValue returns a pointer to a valid ProvidedContentsEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvidedContentsEnumFromValue(v string) (*ProvidedContentsEnum, error) {
	ev := ProvidedContentsEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvidedContentsEnum: valid values are %v", v, AllowedProvidedContentsEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvidedContentsEnum) IsValid() bool {
	for _, existing := range AllowedProvidedContentsEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvidedContentsEnum value
func (v ProvidedContentsEnum) Ptr() *ProvidedContentsEnum {
	return &v
}

type NullableProvidedContentsEnum struct {
	value *ProvidedContentsEnum
	isSet bool
}

func (v NullableProvidedContentsEnum) Get() *ProvidedContentsEnum {
	return v.value
}

func (v *NullableProvidedContentsEnum) Set(val *ProvidedContentsEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableProvidedContentsEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableProvidedContentsEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvidedContentsEnum(val *ProvidedContentsEnum) *NullableProvidedContentsEnum {
	return &NullableProvidedContentsEnum{value: val, isSet: true}
}

func (v NullableProvidedContentsEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvidedContentsEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

