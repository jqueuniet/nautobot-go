/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AvailablePrefixRequestStatusEnum the model 'AvailablePrefixRequestStatusEnum'
type AvailablePrefixRequestStatusEnum string

// List of AvailablePrefixRequestStatusEnum
//const (
//	CONTAINER AvailablePrefixRequestStatusEnum = "container"
//	ACTIVE AvailablePrefixRequestStatusEnum = "active"
//	RESERVED AvailablePrefixRequestStatusEnum = "reserved"
//	DEPRECATED AvailablePrefixRequestStatusEnum = "deprecated"
//)

// All allowed values of AvailablePrefixRequestStatusEnum enum
var AllowedAvailablePrefixRequestStatusEnumEnumValues = []AvailablePrefixRequestStatusEnum{
	"container",
	"active",
	"reserved",
	"deprecated",
}

func (v *AvailablePrefixRequestStatusEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AvailablePrefixRequestStatusEnum(value)
	for _, existing := range AllowedAvailablePrefixRequestStatusEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AvailablePrefixRequestStatusEnum", value)
}

// NewAvailablePrefixRequestStatusEnumFromValue returns a pointer to a valid AvailablePrefixRequestStatusEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAvailablePrefixRequestStatusEnumFromValue(v string) (*AvailablePrefixRequestStatusEnum, error) {
	ev := AvailablePrefixRequestStatusEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AvailablePrefixRequestStatusEnum: valid values are %v", v, AllowedAvailablePrefixRequestStatusEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AvailablePrefixRequestStatusEnum) IsValid() bool {
	for _, existing := range AllowedAvailablePrefixRequestStatusEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AvailablePrefixRequestStatusEnum value
func (v AvailablePrefixRequestStatusEnum) Ptr() *AvailablePrefixRequestStatusEnum {
	return &v
}

type NullableAvailablePrefixRequestStatusEnum struct {
	value *AvailablePrefixRequestStatusEnum
	isSet bool
}

func (v NullableAvailablePrefixRequestStatusEnum) Get() *AvailablePrefixRequestStatusEnum {
	return v.value
}

func (v *NullableAvailablePrefixRequestStatusEnum) Set(val *AvailablePrefixRequestStatusEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailablePrefixRequestStatusEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailablePrefixRequestStatusEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailablePrefixRequestStatusEnum(val *AvailablePrefixRequestStatusEnum) *NullableAvailablePrefixRequestStatusEnum {
	return &NullableAvailablePrefixRequestStatusEnum{value: val, isSet: true}
}

func (v NullableAvailablePrefixRequestStatusEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailablePrefixRequestStatusEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

