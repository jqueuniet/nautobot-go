/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// PatchedWritableGitRepository Git repositories defined as a data source.
type PatchedWritableGitRepository struct {
	Id *string `json:"id,omitempty"`
	Url *string `json:"url,omitempty"`
	Name *string `json:"name,omitempty"`
	Slug *string `json:"slug,omitempty"`
	// Only HTTP and HTTPS URLs are presently supported
	RemoteUrl *string `json:"remote_url,omitempty"`
	Branch *string `json:"branch,omitempty"`
	Token *string `json:"token,omitempty"`
	Username *string `json:"username,omitempty"`
	SecretsGroup NullableString `json:"secrets_group,omitempty"`
	// Commit hash of the most recent fetch from the selected branch. Used for syncing between workers.
	CurrentHead *string `json:"current_head,omitempty"`
	ProvidedContents []GitRepositoryProvidedContentsInner `json:"provided_contents,omitempty"`
	Created *string `json:"created,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
	CustomFields map[string]interface{} `json:"custom_fields,omitempty"`
	ComputedFields map[string]interface{} `json:"computed_fields,omitempty"`
	// Human friendly display value
	Display *string `json:"display,omitempty"`
}

// NewPatchedWritableGitRepository instantiates a new PatchedWritableGitRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedWritableGitRepository() *PatchedWritableGitRepository {
	this := PatchedWritableGitRepository{}
	return &this
}

// NewPatchedWritableGitRepositoryWithDefaults instantiates a new PatchedWritableGitRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedWritableGitRepositoryWithDefaults() *PatchedWritableGitRepository {
	this := PatchedWritableGitRepository{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedWritableGitRepository) SetId(v string) {
	o.Id = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedWritableGitRepository) SetUrl(v string) {
	o.Url = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedWritableGitRepository) SetName(v string) {
	o.Name = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetSlug() string {
	if o == nil || o.Slug == nil {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetSlugOk() (*string, bool) {
	if o == nil || o.Slug == nil {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasSlug() bool {
	if o != nil && o.Slug != nil {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *PatchedWritableGitRepository) SetSlug(v string) {
	o.Slug = &v
}

// GetRemoteUrl returns the RemoteUrl field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetRemoteUrl() string {
	if o == nil || o.RemoteUrl == nil {
		var ret string
		return ret
	}
	return *o.RemoteUrl
}

// GetRemoteUrlOk returns a tuple with the RemoteUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetRemoteUrlOk() (*string, bool) {
	if o == nil || o.RemoteUrl == nil {
		return nil, false
	}
	return o.RemoteUrl, true
}

// HasRemoteUrl returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasRemoteUrl() bool {
	if o != nil && o.RemoteUrl != nil {
		return true
	}

	return false
}

// SetRemoteUrl gets a reference to the given string and assigns it to the RemoteUrl field.
func (o *PatchedWritableGitRepository) SetRemoteUrl(v string) {
	o.RemoteUrl = &v
}

// GetBranch returns the Branch field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetBranch() string {
	if o == nil || o.Branch == nil {
		var ret string
		return ret
	}
	return *o.Branch
}

// GetBranchOk returns a tuple with the Branch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetBranchOk() (*string, bool) {
	if o == nil || o.Branch == nil {
		return nil, false
	}
	return o.Branch, true
}

// HasBranch returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasBranch() bool {
	if o != nil && o.Branch != nil {
		return true
	}

	return false
}

// SetBranch gets a reference to the given string and assigns it to the Branch field.
func (o *PatchedWritableGitRepository) SetBranch(v string) {
	o.Branch = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *PatchedWritableGitRepository) SetToken(v string) {
	o.Token = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetUsername() string {
	if o == nil || o.Username == nil {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetUsernameOk() (*string, bool) {
	if o == nil || o.Username == nil {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasUsername() bool {
	if o != nil && o.Username != nil {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *PatchedWritableGitRepository) SetUsername(v string) {
	o.Username = &v
}

// GetSecretsGroup returns the SecretsGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedWritableGitRepository) GetSecretsGroup() string {
	if o == nil || o.SecretsGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecretsGroup.Get()
}

// GetSecretsGroupOk returns a tuple with the SecretsGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedWritableGitRepository) GetSecretsGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretsGroup.Get(), o.SecretsGroup.IsSet()
}

// HasSecretsGroup returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasSecretsGroup() bool {
	if o != nil && o.SecretsGroup.IsSet() {
		return true
	}

	return false
}

// SetSecretsGroup gets a reference to the given NullableString and assigns it to the SecretsGroup field.
func (o *PatchedWritableGitRepository) SetSecretsGroup(v string) {
	o.SecretsGroup.Set(&v)
}
// SetSecretsGroupNil sets the value for SecretsGroup to be an explicit nil
func (o *PatchedWritableGitRepository) SetSecretsGroupNil() {
	o.SecretsGroup.Set(nil)
}

// UnsetSecretsGroup ensures that no value is present for SecretsGroup, not even an explicit nil
func (o *PatchedWritableGitRepository) UnsetSecretsGroup() {
	o.SecretsGroup.Unset()
}

// GetCurrentHead returns the CurrentHead field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetCurrentHead() string {
	if o == nil || o.CurrentHead == nil {
		var ret string
		return ret
	}
	return *o.CurrentHead
}

// GetCurrentHeadOk returns a tuple with the CurrentHead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetCurrentHeadOk() (*string, bool) {
	if o == nil || o.CurrentHead == nil {
		return nil, false
	}
	return o.CurrentHead, true
}

// HasCurrentHead returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasCurrentHead() bool {
	if o != nil && o.CurrentHead != nil {
		return true
	}

	return false
}

// SetCurrentHead gets a reference to the given string and assigns it to the CurrentHead field.
func (o *PatchedWritableGitRepository) SetCurrentHead(v string) {
	o.CurrentHead = &v
}

// GetProvidedContents returns the ProvidedContents field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetProvidedContents() []GitRepositoryProvidedContentsInner {
	if o == nil || o.ProvidedContents == nil {
		var ret []GitRepositoryProvidedContentsInner
		return ret
	}
	return o.ProvidedContents
}

// GetProvidedContentsOk returns a tuple with the ProvidedContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetProvidedContentsOk() ([]GitRepositoryProvidedContentsInner, bool) {
	if o == nil || o.ProvidedContents == nil {
		return nil, false
	}
	return o.ProvidedContents, true
}

// HasProvidedContents returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasProvidedContents() bool {
	if o != nil && o.ProvidedContents != nil {
		return true
	}

	return false
}

// SetProvidedContents gets a reference to the given []GitRepositoryProvidedContentsInner and assigns it to the ProvidedContents field.
func (o *PatchedWritableGitRepository) SetProvidedContents(v []GitRepositoryProvidedContentsInner) {
	o.ProvidedContents = v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetCreated() string {
	if o == nil || o.Created == nil {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetCreatedOk() (*string, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *PatchedWritableGitRepository) SetCreated(v string) {
	o.Created = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetLastUpdated() time.Time {
	if o == nil || o.LastUpdated == nil {
		var ret time.Time
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetLastUpdatedOk() (*time.Time, bool) {
	if o == nil || o.LastUpdated == nil {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasLastUpdated() bool {
	if o != nil && o.LastUpdated != nil {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given time.Time and assigns it to the LastUpdated field.
func (o *PatchedWritableGitRepository) SetLastUpdated(v time.Time) {
	o.LastUpdated = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetCustomFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *PatchedWritableGitRepository) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = v
}

// GetComputedFields returns the ComputedFields field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetComputedFields() map[string]interface{} {
	if o == nil || o.ComputedFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.ComputedFields
}

// GetComputedFieldsOk returns a tuple with the ComputedFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetComputedFieldsOk() (map[string]interface{}, bool) {
	if o == nil || o.ComputedFields == nil {
		return nil, false
	}
	return o.ComputedFields, true
}

// HasComputedFields returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasComputedFields() bool {
	if o != nil && o.ComputedFields != nil {
		return true
	}

	return false
}

// SetComputedFields gets a reference to the given map[string]interface{} and assigns it to the ComputedFields field.
func (o *PatchedWritableGitRepository) SetComputedFields(v map[string]interface{}) {
	o.ComputedFields = v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *PatchedWritableGitRepository) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableGitRepository) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *PatchedWritableGitRepository) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *PatchedWritableGitRepository) SetDisplay(v string) {
	o.Display = &v
}

func (o PatchedWritableGitRepository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Slug != nil {
		toSerialize["slug"] = o.Slug
	}
	if o.RemoteUrl != nil {
		toSerialize["remote_url"] = o.RemoteUrl
	}
	if o.Branch != nil {
		toSerialize["branch"] = o.Branch
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Username != nil {
		toSerialize["username"] = o.Username
	}
	if o.SecretsGroup.IsSet() {
		toSerialize["secrets_group"] = o.SecretsGroup.Get()
	}
	if o.CurrentHead != nil {
		toSerialize["current_head"] = o.CurrentHead
	}
	if o.ProvidedContents != nil {
		toSerialize["provided_contents"] = o.ProvidedContents
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.LastUpdated != nil {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	if o.ComputedFields != nil {
		toSerialize["computed_fields"] = o.ComputedFields
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedWritableGitRepository struct {
	value *PatchedWritableGitRepository
	isSet bool
}

func (v NullablePatchedWritableGitRepository) Get() *PatchedWritableGitRepository {
	return v.value
}

func (v *NullablePatchedWritableGitRepository) Set(val *PatchedWritableGitRepository) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableGitRepository) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableGitRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableGitRepository(val *PatchedWritableGitRepository) *NullablePatchedWritableGitRepository {
	return &NullablePatchedWritableGitRepository{value: val, isSet: true}
}

func (v NullablePatchedWritableGitRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableGitRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


