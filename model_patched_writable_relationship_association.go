/*
API Documentation

Source of truth and network automation platform

API version: 1.3.10b1 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PatchedWritableRelationshipAssociation Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
type PatchedWritableRelationshipAssociation struct {
	Id *string `json:"id,omitempty"`
	Relationship *string `json:"relationship,omitempty"`
	SourceType *string `json:"source_type,omitempty"`
	SourceId *string `json:"source_id,omitempty"`
	DestinationType *string `json:"destination_type,omitempty"`
	DestinationId *string `json:"destination_id,omitempty"`
	// Human friendly display value
	Display *string `json:"display,omitempty"`
}

// NewPatchedWritableRelationshipAssociation instantiates a new PatchedWritableRelationshipAssociation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedWritableRelationshipAssociation() *PatchedWritableRelationshipAssociation {
	this := PatchedWritableRelationshipAssociation{}
	return &this
}

// NewPatchedWritableRelationshipAssociationWithDefaults instantiates a new PatchedWritableRelationshipAssociation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedWritableRelationshipAssociationWithDefaults() *PatchedWritableRelationshipAssociation {
	this := PatchedWritableRelationshipAssociation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PatchedWritableRelationshipAssociation) SetId(v string) {
	o.Id = &v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetRelationship() string {
	if o == nil || o.Relationship == nil {
		var ret string
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetRelationshipOk() (*string, bool) {
	if o == nil || o.Relationship == nil {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasRelationship() bool {
	if o != nil && o.Relationship != nil {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given string and assigns it to the Relationship field.
func (o *PatchedWritableRelationshipAssociation) SetRelationship(v string) {
	o.Relationship = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetSourceType() string {
	if o == nil || o.SourceType == nil {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetSourceTypeOk() (*string, bool) {
	if o == nil || o.SourceType == nil {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasSourceType() bool {
	if o != nil && o.SourceType != nil {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *PatchedWritableRelationshipAssociation) SetSourceType(v string) {
	o.SourceType = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetSourceId() string {
	if o == nil || o.SourceId == nil {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetSourceIdOk() (*string, bool) {
	if o == nil || o.SourceId == nil {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasSourceId() bool {
	if o != nil && o.SourceId != nil {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *PatchedWritableRelationshipAssociation) SetSourceId(v string) {
	o.SourceId = &v
}

// GetDestinationType returns the DestinationType field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetDestinationType() string {
	if o == nil || o.DestinationType == nil {
		var ret string
		return ret
	}
	return *o.DestinationType
}

// GetDestinationTypeOk returns a tuple with the DestinationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetDestinationTypeOk() (*string, bool) {
	if o == nil || o.DestinationType == nil {
		return nil, false
	}
	return o.DestinationType, true
}

// HasDestinationType returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasDestinationType() bool {
	if o != nil && o.DestinationType != nil {
		return true
	}

	return false
}

// SetDestinationType gets a reference to the given string and assigns it to the DestinationType field.
func (o *PatchedWritableRelationshipAssociation) SetDestinationType(v string) {
	o.DestinationType = &v
}

// GetDestinationId returns the DestinationId field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetDestinationId() string {
	if o == nil || o.DestinationId == nil {
		var ret string
		return ret
	}
	return *o.DestinationId
}

// GetDestinationIdOk returns a tuple with the DestinationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetDestinationIdOk() (*string, bool) {
	if o == nil || o.DestinationId == nil {
		return nil, false
	}
	return o.DestinationId, true
}

// HasDestinationId returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasDestinationId() bool {
	if o != nil && o.DestinationId != nil {
		return true
	}

	return false
}

// SetDestinationId gets a reference to the given string and assigns it to the DestinationId field.
func (o *PatchedWritableRelationshipAssociation) SetDestinationId(v string) {
	o.DestinationId = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *PatchedWritableRelationshipAssociation) GetDisplay() string {
	if o == nil || o.Display == nil {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedWritableRelationshipAssociation) GetDisplayOk() (*string, bool) {
	if o == nil || o.Display == nil {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *PatchedWritableRelationshipAssociation) HasDisplay() bool {
	if o != nil && o.Display != nil {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *PatchedWritableRelationshipAssociation) SetDisplay(v string) {
	o.Display = &v
}

func (o PatchedWritableRelationshipAssociation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Relationship != nil {
		toSerialize["relationship"] = o.Relationship
	}
	if o.SourceType != nil {
		toSerialize["source_type"] = o.SourceType
	}
	if o.SourceId != nil {
		toSerialize["source_id"] = o.SourceId
	}
	if o.DestinationType != nil {
		toSerialize["destination_type"] = o.DestinationType
	}
	if o.DestinationId != nil {
		toSerialize["destination_id"] = o.DestinationId
	}
	if o.Display != nil {
		toSerialize["display"] = o.Display
	}
	return json.Marshal(toSerialize)
}

type NullablePatchedWritableRelationshipAssociation struct {
	value *PatchedWritableRelationshipAssociation
	isSet bool
}

func (v NullablePatchedWritableRelationshipAssociation) Get() *PatchedWritableRelationshipAssociation {
	return v.value
}

func (v *NullablePatchedWritableRelationshipAssociation) Set(val *PatchedWritableRelationshipAssociation) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedWritableRelationshipAssociation) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedWritableRelationshipAssociation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedWritableRelationshipAssociation(val *PatchedWritableRelationshipAssociation) *NullablePatchedWritableRelationshipAssociation {
	return &NullablePatchedWritableRelationshipAssociation{value: val, isSet: true}
}

func (v NullablePatchedWritableRelationshipAssociation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedWritableRelationshipAssociation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


