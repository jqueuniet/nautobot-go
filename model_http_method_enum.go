/*
API Documentation

Source of truth and network automation platform

API version: 1.3.7 (1.2)
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// HttpMethodEnum the model 'HttpMethodEnum'
type HttpMethodEnum string

// List of HttpMethodEnum
const (
	GET HttpMethodEnum = "GET"
	POST HttpMethodEnum = "POST"
	PUT HttpMethodEnum = "PUT"
	PATCH HttpMethodEnum = "PATCH"
	DELETE HttpMethodEnum = "DELETE"
)

// All allowed values of HttpMethodEnum enum
var AllowedHttpMethodEnumEnumValues = []HttpMethodEnum{
	"GET",
	"POST",
	"PUT",
	"PATCH",
	"DELETE",
}

func (v *HttpMethodEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HttpMethodEnum(value)
	for _, existing := range AllowedHttpMethodEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HttpMethodEnum", value)
}

// NewHttpMethodEnumFromValue returns a pointer to a valid HttpMethodEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHttpMethodEnumFromValue(v string) (*HttpMethodEnum, error) {
	ev := HttpMethodEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HttpMethodEnum: valid values are %v", v, AllowedHttpMethodEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HttpMethodEnum) IsValid() bool {
	for _, existing := range AllowedHttpMethodEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HttpMethodEnum value
func (v HttpMethodEnum) Ptr() *HttpMethodEnum {
	return &v
}

type NullableHttpMethodEnum struct {
	value *HttpMethodEnum
	isSet bool
}

func (v NullableHttpMethodEnum) Get() *HttpMethodEnum {
	return v.value
}

func (v *NullableHttpMethodEnum) Set(val *HttpMethodEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpMethodEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpMethodEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpMethodEnum(val *HttpMethodEnum) *NullableHttpMethodEnum {
	return &NullableHttpMethodEnum{value: val, isSet: true}
}

func (v NullableHttpMethodEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpMethodEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

